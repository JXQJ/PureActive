// ***********************************************************************
// Assembly         : PureActive.Core
// Author           : SteveBu
// Created          : 10-22-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="OperatingSystem.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Runtime.InteropServices;
using PureActive.Core.Abstractions.System;

namespace PureActive.Core.System
{
    /// <summary>
    /// Class OperatingSystem.
    /// Implements the <see cref="IOperatingSystem" />
    /// </summary>
    /// <seealso cref="IOperatingSystem" />
    /// <autogeneratedoc />
    public class OperatingSystem : IOperatingSystem
    {
        /// <summary>
        /// Determines whether this instance is linux.
        /// </summary>
        /// <returns><c>true</c> if this instance is linux; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsLinux()
        {
            return RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
        }

        /// <summary>
        /// Determines whether this instance is osx.
        /// </summary>
        /// <returns><c>true</c> if this instance is osx; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsOsx()
        {
            return RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
        }

        /// <summary>
        /// Determines whether this instance is windows.
        /// </summary>
        /// <returns><c>true</c> if this instance is windows; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsWindows()
        {
            return RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
        }
    }
}