// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkGraph.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using PureActive.Network.Abstractions.Device;
using PureActive.Network.Abstractions.Local;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Devices.PureObjectGraph;

namespace PureActive.Network.Devices.Network
{
    /// <summary>
    /// Class NetworkGraph.
    /// Implements the <see cref="PureActive.Network.Abstractions.Network.INetworkGraph" />
    /// </summary>
    /// <seealso cref="PureActive.Network.Abstractions.Network.INetworkGraph" />
    /// <autogeneratedoc />
    public class NetworkGraph : INetworkGraph
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkGraph"/> class.
        /// </summary>
        /// <param name="networkGateway">The network gateway.</param>
        /// <param name="localNetworkDevice">The local network device.</param>
        /// <exception cref="ArgumentNullException">
        /// networkGateway
        /// or
        /// localNetworkDevice
        /// </exception>
        /// <autogeneratedoc />
        public NetworkGraph(INetworkGateway networkGateway, ILocalNetworkDevice localNetworkDevice)
        {
            NetworkGateway = networkGateway ?? throw new ArgumentNullException(nameof(networkGateway));
            LocalNetworkDevice = localNetworkDevice ?? throw new ArgumentNullException(nameof(localNetworkDevice));
        }

        /// <summary>
        /// Adds the device to gateway.
        /// </summary>
        /// <param name="device">The device.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public bool AddDeviceToGateway(IDevice device)
        {
            lock (_deviceGraphLock)
            {
                if (device.Equals(NetworkGateway))
                {
                }
                else if (device.Equals(LocalNetworkDevice))
                {
                }
                else if (_deviceGraph.AddVertex(device))
                {
                    _deviceGraph.AddEdge(device.ObjectId, NetworkGateway.ObjectId);
                }
            }

            return false;
        }

        #region Private Fields

        /// <summary>
        /// The device graph
        /// </summary>
        /// <autogeneratedoc />
        private PureObjectGraph<IDevice> _deviceGraph;
        /// <summary>
        /// The network gateway
        /// </summary>
        /// <autogeneratedoc />
        private INetworkGateway _networkGateway;
        /// <summary>
        /// The local network device
        /// </summary>
        /// <autogeneratedoc />
        private ILocalNetworkDevice _localNetworkDevice;
        /// <summary>
        /// The device graph lock
        /// </summary>
        /// <autogeneratedoc />
        private readonly object _deviceGraphLock = new object();

        #endregion

        #region public Fields

        /// <summary>
        /// Gets or sets the network gateway.
        /// </summary>
        /// <value>The network gateway.</value>
        /// <autogeneratedoc />
        public INetworkGateway NetworkGateway
        {
            get => _networkGateway;
            set
            {
                if (value != _networkGateway)
                {
                    lock (_deviceGraph)
                    {
                        _networkGateway = value;
                        _deviceGraph = new PureObjectGraph<IDevice>();
                        _deviceGraph.AddVertex(_networkGateway);
                    }
                }
            }
        }

        /// <summary>
        /// Gets or sets the local network device.
        /// </summary>
        /// <value>The local network device.</value>
        /// <autogeneratedoc />
        public ILocalNetworkDevice LocalNetworkDevice
        {
            get => _localNetworkDevice;
            set
            {
                if (value != _localNetworkDevice)
                {
                    lock (_deviceGraph)
                    {
                        // Remove old local network device
                        if (_localNetworkDevice != null)
                        {
                            // Remove vertex and all edges
                            _deviceGraph.RemoveVertex(_localNetworkDevice.ObjectId);
                        }

                        _localNetworkDevice = value;
                        _deviceGraph.AddEdge(_localNetworkDevice.ObjectId, NetworkGateway.ObjectId);
                    }
                }
            }
        }

        #endregion
    }
}