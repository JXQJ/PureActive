// ***********************************************************************
// Assembly         : PureActive.Network.Services.ArpService.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ArpServiceIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Abstractions.System;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Hosting.Abstractions.System;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.CommonServices;
using PureActive.Hosting.UnitTests.Test;
using PureActive.Network.Abstractions.ArpService;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.ArpService.IntegrationTests
{
    /// <summary>
    /// Class ArpServiceIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class ArpServiceIntegrationTests : TestBaseLoggable<ArpServiceIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArpServiceIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ArpServiceIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _commonServices = CommonServices.CreateInstance(TestLoggerFactory, "ArpServiceIntegrationTests");
 
            IPingService pingService = new PingService.PingService(_commonServices);
            _arpService = new ArpService(_commonServices, pingService);

            _defaultGatewayIPAddressSubnet = _commonServices.NetworkingSystem.GetDefaultGatewayAddressSubnet();
        }

        /// <summary>
        /// The arp service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IArpService _arpService;

        /// <summary>
        /// CommonServices interface
        /// </summary>
        /// <autogeneratedoc />
        private readonly ICommonServices _commonServices;

        private readonly IPAddressSubnet _defaultGatewayIPAddressSubnet;

        /// <summary>
        /// Defines the test method ArpService_BogusPhysicalAddress.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_BogusPhysicalAddress()
        {
             var cancellationTokenSource = new CancellationTokenSource();

            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Running, _arpService.ServiceHostStatus);

            var ipAddress = IPAddress.Parse("203.0.113.1");

            var physicalAddress = _arpService.GetPhysicalAddress(ipAddress);

            Assert.Equal(PhysicalAddress.None, physicalAddress);

            await _arpService.StopAsync(cancellationTokenSource.Token);
        }

        /// <summary>
        /// Defines the test method ArpService_GatewayPhysicalAddress.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_GatewayPhysicalAddress()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Running, _arpService.ServiceHostStatus);


            var physicalAddress = _arpService.GetPhysicalAddress(_defaultGatewayIPAddressSubnet.IPAddress);
            physicalAddress.Should().NotBeNull();

            await _arpService.StopAsync(cancellationTokenSource.Token);
        }


        [Fact]
        public void ArpService_GetPhysicalAddress_InternetIPAddress()
        {
            var physicalAddress = _arpService.GetPhysicalAddress(IPAddressExtensions.GooglePublicDnsServerAddress);
            physicalAddress.Should().NotBeNull().And.Subject.Should().Be(PhysicalAddress.None);
        }


        /// <summary>
        /// arp service start stop as an asynchronous operation.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_StartStop()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Running, _arpService.ServiceHostStatus);
            await _arpService.StopAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
        }

        /// <summary>
        /// arp service start stop as an asynchronous operation.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_StartStopAsync()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);

            var startTask = _arpService.StartAsync(cancellationTokenSource.Token);
            startTask.Should().NotBeNull();

            Assert.Equal(ServiceHostStatus.Running, _arpService.ServiceHostStatus);
            await _arpService.StopAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
        }

        /// <summary>
        /// Defines the test method ArpService to check cancelling request
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_CancelRequest()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Running, _arpService.ServiceHostStatus);

            var cts = new CancellationTokenSource();

            cts.CancelAfter(10);
            _arpService.ClearArpCache();
            var arpItem = await _arpService.GetArpItemAsync(_defaultGatewayIPAddressSubnet.IPAddress, cts.Token);
            arpItem.Should().BeNull();


            await _arpService.StopAsync(cancellationTokenSource.Token);
        }

        private readonly MethodInfo _methodInfoProcessArpOutput =
            typeof(ArpService).GetMethod("RunArpSync", BindingFlags.NonPublic | BindingFlags.Instance);

        private ProcessResult InvokeRunArp(TimeSpan timeout, CancellationToken cancellationToken)
        {
            object[] parameters = {timeout, cancellationToken};

            var processResult = (ProcessResult) _methodInfoProcessArpOutput.Invoke(_arpService, parameters);

            return processResult;
        }

        [Fact]
        public void ArpService_RunArpSync()
        {
            var processResult = InvokeRunArp(_arpService.Timeout, CancellationToken.None);
            processResult.Should().NotBeNull();
            processResult.Completed.Should().BeTrue();
            processResult.Output.Should().NotBeNullOrWhiteSpace();
        }

        [Fact]
        public void ArpService_RunArpSync_Cancel()
        {
            var cts = new CancellationTokenSource();

            cts.CancelAfter(10);
            var processResult = InvokeRunArp(_arpService.Timeout, cts.Token);
            processResult.Should().NotBeNull();
            processResult.Completed.Should().BeFalse();
            processResult.Output.Should().BeEmpty();
        }



        [Fact]
        public void ArpService_RunArpSync_MockEmptyResult()
        {
            var commonServicesMock =
                new CommonServicesMock(_commonServices, CommonServicesMock.CommonServicesToMock.ProcessRunner);

            var arpCommandPath = _commonServices.FileSystem.ArpCommandPath();
            var args = new[] {"-a"};


            commonServicesMock.CommonServicesTest.Setup(ost =>
                    ost.ProcessRunner.RunProcessAsync(arpCommandPath, args, _arpService.Timeout))
                .Returns(Task.FromResult(new ProcessResult(false, string.Empty)));

            var arpServicesMock =
                new ArpService(commonServicesMock.CommonServicesTest.Object,
                    new PingService.PingService(_commonServices));

            var physicalAddress =
                arpServicesMock.GetPhysicalAddress(_defaultGatewayIPAddressSubnet.IPAddress);
            physicalAddress.Should().NotBeNull();
            physicalAddress.Should().Be(PhysicalAddress.None);
        }

        [Fact]
        public void ArpService_GetIPAddress_None()
        {
            var ipAddress = _arpService.GetIPAddress(PhysicalAddress.None);
            ipAddress.Should().NotBeNull().And.Subject.Should().Be(IPAddress.None);
        }

        [Fact]
        public void ArpService_GetIPAddress_Null()
        {
            Func<IPAddress> fx = () => _arpService.GetIPAddress(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("physicalAddress");
        }


        [Fact]
        public void ArpService_GetIPAddress_DefaultGateway()
        {
            var physicalAddress = _arpService.GetPhysicalAddress(_defaultGatewayIPAddressSubnet.IPAddress);
            physicalAddress.Should().NotBeNull().And.Subject.Should().NotBe(PhysicalAddress.None);

            var ipAddress = _arpService.GetIPAddress(physicalAddress);
            ipAddress.Should().NotBeNull().And.Subject.Should().Be(_defaultGatewayIPAddressSubnet.IPAddress);
        }

        [Fact]
        public void ArpService_GetIPAddress_DefaultGateway_Refresh()
        {
            var physicalAddress = _arpService.GetPhysicalAddress(_defaultGatewayIPAddressSubnet.IPAddress);
            physicalAddress.Should().NotBeNull().And.Subject.Should().NotBe(PhysicalAddress.None);

            _arpService.ClearArpCache();
            var ipAddress = _arpService.GetIPAddress(physicalAddress, true);
            ipAddress.Should().NotBeNull().And.Subject.Should().Be(_defaultGatewayIPAddressSubnet.IPAddress);
        }

        [Fact]
        public void ArpService_GetIPAddress_InvalidPhysicalAddress()
        {
            var physicalAddressBogus = PhysicalAddress.Parse("00-16-41-34-2C-A6");

            var ipAddress = _arpService.GetIPAddress(physicalAddressBogus);
            ipAddress.Should().NotBeNull().And.Subject.Should().Be(IPAddress.None);
        }

        [Fact]
        public void ArpService_GetIPAddress_InvalidPhysicalAddress_Refresh()
        {
            var physicalAddressBogus = PhysicalAddress.Parse("00-16-41-34-2C-A6");

            var ipAddress = _arpService.GetIPAddress(physicalAddressBogus, true);
            ipAddress.Should().NotBeNull().And.Subject.Should().Be(IPAddress.None);
        }
        
        [Fact]
        public async Task ArpService_RefreshArpCacheAsync()
        {
            await _arpService.RefreshArpCacheAsync(true);
            _arpService.Count.Should().BeGreaterThan(0);
        }

        [Fact]
        public async Task ArpService_RefreshArpCacheAsync_Cancel()
        {
            var cts = new CancellationTokenSource();
            cts.CancelAfter(100);

            await _arpService.RefreshArpCacheAsync(cts.Token, false);
            _arpService.Count.Should().Be(0);
        }

        [Fact]
        public async Task ArpService_RefreshArpCacheAsync_Clear()
        {
            await _arpService.RefreshArpCacheAsync(CancellationToken.None, true);
            _arpService.Count.Should().BeGreaterThan(0);
        }

        [Fact]
        public async Task ArpService_GetArpItemAsync()
        {
            await _arpService.GetArpItemAsync(_defaultGatewayIPAddressSubnet.IPAddress);
        }
    }
}