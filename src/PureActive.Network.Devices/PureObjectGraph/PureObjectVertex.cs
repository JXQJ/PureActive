// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PureObjectVertex.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using PureActive.Network.Abstractions.PureObject;

namespace PureActive.Network.Devices.PureObjectGraph
{
    /// <summary>
    /// Class PureObjectVertex.
    /// Implements the <see cref="System.IComparable{PureObjectVertex}" />
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <seealso cref="System.IComparable{PureObjectVertex}" />
    /// <autogeneratedoc />
    public class PureObjectVertex<T> : IComparable<PureObjectVertex<T>>
        where T : class, IPureObject, IComparable<IPureObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureObjectVertex{T}"/> class.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <autogeneratedoc />
        public PureObjectVertex(T value)
        {
            Value = value;
        }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>The value.</value>
        /// <autogeneratedoc />
        public T Value { get; set; }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>The identifier.</value>
        /// <autogeneratedoc />
        public Guid Id => Value.ObjectId;

        /// <summary>
        /// Gets or sets the weight.
        /// </summary>
        /// <value>The weight.</value>
        /// <autogeneratedoc />
        public double Weight { get; set; }

        #region Overrides

        /// <summary>
        /// Determines whether the specified <see cref="object" /> is equal to this instance.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public override bool Equals(object obj)
        {
            if (!(obj is PureObjectVertex<T>))
                return false;

            return Id == ((PureObjectVertex<T>) obj).Id;
        }

        /// <summary>
        /// Returns a <see cref="string" /> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        public override string ToString() => Value.ToString();

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        /// <autogeneratedoc />
        public override int GetHashCode() => Id.GetHashCode();

        #endregion

        #region Implements

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(IPureObject other)
        {
            return Value.CompareTo(other);
        }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(T other)
        {
            return Value.CompareTo(other);
        }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(PureObjectVertex<T> other)
        {
            return Value.CompareTo(other.Value);
        }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        int IComparable<PureObjectVertex<T>>.CompareTo(PureObjectVertex<T> other)
        {
            return Value.CompareTo(other.Value);
        }

        #endregion
    }
}