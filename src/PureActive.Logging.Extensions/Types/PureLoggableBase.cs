// ***********************************************************************
// Assembly         : PureActive.Logging.Extensions
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PureLoggableBase.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions.Internal;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;

namespace PureActive.Logging.Extensions.Types
{
    /// <summary>
    /// Class PureLoggableBase.
    /// Implements the <see cref="IPureLoggable" />
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <seealso cref="IPureLoggable" />
    /// <autogeneratedoc />
    public abstract class PureLoggableBase<T> : IPureLoggable
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureLoggableBase{T}"/> class.
        /// </summary>
        /// <param name="loggerFactory">The logger factory.</param>
        /// <param name="logger">The logger.</param>
        /// <exception cref="ArgumentNullException">loggerFactory</exception>
        /// <autogeneratedoc />
        public PureLoggableBase(IPureLoggerFactory loggerFactory, IPureLogger logger = null)
        {
            LoggerFactory = loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory));
            Logger = logger ?? loggerFactory.CreatePureLogger<T>();
        }

        /// <summary>
        /// Gets the logger factory.
        /// </summary>
        /// <value>The logger factory.</value>
        /// <autogeneratedoc />
        public IPureLoggerFactory LoggerFactory { get; }
        /// <summary>
        /// Gets the logger settings.
        /// </summary>
        /// <value>The logger settings.</value>
        /// <autogeneratedoc />
        public IPureLoggerSettings LoggerSettings => LoggerFactory.PureLoggerSettings;
        /// <summary>
        /// Gets the logger.
        /// </summary>
        /// <value>The logger.</value>
        /// <autogeneratedoc />
        public IPureLogger Logger { get; protected set; }

        /// <summary>
        /// Converts derived class into string object.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        public virtual string ToString(LogLevel logLevel)
        {
            return ToString(logLevel, LoggableFormat.ToString);
        }

        /// <summary>
        /// Returns a <see cref="string" /> that represents this instance.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        public virtual string ToString(LogLevel logLevel, LoggableFormat loggableFormat)
        {
            var sb = new StringBuilder();

            return FormatLogString(sb, logLevel, loggableFormat).ToString();
        }

        /// <summary>
        /// Formats the log string.
        /// </summary>
        /// <param name="sb">The sb.</param>
        /// <param name="logLevel">The log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>StringBuilder.</returns>
        /// <autogeneratedoc />
        public virtual StringBuilder FormatLogString(StringBuilder sb, LogLevel logLevel, LoggableFormat loggableFormat)
        {
            PureLogPropertyLevel.FormatPropertyList(sb, loggableFormat,
                GetLogPropertyListLevel(logLevel, loggableFormat), logLevel);

            return sb;
        }


        /// <summary>
        /// Gets the log property list level.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>IEnumerable&lt;IPureLogPropertyLevel&gt;.</returns>
        /// <autogeneratedoc />
        public virtual IEnumerable<IPureLogPropertyLevel> GetLogPropertyListLevel(LogLevel logLevel,
            LoggableFormat loggableFormat)
        {
            var logProperties = new List<IPureLogPropertyLevel>
            {
                new PureLogPropertyLevel("ObjectType", TypeNameHelper.GetTypeDisplayName(GetType()),
                    LogLevel.Information)
            };

            return logProperties.Where(p => p.MinimumLogLevel.CompareTo(logLevel) >= 0);
        }

        /// <summary>
        /// Converts derived class into string object.
        /// </summary>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        public override string ToString()
        {
            return ToString(LogLevel.Debug);
        }
    }
}