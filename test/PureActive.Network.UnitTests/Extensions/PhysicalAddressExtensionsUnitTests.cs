// ***********************************************************************
// Assembly         : PureActive.Network.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PhysicalAddressExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net.NetworkInformation;
using FluentAssertions;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.UnitTests.Extensions
{
    /// <summary>
    /// Class PhysicalAddressExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PhysicalAddressExtensionsUnitTests : TestBaseLoggable<PhysicalAddressExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhysicalAddressExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PhysicalAddressExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// The physical address zeros
        /// </summary>
        /// <autogeneratedoc />
        private const string PhysicalAddressZeros = "00-00-00-00-00-00";

        private const string PhysicalAddressTestDash = "00-1A-8C-46-27-D0";
        private const string PhysicalAddressTestColon = "00:1A:8C:46:27:D0";

        private static readonly byte[] PhysicalAddressTestBytes = new byte[]{0x00, 0x1A, 0x8C, 0x46, 0x27, 0xD0};

    /// <summary>
    /// Defines the test method PhysicalAddressExtension_NormalizedParse.
    /// </summary>
    /// <param name="physicalAddressString">The physical address string.</param>
    /// <param name="physicalAddressStringExpectedValue">The physical address string expected value.</param>
    /// <autogeneratedoc />
    [Theory]
        [InlineData(PhysicalAddressTestColon, PhysicalAddressTestDash)]
        [InlineData("0-0-0-0-0-0", PhysicalAddressZeros)]
        [InlineData("1:1A:8C:46:27:D0", "01-1A-8C-46-27-D0")]
        [InlineData("011A8C4627D0", "01-1A-8C-46-27-D0")]
        [InlineData("", null)]
        [InlineData(null, null)]
        [InlineData("3:4:5", "03-04-05")]
        [InlineData("3:4", "03-04")]
        public void PhysicalAddressExtension_NormalizedParse(string physicalAddressString, string physicalAddressStringExpectedValue)
        {
            var physicalAddressExpectedValue = string.IsNullOrEmpty(physicalAddressStringExpectedValue)
                ? PhysicalAddress.None
                : PhysicalAddress.Parse(physicalAddressStringExpectedValue);

            PhysicalAddressExtensions.NormalizedParse(physicalAddressString).Should().Be(physicalAddressExpectedValue);
        }

        /// <summary>
        /// Defines the test method PhysicalAddressExtension_ToColonString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddressExtension_ToColonString()
        {
            PhysicalAddress.Parse(PhysicalAddressTestDash).ToColonString().Should().Be(PhysicalAddressTestColon);
        }

        /// <summary>
        /// Defines the test method PhysicalAddressExtension_ToDashString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddressExtension_ToDashString()
        {
            PhysicalAddress.Parse(PhysicalAddressTestDash).ToDashString().Should().Be(PhysicalAddressTestDash);
        }

        /// <summary>
        /// Defines the test method PhysicalAddressExtension ToArray
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddressExtension_ToArray()
        {
            var bytes = PhysicalAddress.Parse(PhysicalAddressTestDash).ToArray();
            bytes.Should().NotBeNull().And.Subject.Should().BeEquivalentTo(PhysicalAddressTestBytes);
        }


        /// <summary>
        /// Defines the test method PhysicalAddressExtension ToDelimString with Empty PhysicalAddress
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddressExtension_ToDelimString_Empty()
        {
            var physicalAddressEmpty = new PhysicalAddress(new byte[0]);
            physicalAddressEmpty.Should().NotBeNull().And.Subject.ToString().Should().BeEmpty();
            physicalAddressEmpty.ToColonString().Should().BeEmpty();
        }
    }
}