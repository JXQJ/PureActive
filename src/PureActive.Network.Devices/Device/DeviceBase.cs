// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="DeviceBase.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Extensions.Logging;
using PureActive.Hosting.Abstractions.System;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Logging.Extensions.Types;
using PureActive.Network.Abstractions.Device;
using PureActive.Network.Abstractions.PureObject;
using PureActive.Network.Abstractions.Types;
using PureActive.Network.Devices.PureObject;

namespace PureActive.Network.Devices.Device
{
    /// <summary>
    /// Class DeviceBase.
    /// Implements the <see cref="PureObjectBase" />
    /// Implements the <see cref="IDevice" />
    /// </summary>
    /// <seealso cref="PureObjectBase" />
    /// <seealso cref="IDevice" />
    /// <autogeneratedoc />
    public abstract class DeviceBase : PureObjectBase, IDevice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceBase"/> class.
        /// </summary>
        /// <param name="commonServices">The common services.</param>
        /// <param name="deviceType">Type of the device.</param>
        /// <param name="logger">The logger.</param>
        /// <autogeneratedoc />
        protected DeviceBase(ICommonServices commonServices, DeviceType deviceType = DeviceType.UnknownDevice,
            IPureLogger logger = null) :
            base(commonServices?.LoggerFactory, logger)
        {
            DeviceType = deviceType;
            CommonServices = commonServices;
        }

        /// <summary>
        /// Gets the common services.
        /// </summary>
        /// <value>The common services.</value>
        /// <autogeneratedoc />
        public ICommonServices CommonServices { get; }
        /// <summary>
        /// Gets or sets the type of the device.
        /// </summary>
        /// <value>The type of the device.</value>
        /// <autogeneratedoc />
        public DeviceType DeviceType { get; set; }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <exception cref="ArgumentException">Object must be of type DeviceBase.</exception>
        /// <autogeneratedoc />
        public override int CompareTo(IPureObject other)
        {
            if (!(other is DeviceBase))
                throw new ArgumentException("Object must be of type DeviceBase.");

            return CompareTo((DeviceBase) other);
        }

        /// <summary>
        /// Gets the log property list level.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>IEnumerable&lt;IPureLogPropertyLevel&gt;.</returns>
        /// <autogeneratedoc />
        public override IEnumerable<IPureLogPropertyLevel> GetLogPropertyListLevel(LogLevel logLevel,
            LoggableFormat loggableFormat)
        {
            var logPropertyLevels = loggableFormat.IsWithParents()
                ? base.GetLogPropertyListLevel(logLevel, loggableFormat)?.ToList()
                : new List<IPureLogPropertyLevel>();

            if (logLevel <= LogLevel.Information)
            {
                logPropertyLevels?.Add(new PureLogPropertyLevel(nameof(DeviceType), DeviceType, LogLevel.Information));
            }

            return logPropertyLevels;
        }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(DeviceBase other)
        {
            if (other == null) return 1;

            if (ObjectId.Equals(other.ObjectId))
                return 0;

            return DeviceType.CompareTo(other.DeviceType);
        }
    }
}