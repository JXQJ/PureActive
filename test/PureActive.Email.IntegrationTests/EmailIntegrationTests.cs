// ***********************************************************************
// Assembly         : PureActive.Email.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="EmailIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Mail;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.Extensions.Configuration;
using PureActive.Email.Office365.Interfaces;
using PureActive.Email.Office365.Providers;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Email.IntegrationTests
{
    /// <summary>
    /// Class EmailIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{EmailIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{EmailIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class EmailIntegrationTests : TestBaseLoggable<EmailIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public EmailIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method sending email with a bad password.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public void EmailIntegration_SendEmail_BadPassword()
        {
            var office365EmailProvider = new Office365EmailProvider("stevebu@pureactive.net", "Steve Bush", "stevebu@pureactive.net", "*");

            Func<Task> fx = async () => await office365EmailProvider.SendEmailAsync("stevebu@pureactive.net", "Testing Email", "<HTML><BODY>Testing</BODY></HTML>");

            fx.Should().Throw<SmtpException>();
        }

        /// <summary>
        /// Defines the test method sending email with a bad password.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public void EmailIntegration_SendMessageAsync_BadPassword()
        {

            var office365EmailProvider = Office365EmailProvider.CreateOffice365MailProvider("stevebu@pureactive.net", "Steve Bush", "stevebu@pureactive.net", "*");

            Func<Task> fx = async () => await office365EmailProvider.SendMessageAsync("stevebu@pureactive.net",
                "Steve Bush", "Testing Email", "<HTML><BODY>Testing</BODY></HTML>", true);

            fx.Should().Throw<SmtpException>();
        }

        /// <summary>
        /// Defines the test method sending email using configuration with a bad password.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public void EmailIntegration_CreateOffice365MailProvider_Config()
        {
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddEnvironmentVariables()
                .AddInMemoryCollection(
                    new Dictionary<string, string>
                    {
                        ["Email:EmailAddress"] = "stevebu@pureactive.net",
                        ["Email:EmailDisplayName"] = "Steve Bush",
                        ["Email:Providers:Office365:UserName"] = "stevebu@pureactive.net",
                        ["Email:Providers:Office365:Password"] = "*",
                    }
                )
                .Build();

            var office365EmailProvider = Office365EmailProvider.CreateOffice365MailProvider(configuration);
            office365EmailProvider.Should().NotBeNull();

            Func<Task> fx = async () => await office365EmailProvider.SendMessageAsync("stevebu@pureactive.net",
                "Steve Bush", "Testing Email", "<HTML><BODY>Testing</BODY></HTML>", true);

            fx.Should().Throw<SmtpException>();
        }


        /// <summary>
        /// Defines the test method sending email with a null configuration.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public void EmailIntegration_CreateOffice365MailProvider_Config_Null()
        {
            Func<IEmailProvider> fx = () => Office365EmailProvider.CreateOffice365MailProvider(null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("configuration");

        }
    }
}