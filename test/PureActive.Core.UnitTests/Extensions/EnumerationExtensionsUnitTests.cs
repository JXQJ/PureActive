// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="EnumerationExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections.Generic;
using FluentAssertions;
using PureActive.Core.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Extensions
{
    /// <summary>
    /// Class EnumerationExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{EnumerationExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{EnumerationExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class EnumerationExtensionsUnitTests : TestBaseLoggable<EnumerationExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumerationExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public EnumerationExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Class TestObject.
        /// </summary>
        /// <autogeneratedoc />
        private class TestObject
        {
        }

        /// <summary>
        /// Defines the test method EnumerationExtensions_Empty.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void EnumerationExtensions_Empty()
        {
            var maxLength = new List<string>().MaxStringLength();

            maxLength.Should().Be(0);
        }

        /// <summary>
        /// Defines the test method EnumerationExtensions_IntList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void EnumerationExtensions_IntList()
        {
            var intList = new List<int>
            {
                12345,
                123456,
                123,
                15
            };

            var maxLength = intList.MaxStringLength();

            maxLength.Should().Be("123456".Length);
        }

        /// <summary>
        /// Defines the test method EnumerationExtensions_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void EnumerationExtensions_Null()
        {
            var maxLength = ((List<string>) null).MaxStringLength();

            maxLength.Should().Be(0);
        }

        /// <summary>
        /// Defines the test method EnumerationExtensions_StringList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void EnumerationExtensions_StringList()
        {
            var stringList = new List<string>
            {
                "12345",
                "123456",
                "123",
                "15"
            };

            var maxLength = stringList.MaxStringLength();

            maxLength.Should().Be("123456".Length);
        }

        /// <summary>
        /// Defines the test method EnumerationExtensions_TestObject.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void EnumerationExtensions_TestObject()
        {
            var testObjectList = new List<TestObject>
            {
                new TestObject()
            };

            var maxLength = testObjectList.MaxStringLength();

            maxLength.Should().Be(typeof(TestObject).ToString().Length);
        }
    }
}