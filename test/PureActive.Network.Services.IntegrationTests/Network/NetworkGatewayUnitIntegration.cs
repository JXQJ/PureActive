// ***********************************************************************
// Assembly         : PureActive.Network.Services.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkGatewayUnitIntegration.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.Networking;
using PureActive.Logging.Extensions.Extensions;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Devices.Network;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.IntegrationTests.Network
{
    /// <summary>
    /// Class NetworkGatewayIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkGatewayIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkGatewayIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class NetworkGatewayIntegrationTests : TestBaseLoggable<NetworkGatewayIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkGatewayIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public NetworkGatewayIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _commonNetworkServices =
                CommonNetworkServices.CreateInstance(TestLoggerFactory, "NetworkGatewayIntegrationTests");
            var networkingService = new NetworkingService(TestLoggerFactory.CreatePureLogger<NetworkingService>());
            _gatewayIPAddressSubnet = networkingService.GetDefaultGatewayAddressSubnet();
            
        }

        /// <summary>
        /// The common network services
        /// </summary>
        /// <autogeneratedoc />
        private readonly ICommonNetworkServices _commonNetworkServices;
        /// <summary>
        /// The gateway ip address subnet
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPAddressSubnet _gatewayIPAddressSubnet;

        /// <summary>
        /// Defines the test method NetworkGateway_Logging.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void NetworkGateway_Logging()
        {
            var networkGateway = new NetworkGateway(_commonNetworkServices, _gatewayIPAddressSubnet);

            var logLevel = LogLevel.Debug;

            using (networkGateway.PushLogProperties(logLevel))
            {
                Logger?.LogDebug("TestDeviceLogging {LogLevel}", logLevel);
            }
        }

        /// <summary>
        /// Defines the test method NetworkGateway_Logging_WithParents.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void NetworkGateway_Logging_WithParents()
        {
            var networkGateway = new NetworkGateway(_commonNetworkServices, _gatewayIPAddressSubnet);
            var logLevel = LogLevel.Debug;

            using (networkGateway.PushLogPropertiesParents(logLevel))
            {
                Logger?.LogDebug("TestDeviceLoggingWithParents {LogLevel}", logLevel);
            }
        }

        /// <summary>
        /// Defines the test method NetworkGateway_SwitchGateway.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void NetworkGateway_SwitchGateway()
        {
            var networkGateway = new NetworkGateway(_commonNetworkServices, _gatewayIPAddressSubnet);
            var physicalAddress = networkGateway.PhysicalAddress;
            physicalAddress.Should().NotBeNull();

            networkGateway.IPAddressSubnet =
                new IPAddressSubnet(IPAddress.Parse("10.1.10.33"), IPAddressExtensions.SubnetClassC);

            var newPhysicalAddress = networkGateway.PhysicalAddress;
            networkGateway.PhysicalAddress.Should().Be(newPhysicalAddress);
        }

        /// <summary>
        /// Defines the test method NetworkGateway_ToString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void NetworkGateway_ToString()
        {
            var networkGateway = new NetworkGateway(_commonNetworkServices, _gatewayIPAddressSubnet);
            TestOutputHelper.WriteLine(networkGateway.ToString());
        }
    }
}