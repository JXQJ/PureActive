// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog.UnitTests
// Author           : SteveBu
// Created          : 11-25-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-25-2018
// ***********************************************************************
// <copyright file="SerilogLogLevelUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using FluentAssertions;
using Microsoft.Extensions.Logging;
using PureActive.Logger.Provider.Serilog.Interfaces;
using PureActive.Logger.Provider.Serilog.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Events;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Logger.Provider.Serilog.UnitTests.Types
{
    /// <summary>
    /// Class SerilogLogLevelUnitTests.
    /// Implements the <see cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{SerilogLogLevelUnitTests}" />
    /// </summary>
    /// <seealso cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{SerilogLogLevelUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class SerilogLogLevelUnitTests : TestBaseLoggable<SerilogLogLevelUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogLevelUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public SerilogLogLevelUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _pureSeriLogger = new PureSeriLogger(Logger);
        }

        /// <summary>
        /// The pure seri logger
        /// </summary>
        /// <autogeneratedoc />
        private readonly PureSeriLogger _pureSeriLogger;

        /// <summary>
        /// Defines the test method for PureSeriLogger Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void SerilogLogLevel_PureSeriLogger_Constructor()
        {
            _pureSeriLogger.Should().NotBeNull();
            _pureSeriLogger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPureLogger>();
        }

        [Fact]
        public void SerilogLogLevel_Constructor_LogEventLevel()
        {
            var seriLogLevel = new  SerilogLogLevel(LogEventLevel.Debug);

            seriLogLevel.Should().NotBeNull();
            seriLogLevel.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ISerilogLogLevel>();
        }

        [Fact]
        public void SerilogLogLevel_Constructor_LogLevel()
        {
            var seriLogLevel = new SerilogLogLevel(LogLevel.Debug);

            seriLogLevel.Should().NotBeNull();
            seriLogLevel.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ISerilogLogLevel>();
        }


        [Fact]
        public void SerilogLogLevel_SetMinimum_LogEventLevel()
        {
            var seriLogLevel = new SerilogLogLevel(LogEventLevel.Debug);
            seriLogLevel.MinimumLogEventLevel.Should().Be(LogEventLevel.Debug);
            seriLogLevel.MinimumLogEventLevel = LogEventLevel.Error;
            seriLogLevel.MinimumLogEventLevel.Should().Be(LogEventLevel.Error);
            seriLogLevel.MinimumLogEventLevel = LogEventLevel.Debug;
        }

        [Fact]
        public void SerilogLogLevel_SetMinimum_LogLevel()
        {
            var seriLogLevel = new SerilogLogLevel(LogLevel.Debug);
            seriLogLevel.MinimumLogLevel.Should().Be(LogLevel.Debug);
            seriLogLevel.MinimumLogLevel = LogLevel.Error;
            seriLogLevel.MinimumLogLevel.Should().Be(LogLevel.Error);
            seriLogLevel.MinimumLogLevel = LogLevel.Debug;
        }

        [Fact]
        public void SerilogLogLevel_InitialLogLevel()
        {
            var seriLogLevel = new SerilogLogLevel(LogLevel.Debug);
            seriLogLevel.MinimumLogLevel.Should().Be(LogLevel.Debug);
            seriLogLevel.MinimumLogLevel = LogLevel.Error;
            seriLogLevel.MinimumLogLevel.Should().Be(LogLevel.Error);
            seriLogLevel.InitialLogLevel.Should().Be(LogLevel.Debug);
            seriLogLevel.InitialLogLevel = LogLevel.Error;
            seriLogLevel.InitialLogLevel.Should().Be(LogLevel.Error);

            seriLogLevel.InitialLogLevel = LogLevel.Debug;
            seriLogLevel.MinimumLogLevel = LogLevel.Debug;
        }
    }
}