// ***********************************************************************
// Assembly         : PureActive.Core
// Author           : SteveBu
// Created          : 11-01-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-02-2018
// ***********************************************************************
// <copyright file="FullNameParser.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Text.RegularExpressions;
using PureActive.Core.Extensions;

namespace PureActive.Core.Utilities
{
    /// <summary>
    /// Class FullNameParser.
    /// </summary>
    /// <autogeneratedoc />
    public class FullNameParser
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FullNameParser"/> class.
        /// </summary>
        /// <param name="fullName">The full name.</param>
        /// <autogeneratedoc />
        public FullNameParser(string fullName)
        {
            FullName = fullName;
            _ParseFullName(fullName);
        }

        /// <summary>
        /// Gets or sets the full name.
        /// </summary>
        /// <value>The full name.</value>
        /// <autogeneratedoc />
        public string FullName { get; set; }
        /// <summary>
        /// Gets or sets the first name.
        /// </summary>
        /// <value>The first name.</value>
        /// <autogeneratedoc />
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or sets the last name.
        /// </summary>
        /// <value>The last name.</value>
        /// <autogeneratedoc />
        public string LastName { get; set; }
        /// <summary>
        /// Gets or sets the name of the preferred.
        /// </summary>
        /// <value>The name of the preferred.</value>
        /// <autogeneratedoc />
        public string PreferredName { get; set; }

        /// <summary>
        /// Parses the name of the parens preferred.
        /// </summary>
        /// <param name="fullNamePreferred">The full name preferred.</param>
        /// <autogeneratedoc />
        private void _ParseParensPreferredName(string fullNamePreferred)
        {
            var mc = Regex.Match(fullNamePreferred, @"\A^(.*)[\s]?\((.*)\)[\s](.*)$\z").Groups;

            if (mc.Count == 4)
            {
                FirstName = mc[1].Value.Trim();
                PreferredName = mc[2].Value.Replace("\"", "").Trim();
                LastName = mc[3].Value.Trim();
            }
            else if (mc.Count == 3)
            {
                FirstName = mc[1].Value.Trim();
                LastName = mc[2].Value.Trim();
            }
            else if (mc.Count == 2)
            {
                FirstName = mc[1].Value.Trim();
            }
        }


        /// <summary>
        /// Parses the full name.
        /// </summary>
        /// <param name="fullName">The full name.</param>
        /// <autogeneratedoc />
        private void _ParseFullName(string fullName)
        {
            if (!string.IsNullOrEmpty(fullName))
            {
                if (fullName.IndexOf(',') != -1)
                {
                    // Last, First
                    var strings = fullName.SplitOnLastDelim(',');

                    if (strings != null && strings.Length == 2)
                    {
                        LastName = strings[0].Trim();
                        FirstName = strings[1].Trim();

                        FullName = $"{FirstName} {LastName}";

                        // Parse Preferred Name from Normalized FullName
                        if (fullName.IndexOf('(') != -1)
                            _ParseParensPreferredName(FullName);
                    }
                    else
                    {
                        FirstName = fullName;
                    }
                }
                // Preferred Name in ()
                else if (fullName.IndexOf('(') == -1)
                {
                    var strings = fullName.SplitOnLastDelim(' ');

                    if (strings != null && strings.Length == 2)
                    {
                        FirstName = strings[0];
                        LastName = strings[1];
                    }
                    else
                    {
                        FirstName = fullName;
                    }
                }
                else
                {
                    _ParseParensPreferredName(fullName);
                }
            }
        }
    }
}