// ***********************************************************************
// Assembly         : PureActive.Queue.Hangfire.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="QueueHangfireIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;
using Autofac;
using FluentAssertions;
using Hangfire;
using Hangfire.SQLite;
using Hangfire.Storage;
using PureActive.Core.Abstractions.Queue;
using PureActive.Core.Abstractions.System;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Queue.Hangfire.Queue;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Queue.Hangfire.IntegrationTests
{
    /// <summary>
    /// Class QueueHangfireIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{QueueHangfireIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{QueueHangfireIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class QueueHangfireIntegrationTests : TestBaseLoggable<QueueHangfireIntegrationTests>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueHangfireIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public QueueHangfireIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {

        }


        [ExcludeFromCodeCoverage]
        public class HangfireJob
        {
            public string TestValue { get; }

            public HangfireJob(string testValue)
            {
                TestValue = testValue;
            }
        }

        public interface IHangFireTestService
        {
            Task ExecuteHangfireTestJobAsync(HangfireJob hangfireJob);
        }

        [ExcludeFromCodeCoverage]
        public class HangFireTestService : IHangFireTestService
        {
            /// <inheritdoc />
            public Task ExecuteHangfireTestJobAsync(HangfireJob hangfireJob)
            {
                return Task.Run( () => Console.WriteLine($"Job TestValue: {hangfireJob.TestValue}")
                    );
            }
        }

        private static string GetConnectionString(IFileSystem fileSystem, ServiceHost serviceHost)
        {
            var databasePath = fileSystem.DataFolderPath() + serviceHost + ".db";

            return $"Data Source={databasePath};";
        }

        /// <summary>
        /// Defines the test method that runs a Background Hangfire server
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task QueueHangfire_BackgroundServer_Run()
        {
            var builder = new ContainerBuilder();

            builder.RegisterType<HangFireTestService>().As<IHangFireTestService>().InstancePerLifetimeScope();

            GlobalConfiguration.Configuration.UseAutofacActivator(builder.Build());
            
            var storage = new SQLiteStorage(GetConnectionString(FileSystem, ServiceHost.HangfireTest));
            GlobalConfiguration.Configuration.UseStorage(storage);


            using (var server = new BackgroundJobServer())
            {
                server.Should().NotBeNull();

                var monitoringApi = storage.GetMonitoringApi();
                monitoringApi.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IMonitoringApi>();

                const string testValue = "TestValue";

                var hangFireJob = new HangfireJob(testValue);

                var jobIdString = BackgroundJob.Enqueue<IHangFireTestService>(service =>
                    service.ExecuteHangfireTestJobAsync(hangFireJob));

                jobIdString.Should().NotBeNull();
                int.TryParse(jobIdString, out var jobId).Should().BeTrue();
                jobId.Should().BeGreaterThan(0);

                var jobStatus = await JobQueueClient.WaitForJobToComplete(monitoringApi, jobIdString, 30 * 1000, CancellationToken.None);
                jobStatus.State.Should().Be(JobState.Succeeded);
            }
        }
    }
}