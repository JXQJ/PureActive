// ***********************************************************************
// Assembly         : PureActive.Core
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="StringExtensions.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Linq;

namespace PureActive.Core.Extensions
{
    /// <summary>
    /// Extension methods for the string class.
    /// </summary>
    public static class StringExtensions
    {
        /// <summary>
        /// Changes the first character of a string to lower-case,
        /// if it is not already.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        public static string ToCamelCase(this string str) =>
            string.IsNullOrEmpty(str) ? str : str.Substring(0, 1).ToLower() + str.Substring(1);

        /// <summary>
        /// Changes the first character of a string to upper-case,
        /// if it is not already.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        public static string ToPascalCase(this string str) =>
            string.IsNullOrEmpty(str) ? str : str.Substring(0, 1).ToUpper() + str.Substring(1);

        /// <summary>
        /// Returns a version of the string with non-alpha-numeric
        /// characters stripped out.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        public static string ToAlphaNumeric(this string str) => string.IsNullOrEmpty(str)
            ? str
            : new string(str.Where(char.IsLetterOrDigit).ToArray());

        /// <summary>
        /// Removes the whitespace.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string RemoveWhitespace(this string str) => string.IsNullOrEmpty(str)
            ? str
            : new string(str.Where(c => !char.IsWhiteSpace(c)).ToArray());

        /// <summary>
        /// Returns a version of the string with non-numeric
        /// characters stripped out.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        public static string ToNumeric(this string str) =>
            string.IsNullOrEmpty(str) ? str : new string(str.Where(char.IsDigit).ToArray());


        /// <summary>
        /// Returns a string where every line in the string has all
        /// whitespace stripped from either end.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns>System.String.</returns>
        public static string TrimEveryLine(this string str)
        {
            var lines = str.Trim().Split
            (
                new[] {"\r\n", "\n"},
                StringSplitOptions.None
            );

            return string.Join
            (
                "\n",
                lines.Select(line => line.Trim())
            ).Trim();
        }

        /// <summary>
        /// Processes the splits.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <param name="indexDelim">The index delimiter.</param>
        /// <returns>System.String[].</returns>
        /// <autogeneratedoc />
        private static string[] ProcessSplits(string str, int indexDelim)
        {
            var strings = new string[2];

            if (string.IsNullOrEmpty(str))
                return strings;

            if (indexDelim != -1 && indexDelim <= str.Length - 1)
            {
                strings[0] = str.Substring(0, indexDelim).Trim();
                strings[1] = str.Substring(indexDelim + 1).Trim();
            }
            else
            {
                strings[0] = str.Trim();
                strings[1] = string.Empty;
            }

            return strings;
        }

        /// <summary>
        /// Splits the on first delimiter.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <param name="chDelim">The ch delimiter.</param>
        /// <returns>System.String[].</returns>
        /// <autogeneratedoc />
        public static string[] SplitOnFirstDelim(this string str, char chDelim)
        {
            return string.IsNullOrEmpty(str) ? new string[2] : ProcessSplits(str, str.IndexOf(chDelim));
        }

        /// <summary>
        /// Splits the on last delimiter.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <param name="chDelim">The ch delimiter.</param>
        /// <returns>System.String[].</returns>
        /// <autogeneratedoc />
        public static string[] SplitOnLastDelim(this string str, char chDelim)
        {
            return string.IsNullOrEmpty(str) ? new string[2] : ProcessSplits(str, str.LastIndexOf(chDelim));
        }

        /// <summary>
        /// Strings the after delimiter.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <param name="chDelim">The ch delimiter.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string StringAfterDelim(this string str, char chDelim)
        {
            var strings = SplitOnFirstDelim(str, chDelim);

            return strings.Length == 2 ? strings[1] : null;
        }

        /// <summary>
        /// Strings the before delimiter.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <param name="chDelim">The ch delimiter.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string StringBeforeDelim(this string str, char chDelim)
        {
            var strings = SplitOnFirstDelim(str, chDelim);

            return strings.Length == 2 ? strings[0] : null;
        }

        /// <summary>
        /// Parses the yes no.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public static bool? ParseYesNo(this string str)
        {
            if (!string.IsNullOrWhiteSpace(str) && str.Length > 0)
            {
                return char.ToUpper(str.Trim()[0]) == 'Y';
            }

            return null;
        }

        /// <summary>
        /// Parses the yes no strict.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public static bool? ParseYesNoStrict(this string str)
        {
            if (string.IsNullOrWhiteSpace(str) || str.Length <= 0) return null;

            var strNormalized = str.Trim().ToUpper();

            if (strNormalized.Equals("YES"))
                return true;

            if (strNormalized.Equals("NO"))
                return false;

            return null;
        }

        /// <summary>
        /// Parses the double or null.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.Nullable&lt;System.Double&gt;.</returns>
        /// <autogeneratedoc />
        public static double? ParseDoubleOrNull(this string input)
        {
            if (!string.IsNullOrEmpty(input) && double.TryParse(input, out var result))
                return result;

            return null;
        }

        /// <summary>
        /// Parses the long or null.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        /// <autogeneratedoc />
        public static long? ParseLongOrNull(this string input)
        {
            if (!string.IsNullOrEmpty(input) && long.TryParse(input, out var result))
                return result;

            return null;
        }

        /// <summary>
        /// Parses the int or null.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        /// <autogeneratedoc />
        public static int? ParseIntOrNull(this string input)
        {
            if (!string.IsNullOrEmpty(input) && int.TryParse(input, out var result))
                return result;

            return null;
        }

        /// <summary>
        /// Nulls if whitespace.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string NullIfWhitespace(this string input)
        {
            return string.IsNullOrEmpty(input = input?.Trim()) ? null : input;
        }

        /// <summary>
        /// Pads the with delimiter.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <param name="delim">The delimiter.</param>
        /// <param name="length">The length.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string PadWithDelim(this string input, string delim, int length)
        {
            return $"{input}{delim}".PadRight(length, ' ');
        }

        /// <summary>
        /// Converts to doublequoted.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string ToDoubleQuoted(this string input)
        {
            return $"\"{input}\"";
        }
    }
}