// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="FileExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using FluentAssertions;
using PureActive.Core.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Extensions
{
    /// <summary>
    /// Class FileExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{FileExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{FileExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class FileExtensionsUnitTests : TestBaseLoggable<FileExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public FileExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method FileExtensions_PrefixExt.
        /// </summary>
        /// <param name="prefix">The prefix.</param>
        /// <param name="ext">The ext.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("prefix", ".ext")]
        public void FileExtensions_PrefixExt(string prefix, string ext)
        {
            var randomFile = FileExtensions.GetRandomFileName(prefix, ext);

            TestOutputHelper.WriteLine(randomFile);
            randomFile.Should().EndWith(ext);
            randomFile.Should().StartWith(prefix);

            var randomFile2 = FileExtensions.GetRandomFileName(prefix, ext);
            randomFile2.Should().NotBe(randomFile);
            TestOutputHelper.WriteLine(randomFile2);
        }


        /// <summary>
        /// Defines the test method FileExtensions_NullExt.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void FileExtensions_NullExt()
        {
            string prefix = "prefix";

            var randomFile = FileExtensions.GetRandomFileName(prefix, null);
            TestOutputHelper.WriteLine(randomFile);

            randomFile.Should().StartWith(prefix);

            var randomFile2 = FileExtensions.GetRandomFileName(prefix, null);
            TestOutputHelper.WriteLine(randomFile2);

            randomFile2.Should().NotBe(randomFile);
        }


        /// <summary>
        /// Defines the test method FileExtensions_NullPrefix.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void FileExtensions_NullPrefix()
        {
            string ext = ".ext";

            var randomFile = FileExtensions.GetRandomFileName(null, ext);

            TestOutputHelper.WriteLine(randomFile);
            randomFile.Should().EndWith(ext);

            var randomFile2 = FileExtensions.GetRandomFileName(null, ext);
            TestOutputHelper.WriteLine(randomFile2);
            randomFile2.Should().NotBe(randomFile);
        }
    }
}