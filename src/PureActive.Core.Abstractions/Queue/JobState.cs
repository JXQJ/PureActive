// ***********************************************************************
// Assembly         : PureActive.Core.Abstractions
// Author           : SteveBu
// Created          : 11-03-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="JobState.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
namespace PureActive.Core.Abstractions.Queue
{
    /// <summary>
    /// The state of a job in the queue.
    /// </summary>
    public enum JobState
    {
        /// <summary>
        /// Job state unknown or initialized to default
        /// </summary>
        Unknown,
        
        /// <summary>
        /// Job not found
        /// </summary>
        NotFound,
        
        /// <summary>
        /// Defines the intermediate state of a background job when it is placed on a message queue to
        /// be processed by the Worker background process as soon as possible. 
        /// </summary>
        NotStarted,
        
        /// <summary>
        /// Defines the intermediate state of a background job when a Worker has started to process it. 
        /// </summary>
        InProgress,

        /// <summary>
        /// Defines the final state of a background job when a Worker performed an enqueued job
        /// without any exception thrown during the performance. 
        /// </summary>
        Succeeded,

        /// <summary>
        /// Defines the intermediate state of a background job when its processing was interrupted
        /// by an exception and it is a developer's responsibility to decide what to do with it next. 
        /// </summary>
        Failed,

        /// <summary>
        /// Defines the intermediate state of a background job when it is placed on a schedule to be
        /// moved to the EnqueuedState in the future by DelayedJobScheduler background process. 
        /// </summary>
        Scheduled,

        /// <summary>
        /// Defines the final state of a background job when nobody is interested whether it was performed or not. 
        /// </summary>
        Deleted,


        /// <summary>
        /// Defines the intermediate state of a background job when it is waiting for a parent background job
        /// to be finished before it is moved to the EnqueuedState by the ContinuationsSupportAttribute filter. 
        /// </summary>
        Awaiting
    }


    /// <summary>Class JobStateExtensions.</summary>
    /// <autogeneratedoc />
    public static class JobStateExtensions
    {
        /// <summary>Determines whether [is final state] [the specified job state].</summary>
        /// <param name="jobState">State of the job.</param>
        /// <returns>
        ///   <c>true</c> if [is final state] [the specified job state]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public static bool IsFinalState(this JobState jobState)
        {
            return jobState != JobState.NotStarted && jobState != JobState.InProgress  && jobState != JobState.Scheduled;
        }
    }
}