// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IDhcpMessage.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Net.NetworkInformation;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.DhcpService.Types;
using PureActive.Network.Abstractions.Types;

namespace PureActive.Network.Abstractions.DhcpService.Interfaces
{
    /// <summary>
    /// Interface IDhcpMessage
    /// Implements the <see cref="IPureLoggable" />
    /// </summary>
    /// <seealso cref="IPureLoggable" />
    /// <autogeneratedoc />
    public interface IDhcpMessage : IPureLoggable
    {
        /// <summary>
        /// The timestamp when cached.
        /// </summary>
        /// <value>The created timestamp.</value>
        DateTimeOffset CreatedTimestamp { get; set; }

        /// <summary>
        /// The operation code of whatever last altered the packet (op).
        /// </summary>
        /// <value>The operation.</value>
        OperationCode Operation { get; set; }

        /// <summary>
        /// The hardware address type (htype).
        /// </summary>
        /// <value>The hardware.</value>
        HardwareType Hardware { get; set; }

        /// <summary>
        /// The hardware address length (hlen).
        /// </summary>
        /// <value>The length of the hardware address.</value>
        byte HardwareAddressLength { get; set; }

        /// <summary>
        /// Optionally used by relay agents when booting via a relay agent (hops).
        /// </summary>
        /// <value>The hops.</value>
        byte Hops { get; set; }

        /// <summary>
        /// A random number chosen by the client, to associate messages and responses between a client and a server (xid).
        /// </summary>
        /// <value>The session identifier.</value>
        uint SessionId { get; set; }

        /// <summary>
        /// The seconds elapsed since client began address acquisition or renewal process (secs).
        /// </summary>
        /// <value>The seconds elapsed.</value>
        ushort SecondsElapsed { get; set; }

        /// <summary>
        /// The leftmost bit is defined as the BROADCAST (B) flag.   The remaining bits of the flags field are reserved for
        /// future use.
        /// </summary>
        /// <value>The flags.</value>
        byte[] Flags { get; set; }

        /// <summary>
        /// Is Broadcast(true) / Unicast(false) flag
        /// </summary>
        /// <value><c>true</c> if this instance is broadcast; otherwise, <c>false</c>.</value>
        bool IsBroadcast { get; set; }

        /// <summary>
        /// The client IP address (ciaddr).
        /// </summary>
        /// <value>The client address.</value>
        InternetAddress ClientAddress { get; set; }

        /// <summary>
        /// The assigned client IP address (yiaddr).
        /// </summary>
        /// <value>The assigned address.</value>
        InternetAddress AssignedAddress { get; set; }

        /// <summary>
        /// The server IP address (siaddr).
        /// </summary>
        /// <value>The next server address.</value>
        InternetAddress NextServerAddress { get; set; }

        /// <summary>
        /// The gateway IP address (giaddr);
        /// </summary>
        /// <value>The relay agent address.</value>
        InternetAddress RelayAgentAddress { get; set; }

        /// <summary>
        /// The client hardware address (chaddr).
        /// </summary>
        /// <value>The client hardware address.</value>
        PhysicalAddress ClientHardwareAddress { get; set; }

        /// <summary>
        /// The DNS hostname part that corresponds with the given IP address (sname).
        /// </summary>
        /// <value>The name of the server.</value>
        byte[] ServerName { get; set; }

        /// <summary>
        /// The boot file name the clients may use (file).
        /// </summary>
        /// <value>The name of the boot file.</value>
        byte[] BootFileName { get; set; }

        /// <summary>
        /// The option ordering parameter list.
        /// </summary>
        /// <value>The option ordering.</value>
        byte[] OptionOrdering { get; set; }

        /// <summary>
        /// Get option data.
        /// </summary>
        /// <param name="option">The option.</param>
        /// <returns>System.Byte[].</returns>
        byte[] GetOptionData(DhcpOption option);

        /// <summary>
        /// Remove all options.
        /// </summary>
        void ClearOptions();

        /// <summary>
        /// Add or define a new custom option type.
        /// </summary>
        /// <param name="option">The option.</param>
        /// <param name="data">The data.</param>
        void AddOption(DhcpOption option, params byte[] data);

        /// <summary>
        /// Parameters the option exists.
        /// </summary>
        /// <param name="paramOption">The parameter option.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        bool ParamOptionExists(DhcpOption paramOption);

        /// <summary>
        /// Remove a custom option type.
        /// </summary>
        /// <param name="option">The option.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        bool RemoveOption(DhcpOption option);

        /// <summary>
        /// Converts dhcp message into a byte array.
        /// </summary>
        /// <returns>System.Byte[].</returns>
        byte[] ToArray();
    }
}