// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog
// Author           : SteveBu
// Created          : 10-23-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PureSeriLogFactory.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using Microsoft.Extensions.Logging;
using PureActive.Logger.Provider.Serilog.Interfaces;
using PureActive.Logging.Abstractions.Interfaces;

namespace PureActive.Logger.Provider.Serilog.Types
{
    /// <summary>
    /// Class PureSeriLoggerFactory.
    /// Implements the <see cref="PureActive.Logging.Abstractions.Interfaces.IPureLoggerFactory" />
    /// </summary>
    /// <seealso cref="PureActive.Logging.Abstractions.Interfaces.IPureLoggerFactory" />
    /// <autogeneratedoc />
    public class PureSeriLoggerFactory : IPureLoggerFactory
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureSeriLoggerFactory"/> class.
        /// </summary>
        /// <param name="loggerFactory">The logger factory.</param>
        /// <param name="loggerSettings">The logger settings.</param>
        /// <exception cref="ArgumentNullException">
        /// loggerFactory
        /// or
        /// loggerSettings
        /// </exception>
        /// <autogeneratedoc />
        public PureSeriLoggerFactory(ILoggerFactory loggerFactory, ISerilogLoggerSettings loggerSettings)
        {
            WrappedLoggerFactory = loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory));
            SerilogLoggerSettings = loggerSettings ?? throw new ArgumentNullException(nameof(loggerSettings));
        }

        /// <summary>
        /// Gets the serilog logger settings.
        /// </summary>
        /// <value>The serilog logger settings.</value>
        /// <autogeneratedoc />
        public ISerilogLoggerSettings SerilogLoggerSettings { get; }
        /// <summary>
        /// Gets the wrapped logger factory.
        /// </summary>
        /// <value>The wrapped logger factory.</value>
        /// <autogeneratedoc />
        public ILoggerFactory WrappedLoggerFactory { get; }

        /// <summary>
        /// Gets the pure logger settings.
        /// </summary>
        /// <value>The pure logger settings.</value>
        /// <autogeneratedoc />
        public IPureLoggerSettings PureLoggerSettings => SerilogLoggerSettings;

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        /// <autogeneratedoc />
        public void Dispose()
        {
            WrappedLoggerFactory.Dispose();
        }

        /// <summary>
        /// Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.
        /// </summary>
        /// <param name="categoryName">The category name for messages produced by the logger.</param>
        /// <returns>The <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</returns>
        /// <autogeneratedoc />
        public ILogger CreateLogger(string categoryName)
        {
            return CreatePureLogger(categoryName);
        }

        /// <summary>
        /// Creates the logger.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>ILogger&lt;T&gt;.</returns>
        /// <autogeneratedoc />
        public ILogger<T> CreateLogger<T>()
        {
            return CreatePureLogger<T>();
        }

        /// <summary>
        /// Adds an <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> to the logging system.
        /// </summary>
        /// <param name="provider">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</param>
        /// <autogeneratedoc />
        public void AddProvider(ILoggerProvider provider)
        {
            WrappedLoggerFactory.AddProvider(provider);
        }

        /// <summary>
        /// Creates a new <see cref="T:PureActive.Logging.Abstractions.Interfaces.IPureLogger" /> instance.
        /// </summary>
        /// <param name="categoryName">The category name for messages produced by the logger.</param>
        /// <returns>The <see cref="T:PureActive.Logging.Abstractions.Interfaces.IPureLogger" />.</returns>
        /// <autogeneratedoc />
        public IPureLogger CreatePureLogger(string categoryName)
        {
            return new PureSeriLogger(WrappedLoggerFactory.CreateLogger(categoryName));
        }

        /// <summary>
        /// Creates the pure logger.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>IPureLogger&lt;T&gt;.</returns>
        /// <autogeneratedoc />
        public IPureLogger<T> CreatePureLogger<T>()
        {
            return new PureSeriLogger<T>(WrappedLoggerFactory.CreateLogger<T>());
        }
    }
}