// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="InternetAddress.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Net;

namespace PureActive.Network.Abstractions.Types
{
    /// <summary>
    /// Class InternetAddress.
    /// Implements the <see cref="IComparable" />
    /// </summary>
    /// <seealso cref="IComparable" />
    /// <autogeneratedoc />
    public class InternetAddress : IComparable
    {
        /// <summary>
        /// Any
        /// </summary>
        /// <autogeneratedoc />
        public static readonly InternetAddress Any = new InternetAddress(0, 0, 0, 0);
        /// <summary>
        /// The broadcast
        /// </summary>
        /// <autogeneratedoc />
        public static readonly InternetAddress Broadcast = new InternetAddress(255, 255, 255, 255);

        /// <summary>
        /// The address
        /// </summary>
        /// <autogeneratedoc />
        private readonly byte[] _address = {0, 0, 0, 0};

        /// <summary>
        /// Initializes a new instance of the <see cref="InternetAddress"/> class.
        /// </summary>
        /// <param name="address">The address.</param>
        /// <autogeneratedoc />
        public InternetAddress(params byte[] address)
        {
            if (address == null || address.Length != 4)
            {
                _address = null;
            }
            else
            {
                address.CopyTo(_address, 0);
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternetAddress"/> class.
        /// </summary>
        /// <param name="address">The address.</param>
        /// <autogeneratedoc />
        public InternetAddress(IPAddress address)
        {
            if (address == null || address.GetAddressBytes().Length != 4)
            {
                _address = null;
            }
            else
            {
                _address = address.GetAddressBytes();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternetAddress"/> class.
        /// </summary>
        /// <param name="address">The address.</param>
        /// <autogeneratedoc />
        public InternetAddress(string address)
        {
            IPAddress ipAddress = IPAddress.Parse(address);

            _address = ipAddress.GetAddressBytes().Length != 4 ? null : ipAddress.GetAddressBytes();
        }

        /// <summary>
        /// Gets the <see cref="byte"/> at the specified index.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>System.Byte.</returns>
        /// <autogeneratedoc />
        public byte this[int index] => _address[index];

        /// <summary>
        /// Gets a value indicating whether this instance is any.
        /// </summary>
        /// <value><c>true</c> if this instance is any; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool IsAny => Equals(Any);

        /// <summary>
        /// Gets a value indicating whether this instance is broadcast.
        /// </summary>
        /// <value><c>true</c> if this instance is broadcast; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool IsBroadcast => Equals(Broadcast);

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(object obj)
        {
            if (!(obj is InternetAddress other))
            {
                return 1;
            }

            for (int i = 0; i < 4; i++)
            {
                if (_address[i] > other._address[i])
                {
                    return 1;
                }

                if (_address[i] < other._address[i])
                {
                    return -1;
                }
            }

            return 0;
        }

        /// <summary>
        /// Nexts the address.
        /// </summary>
        /// <returns>InternetAddress.</returns>
        /// <exception cref="InvalidOperationException"></exception>
        /// <autogeneratedoc />
        internal InternetAddress NextAddress()
        {
            InternetAddress next = Copy();

            if (_address[3] == 255)
            {
                next._address[3] = 0;

                if (_address[2] == 255)
                {
                    next._address[2] = 0;

                    if (_address[1] == 255)
                    {
                        next._address[1] = 0;

                        if (_address[0] == 255)
                        {
                            throw new InvalidOperationException();
                        }

                        next._address[0] = (byte) (_address[0] + 1);
                    }
                    else
                    {
                        next._address[1] = (byte) (_address[1] + 1);
                    }
                }
                else
                {
                    next._address[2] = (byte) (_address[2] + 1);
                }
            }
            else
            {
                next._address[3] = (byte) (_address[3] + 1);
            }

            return next;
        }

        /// <summary>
        /// Determines whether the specified <see cref="object" /> is equal to this instance.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public override bool Equals(object obj)
        {
            return Equals(obj as InternetAddress);
        }

        /// <summary>
        /// Equalses the specified other.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public bool Equals(InternetAddress other)
        {
            return _address == null ||
                   _address[0] == other._address[0] &&
                   _address[1] == other._address[1] &&
                   _address[2] == other._address[2] &&
                   _address[3] == other._address[3];
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        /// <autogeneratedoc />
        public override int GetHashCode()
        {
            return BitConverter.ToInt32(_address, 0);
        }

        /// <summary>
        /// Returns a <see cref="string" /> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        public override string ToString()
        {
            if (_address != null)
                return this[0] + "." + this[1] + "." + this[2] + "." + this[3];
            return "Null";
        }

        /// <summary>
        /// Copies this instance.
        /// </summary>
        /// <returns>InternetAddress.</returns>
        /// <autogeneratedoc />
        public InternetAddress Copy()
        {
            return new InternetAddress(_address[0], _address[1], _address[2], _address[3]);
        }

        /// <summary>
        /// Converts to array.
        /// </summary>
        /// <returns>System.Byte[].</returns>
        /// <autogeneratedoc />
        public byte[] ToArray()
        {
            byte[] array = new byte[4];
            _address.CopyTo(array, 0);
            return array;
        }

        /// <summary>
        /// Converts to ipaddress.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress ToIPAddress()
        {
            return new IPAddress(ToArray());
        }

        /// <summary>
        /// Parses the specified address.
        /// </summary>
        /// <param name="address">The address.</param>
        /// <returns>InternetAddress.</returns>
        /// <autogeneratedoc />
        public static InternetAddress Parse(string address)
        {
            return new InternetAddress(IPAddress.Parse(address).GetAddressBytes());
        }
    }
}