// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PhysicalAddressExtensions.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net.NetworkInformation;
using System.Text;

namespace PureActive.Network.Abstractions.Extensions
{
    /// <summary>
    /// Class PhysicalAddressExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class PhysicalAddressExtensions
    {
        /// <summary>
        /// The physical address delims
        /// </summary>
        /// <autogeneratedoc />
        private static readonly char[] PhysicalAddressDelims =
        {
            ':', '-'
        };


        /// <summary>
        /// Converts to array.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <returns>System.Byte[].</returns>
        /// <autogeneratedoc />
        public static byte[] ToArray(this PhysicalAddress physicalAddress)
        {
            return physicalAddress.GetAddressBytes();
        }

        /// <summary>
        /// Normalizeds the parse.
        /// </summary>
        /// <param name="physicalAddressString">The physical address string.</param>
        /// <returns>PhysicalAddress.</returns>
        /// <autogeneratedoc />
        public static PhysicalAddress NormalizedParse(string physicalAddressString)
        {
            // Need to normalize the Physical address
            if (string.IsNullOrWhiteSpace(physicalAddressString))
                return PhysicalAddress.None;

            var parts = physicalAddressString.Trim().ToUpper().Split(PhysicalAddressDelims);

            if (parts.Length == 0)
                return PhysicalAddress.None;
            if (parts.Length == 1)
                return PhysicalAddress.Parse(parts[0]);

            var sb = new StringBuilder();

            foreach (var part in parts)
            {
                if (part.Length == 1)
                    sb.Append('0');

                sb.Append(part).Append("-");
            }

            // Remove trailing delim
            sb.Length -= 1;

            return PhysicalAddress.Parse(sb.ToString());
        }


        /// <summary>
        /// Converts to delimstring.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <param name="chDelim">The ch delimiter.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        private static string ToDelimString(this PhysicalAddress physicalAddress, char chDelim)
        {
            var sb = new StringBuilder();
            var physicalAddressString = physicalAddress.ToString();

            if (string.IsNullOrWhiteSpace(physicalAddressString))
                return physicalAddressString;

            for (var i = 0; i < physicalAddressString.Length; i += 2)
            {
                sb.Append(physicalAddressString.Substring(i, 2)).Append(chDelim);
            }

            sb.Length -= 1;

            return sb.ToString();
        }


        /// <summary>
        /// Converts to colonstring.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string ToColonString(this PhysicalAddress physicalAddress) => ToDelimString(physicalAddress, ':');
        /// <summary>
        /// Converts to dashstring.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string ToDashString(this PhysicalAddress physicalAddress) => ToDelimString(physicalAddress, '-');
    }
}