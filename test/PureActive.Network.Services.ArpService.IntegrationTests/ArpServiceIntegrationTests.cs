// ***********************************************************************
// Assembly         : PureActive.Network.Services.ArpService.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ArpServiceIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Abstractions.System;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.CommonServices;
using PureActive.Network.Abstractions.ArpService;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.ArpService.IntegrationTests
{
    /// <summary>
    /// Class ArpServiceIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class ArpServiceIntegrationTests : TestBaseLoggable<ArpServiceIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArpServiceIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ArpServiceIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonServices = CommonServices.CreateInstance(TestLoggerFactory, "ArpServiceIntegrationTests");
            _cancellationTokenSource = new CancellationTokenSource();
            IPingService pingService = new PingService.PingService(commonServices);
            _arpService = new ArpService(commonServices, pingService);
        }

        /// <summary>
        /// The cancellation token source
        /// </summary>
        /// <autogeneratedoc />
        private readonly CancellationTokenSource _cancellationTokenSource;
        /// <summary>
        /// The arp service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IArpService _arpService;

        /// <summary>
        /// Defines the test method ArpService_BogusPhysicalAddress.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_BogusPhysicalAddress()
        {
            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(_cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.StartPending, _arpService.ServiceHostStatus);

            var ipAddress = IPAddress.Parse("203.0.113.1");

            var physicalAddress = _arpService.GetPhysicalAddress(ipAddress);

            Assert.Equal(PhysicalAddress.None, physicalAddress);

            await _arpService.StopAsync(_cancellationTokenSource.Token);
        }

        /// <summary>
        /// Defines the test method ArpService_GatewayPhysicalAddress.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_GatewayPhysicalAddress()
        {
            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(_cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.StartPending, _arpService.ServiceHostStatus);

            var gatewayIPAddressSubnet = IPAddressExtensions.GetDefaultGatewayAddressSubnet(Logger);

            var physicalAddress = _arpService.GetPhysicalAddress(gatewayIPAddressSubnet.IPAddress);
            physicalAddress.Should().NotBeNull();

            await _arpService.StopAsync(_cancellationTokenSource.Token);
        }

        /// <summary>
        /// arp service start stop as an asynchronous operation.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_StartStopAsync()
        {
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(_cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.StartPending, _arpService.ServiceHostStatus);
            await _arpService.StopAsync(_cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
        }

        /// <summary>
        /// Defines the test method ArpService to check cancelling request
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ArpService_CancelRequest()
        {
            // Start ArpService
            Assert.Equal(ServiceHostStatus.Stopped, _arpService.ServiceHostStatus);
            await _arpService.StartAsync(_cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.StartPending, _arpService.ServiceHostStatus);

            var cts = new CancellationTokenSource();

            cts.CancelAfter(100);
            var ipAddressDefaultGateway = IPAddressExtensions.GetDefaultGatewayAddress(Logger);
            _arpService.ClearArpCache();
            var arpItem = await _arpService.GetArpItemAsync(ipAddressDefaultGateway, cts.Token);
            arpItem.Should().BeNull();
     

            await _arpService.StopAsync(_cancellationTokenSource.Token);
        }

        private readonly MethodInfo _methodInfoProcessArpOutput = typeof(ArpService).GetMethod("RunArpSync", BindingFlags.NonPublic | BindingFlags.Instance);

        private ProcessResult InvokeRunArp(TimeSpan timeout, CancellationToken cancellationToken)
        {
            object[] parameters = { timeout, cancellationToken };

            var processResult = (ProcessResult) _methodInfoProcessArpOutput.Invoke(_arpService, parameters);

            return processResult;
        }

        [Fact]
        public void ArpService_RunArpSync()
        {
            var processResult = InvokeRunArp(_arpService.Timeout, CancellationToken.None);
            processResult.Should().NotBeNull();
            processResult.Completed.Should().BeTrue();
            processResult.Output.Should().NotBeNullOrWhiteSpace();
        }

        [Fact]
        public void ArpService_RunArpSync_Cancel()
        {
            var cts = new CancellationTokenSource();

            cts.CancelAfter(10);
            var processResult = InvokeRunArp(_arpService.Timeout, cts.Token);
            processResult.Should().NotBeNull();
            processResult.Completed.Should().BeFalse();
            processResult.Output.Should().BeEmpty();
        }
    }
}