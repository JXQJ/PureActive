// ***********************************************************************
// Assembly         : PureActive.Hosting
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="HostedServiceInternal.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Logging;
using PureActive.Hosting.Abstractions.System;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Logging.Extensions.Types;

namespace PureActive.Hosting.Hosting
{
    /// <summary>
    /// Class HostedServiceInternal.
    /// Implements the <see cref="PureActive.Logging.Extensions.Types.PureLoggableBase{T}" />
    /// Implements the <see cref="PureActive.Hosting.Abstractions.System.IHostedServiceInternal" />
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <seealso cref="PureActive.Logging.Extensions.Types.PureLoggableBase{T}" />
    /// <seealso cref="PureActive.Hosting.Abstractions.System.IHostedServiceInternal" />
    /// <autogeneratedoc />
    public abstract class HostedServiceInternal<T> : PureLoggableBase<T>, IHostedServiceInternal
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostedServiceInternal{T}"/> class.
        /// </summary>
        /// <param name="commonServices">The common services.</param>
        /// <param name="applicationLifetime">The application lifetime.</param>
        /// <param name="serviceHost">The service host.</param>
        /// <exception cref="ArgumentNullException">commonServices</exception>
        /// <autogeneratedoc />
        protected HostedServiceInternal(ICommonServices commonServices, IApplicationLifetime applicationLifetime,
            ServiceHost serviceHost) :
            base(commonServices?.LoggerFactory)
        {
            CommonServices = commonServices ?? throw new ArgumentNullException(nameof(commonServices));
            ApplicationLifetime = applicationLifetime;
            ServiceHost = serviceHost;

            if (applicationLifetime != null)
            {
                // Add ApplicationLifeTime delegates after logger creation
                _cancellationTokenOnStarted = applicationLifetime.ApplicationStarted.Register(OnStarted);
                _cancellationTokenOnStopping = applicationLifetime.ApplicationStopping.Register(OnStopping);
                _cancellationTokenOnStopped = applicationLifetime.ApplicationStopped.Register(OnStopped);
            }
        }

        /// <summary>
        /// Gets the application lifetime.
        /// </summary>
        /// <value>The application lifetime.</value>
        /// <autogeneratedoc />
        private IApplicationLifetime ApplicationLifetime { get; }
        /// <summary>
        /// Gets the common services.
        /// </summary>
        /// <value>The common services.</value>
        /// <autogeneratedoc />
        public ICommonServices CommonServices { get; }

        /// <summary>
        /// Gets or sets the service host.
        /// </summary>
        /// <value>The service host.</value>
        /// <autogeneratedoc />
        public ServiceHost ServiceHost { get; protected set; }

        /// <summary>
        /// Gets or sets the service host status.
        /// </summary>
        /// <value>The service host status.</value>
        /// <autogeneratedoc />
        public ServiceHostStatus ServiceHostStatus { get; protected set; } = ServiceHostStatus.Stopped;

        /// <summary>
        /// Gets the log property list level.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>IEnumerable&lt;IPureLogPropertyLevel&gt;.</returns>
        /// <autogeneratedoc />
        public override IEnumerable<IPureLogPropertyLevel> GetLogPropertyListLevel(LogLevel logLevel,
            LoggableFormat loggableFormat)
        {
            var logPropertyLevels = loggableFormat.IsWithParents()
                ? base.GetLogPropertyListLevel(logLevel, loggableFormat)?.ToList()
                : new List<IPureLogPropertyLevel>();

            if (logLevel <= LogLevel.Information)
            {
                logPropertyLevels?.Add(new PureLogPropertyLevel($"{ServiceHost}HostStatus", ServiceHostStatus,
                    LogLevel.Information));
            }

            return logPropertyLevels?.Where(p => p.MinimumLogLevel.CompareTo(logLevel) >= 0);
        }

        /// <summary>
        /// Triggered when the application host is ready to start the service.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public virtual Task StartAsync(CancellationToken cancellationToken)
        {
            ServiceHostStatus = ServiceHostStatus.Running;

            return Task.CompletedTask;
        }

        /// <summary>
        /// Triggered when the application host is performing a graceful shutdown.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public virtual Task StopAsync(CancellationToken cancellationToken)
        {
            ServiceHostStatus = ServiceHostStatus.Stopped;

            return Task.CompletedTask;
        }

        /// <summary>
        /// Requests the stop service.
        /// </summary>
        /// <autogeneratedoc />
        public virtual void RequestStopService()
        {
            ApplicationLifetime?.StopApplication();
        }

        /// <summary>
        /// Called when [started].
        /// </summary>
        /// <autogeneratedoc />
        protected virtual void OnStarted()
        {
            Logger?.LogInformation("{ServiceHost} OnStarted", ServiceHost);
        }

        /// <summary>
        /// Called when [stopping].
        /// </summary>
        /// <autogeneratedoc />
        protected virtual void OnStopping()
        {
            Logger?.LogInformation("{ServiceHost} OnStopping", ServiceHost);
        }

        /// <summary>
        /// Called when [stopped].
        /// </summary>
        /// <autogeneratedoc />
        protected virtual void OnStopped()
        {
            Logger?.LogInformation("{ServiceHost} OnStopped", ServiceHost);
        }

        // IApplicationLifetime support
        // ReSharper disable NotAccessedField.Local
        /// <summary>
        /// The cancellation token on started
        /// </summary>
        /// <autogeneratedoc />
        private readonly CancellationTokenRegistration _cancellationTokenOnStarted;
        /// <summary>
        /// The cancellation token on stopping
        /// </summary>
        /// <autogeneratedoc />
        private readonly CancellationTokenRegistration _cancellationTokenOnStopping;

        /// <summary>
        /// The cancellation token on stopped
        /// </summary>
        /// <autogeneratedoc />
        private readonly CancellationTokenRegistration _cancellationTokenOnStopped;
        // ReSharper restore NotAccessedField.Local
    }
}