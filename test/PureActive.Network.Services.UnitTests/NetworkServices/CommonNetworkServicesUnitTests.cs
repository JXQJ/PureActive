// ***********************************************************************
// Assembly         : PureActive.Network.Services.UnitTests
// Author           : SteveBu
// Created          : 11-23-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-23-2018
// ***********************************************************************
// <copyright file="CommonNetworkServicesUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using FluentAssertions;
using PureActive.Core.Abstractions.Async;
using PureActive.Core.Abstractions.System;
using PureActive.Hosting.Abstractions.System;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.CommonServices;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Network.Abstractions.ArpService;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;
using LogLevel = Microsoft.Extensions.Logging.LogLevel;

namespace PureActive.Network.Services.UnitTests.NetworkServices
{
    /// <summary>
    /// Class CommonNetworkServicesUnitTests.
    /// Implements the <see cref="CommonNetworkServicesUnitTests" />
    /// </summary>
    /// <seealso cref="CommonNetworkServicesUnitTests" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class CommonNetworkServicesUnitTests : TestBaseLoggable<CommonNetworkServicesUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonNetworkServicesUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public CommonNetworkServicesUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _commonServices = CommonServices.CreateInstance(TestLoggerFactory, typeof(CommonNetworkServicesUnitTests));
        }

        private readonly ICommonServices _commonServices;

        [Fact]
        public void CommonNetworkServices_Constructor()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            var commonNetworkServices = CommonNetworkServices.CreateInstance(TestLoggerFactory, _commonServices);
            commonNetworkServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonNetworkServices>();
        }

        [Fact]
        public void CommonNetworkServices_Constructor_LoggerFactory_Null()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            Func<ICommonNetworkServices> fx = () => CommonNetworkServices.CreateInstance(null, _commonServices);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("loggerFactory");
        }

        [Fact]
        public void CommonNetworkServices_Constructor_CommonServices_Null()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            Func<ICommonNetworkServices> fx = () => CommonNetworkServices.CreateInstance(TestLoggerFactory, (ICommonServices)null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("commonServices");
        }

        [Fact]
        public void CommonNetworkServices_Services()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            var commonNetworkServices = CommonNetworkServices.CreateInstance(TestLoggerFactory, _commonServices);
            commonNetworkServices.ArpService.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IArpService>();
            commonNetworkServices.ProcessRunner.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IProcessRunner>();
            commonNetworkServices.FileSystem.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IFileSystem>();
            commonNetworkServices.OperationRunner.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IOperationRunner>();
            commonNetworkServices.OperatingSystem.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IOperatingSystem>();
            commonNetworkServices.PingService.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPingService>();
        }

        [Fact]
        public void CommonNetworkServices_ServiceHost()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            var commonNetworkServices = CommonNetworkServices.CreateInstance(TestLoggerFactory, _commonServices);

            commonNetworkServices.ServiceHostStatus.Should().Be(ServiceHostStatus.Stopped);
        }

        [Fact]
        public void CommonNetworkServices_GetLogPropertyList()
        {
            _commonServices.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ICommonServices>();
            var commonNetworkServices = CommonNetworkServices.CreateInstance(TestLoggerFactory, _commonServices);

            commonNetworkServices.GetLogPropertyListLevel(LogLevel.Debug, LoggableFormat.ToLogWithParents).Should()
                .NotBeNull().And.Subject.Should().BeAssignableTo<IEnumerable<IPureLogPropertyLevel>>();
        }

    }
}