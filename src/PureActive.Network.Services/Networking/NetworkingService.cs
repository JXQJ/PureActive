// ***********************************************************************
// Assembly         : PureActive.Core
// Author           : SteveBu
// Created          : 11-29-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-29-2018
// ***********************************************************************
// <copyright file="NetworkingService.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.Networking;
using PureActive.Network.Abstractions.Types;

namespace PureActive.Network.Services.Networking
{
    /// <summary>
    /// Class NetworkingService.
    /// Implements the <see cref="INetworkingService" />
    /// </summary>
    /// <seealso cref="INetworkingService" />
    /// <autogeneratedoc />
    public class NetworkingService : INetworkingService
    {
        private readonly IPureLogger _logger;

        /// <summary>
        /// Constructor for NetworkingService
        /// </summary>
        /// <param name="logger"></param>
        public NetworkingService(IPureLogger<NetworkingService> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Gets all network interfaces.
        /// </summary>
        /// <returns>NetworkInterface[].</returns>
        /// <autogeneratedoc />
        public NetworkInterface[] GetAllNetworkInterfaces()
        {
            return NetworkInterface.GetAllNetworkInterfaces();
        }


        /// <summary>
        /// Returns an IPV4 IPAddressSubnet given the passed in networkInterface, returns IPAddressSubnet.None
        /// if 
        /// </summary>
        /// <param name="networkInterface"></param>
        /// <returns></returns>
        // ReSharper disable once InconsistentNaming
        public IPAddressSubnet IPv4AddressSubnetFromNetworkInterface(NetworkInterface networkInterface)
        {
            // Is the network up and have a Network Gateway
            if (networkInterface.OperationalStatus == OperationalStatus.Up &&
                networkInterface.NetworkInterfaceType != NetworkInterfaceType.Loopback)
            {
                if (networkInterface.GetIPProperties().GatewayAddresses.IPv4OrDefault() != null)
                {
                    foreach (var unicastIpAddress in networkInterface.GetIPProperties().UnicastAddresses)
                    {
                        if (unicastIpAddress.Address.AddressFamily == AddressFamily.InterNetwork)
                        {
                            return new IPAddressSubnet(unicastIpAddress.Address, unicastIpAddress.IPv4Mask);
                        }
                    }
                }
            }

            return IPAddressSubnet.None;
        }

        /// <summary>
        /// Gets the default local address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        public IPAddressSubnet GetDefaultLocalAddressSubnet()
        {
            var ipAddressSubnet = new IPAddressSubnet(IPAddress.None, IPAddress.None);

            try
            {
                foreach (var networkInterface in NetworkInterface.GetAllNetworkInterfaces())
                {
                    ipAddressSubnet = IPv4AddressSubnetFromNetworkInterface(networkInterface);

                    // break if we  find an IPv4 Interface
                    if (!ipAddressSubnet.Equals(IPAddressSubnet.None))
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "GetDefaultLocalAddressSubnet failed");
            }

            return ipAddressSubnet;
        }
        
        /// <summary>
        /// Gets the default local address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultLocalAddress() => GetDefaultLocalAddressSubnet()?.IPAddress;

        /// <summary>
        /// Gets the default local subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultLocalSubnet() => GetDefaultLocalAddressSubnet()?.SubnetMask;


        /// <summary>
        /// Gets the default local network address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        public IPAddressSubnet GetDefaultLocalNetworkAddressSubnet()
        {
            var localIPAddressSubnet = GetDefaultLocalAddressSubnet();

            return new IPAddressSubnet(localIPAddressSubnet.IPAddress.GetNetworkAddress(),
                localIPAddressSubnet.SubnetMask);
        }


        /// <summary>
        /// Gets the default local network address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultLocalNetworkAddress() => GetDefaultLocalNetworkAddressSubnet()?.IPAddress;

        /// <summary>
        /// Gets the default local network subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultLocalNetworkSubnet() => GetDefaultLocalNetworkAddressSubnet()?.SubnetMask;

        /// <summary>
        /// Gets the default gateway address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        public IPAddressSubnet GetDefaultGatewayAddressSubnet()
        {
            try
            {
                foreach (var networkInterface in NetworkInterface.GetAllNetworkInterfaces())
                {
                    // Is the network up and have a Network Gateway
                    if (networkInterface.OperationalStatus == OperationalStatus.Up &&
                        networkInterface.NetworkInterfaceType != NetworkInterfaceType.Loopback)
                    {
                        var defaultGateway = networkInterface.GetIPProperties().GatewayAddresses.IPv4OrDefault();

                        if (defaultGateway == null)
                            continue;

                        if (defaultGateway.Address.AddressFamily != AddressFamily.InterNetwork)
                        {
                            _logger?.LogError("Default Gateway {GatewayIPAddress} is not IPv4", defaultGateway.Address);
                        }

                        foreach (var ipAddress in networkInterface.GetIPProperties().UnicastAddresses)
                        {
                            if (ipAddress.Address.AddressFamily == AddressFamily.InterNetwork)
                            {
                                return new IPAddressSubnet(defaultGateway.Address, ipAddress.IPv4Mask);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "GetDefaultGatewayAddress failed");
            }

            return IPAddressSubnet.None;
        }

        /// <summary>
        /// Gets the default gateway address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultGatewayAddress() => GetDefaultGatewayAddressSubnet().IPAddress;

        /// <summary>
        /// Gets the default gateway subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        public IPAddress GetDefaultGatewaySubnet() => GetDefaultGatewayAddressSubnet().SubnetMask;

    }
}
