// ***********************************************************************
// Assembly         : PureActive.Network.Services.ArpService.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ArpServiceUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;
using FluentAssertions;
using PureActive.Hosting.CommonServices;
using PureActive.Network.Abstractions.ArpService;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.ArpService.UnitTests
{
    /// <summary>
    /// Class ArpServiceUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ArpServiceUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class ArpServiceUnitTests : TestBaseLoggable<ArpServiceUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArpServiceUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ArpServiceUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonServices = CommonServices.CreateInstance(TestLoggerFactory, "ArpServiceUnitTests");
            IPingService pingService = new PingService.PingService(commonServices);
            _arpService = new ArpService(commonServices, pingService);
        }

        /// <summary>
        /// The arp service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IArpService _arpService;

        /// <summary>
        /// Defines the test method ArpService_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ArpService_Constructor()
        {
            _arpService.Should().NotBeNull();
        }

        /// <summary>
        /// Defines the test method ArpService_Count.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ArpService_Count()
        {
            _arpService.Count.Should().Be(0);
        }

        /// <summary>
        /// Defines the test method ArpService_Timeout.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ArpService_Timeout()
        {
            var timeoutDefault = new TimeSpan(0, 3, 0);
            var timeoutNew = new TimeSpan(0, 4, 0);

            _arpService.Timeout.Should().Be(timeoutDefault); // 3 minutes
            _arpService.Timeout = timeoutNew;
            _arpService.Timeout.Should().Be(timeoutNew);
            _arpService.Timeout = timeoutDefault;
        }

        private readonly MethodInfo _methodInfoProcessArpOutput = typeof(ArpService).GetMethod("_ProcessArpOutput", BindingFlags.NonPublic | BindingFlags.Instance);

        private ArpRefreshStatus InvokeArpRefreshStatus(string arpResults, CancellationToken cancellationToken)
        {
            object[] parameters = { arpResults, cancellationToken };

            return (ArpRefreshStatus)_methodInfoProcessArpOutput.Invoke(_arpService, parameters);
        }

        [Fact]
        public void ArpService_ProcessArpOutput_Null()
        {
            Func<ArpRefreshStatus> fx = () => InvokeArpRefreshStatus(null, CancellationToken.None);
            fx.Should().Throw<TargetInvocationException>().And.InnerException.Message.Should()
                .Contain("Value cannot be null.");
        }

        [Fact]
        public void ArpService_ProcessArpOutput_Arp()
        {
            Func<ArpRefreshStatus> fx = () => InvokeArpRefreshStatus(null, CancellationToken.None);
            fx.Should().Throw<TargetInvocationException>().And.InnerException.Message.Should()
                .Contain("Value cannot be null.");
        }

        private readonly string _arpresultsTest = @"

Interface: 169.254.80.80 --- 0x24
  Internet Address      Physical Address      Type
  169.254.255.255       ff-ff-ff-ff-ff-ff     static    
  224.0.0.2             01-00-5e-00-00-02     static    
  224.0.0.7             01-00-5e-00-00-07     static    
  224.0.0.22            01-00-5e-00-00-16     static    
  224.0.0.251           01-00-5e-00-00-fb     static    
  224.0.0.252           01-00-5e-00-00-fc     static    
  224.0.1.1             01-00-5e-00-01-01     static    
  224.0.1.60            01-00-5e-00-01-3c     static    
  224.0.1.178           01-00-5e-00-01-b2     static    
  229.111.112.12        01-00-5e-6f-70-0c     static    
  230.0.0.1             01-00-5e-00-00-01     static    
  234.5.6.7             01-00-5e-05-06-07     static    
  239.0.0.250           01-00-5e-00-00-fa     static    
  239.255.250.250       01-00-5e-7f-fa-fa     static    
  239.255.255.250       01-00-5e-7f-ff-fa     static    
  239.255.255.253       01-00-5e-7f-ff-fd     static    
  255.255.255.255       ff-ff-ff-ff-ff-ff     static    

Interface: 10.0.75.1 --- 0x2c
  Internet Address      Physical Address      Type
  10.0.75.2             00-15-5d-0a-19-1d     dynamic   
  10.0.75.255           ff-ff-ff-ff-ff-ff     static    
  224.0.0.2             01-00-5e-00-00-02     static    
  224.0.0.7             01-00-5e-00-00-07     static    
  224.0.0.22            01-00-5e-00-00-16     static    
  224.0.0.251           01-00-5e-00-00-fb     static    
  224.0.0.252           01-00-5e-00-00-fc     static    
  224.0.1.1             01-00-5e-00-01-01     static    
  224.0.1.60            01-00-5e-00-01-3c     static    
  239.0.0.250           01-00-5e-00-00-fa     static    
  239.255.250.250       01-00-5e-7f-fa-fa     static    
  239.255.255.250       01-00-5e-7f-ff-fa     static    
  255.255.255.255       ff-ff-ff-ff-ff-ff     static    

";

        private readonly string _arpresultsError = @"

Interface: 169.254.80.80 --- 0x24
  Internet Address      Physical Address      Type
  169.254.255.255       ff-ff-ff-ff-ff-ff     static    
  224.0.0.2             01-00-5e-00-00-02     static    
  224.0.0.256           01-00-5e-00-00-07     static    

";


        [Fact]
        public void ArpService_ProcessArpOutput_String()
        {
            _arpService.ClearArpCache();
            var arpRefreshStatus = InvokeArpRefreshStatus(_arpresultsTest, CancellationToken.None);
            arpRefreshStatus.Should().NotBeNull();

        }


        [Fact]
        public void ArpService_ProcessArpOutput_Error()
        {
            _arpService.ClearArpCache();
            var arpRefreshStatus = InvokeArpRefreshStatus(_arpresultsError, CancellationToken.None);
            arpRefreshStatus.Should().NotBeNull();

        }

        [Fact]
        public void ArpService_GetEnumerator()
        {
            _arpService.GetEnumerator().Should().NotBeNull().And.Subject.Should().BeAssignableTo<IEnumerator<ArpItem>>();

        }
    }


}