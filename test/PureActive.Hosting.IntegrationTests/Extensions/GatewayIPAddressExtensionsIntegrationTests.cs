using System.Collections.Generic;
using System.Net;
using System.Net.NetworkInformation;
using FluentAssertions;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Hosting.Abstractions.Networking;
using PureActive.Hosting.Networking;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Hosting.IntegrationTests.Extensions
{
    [Trait("Category", "Integration")]
    public class
        GatewayIPAddressExtensionsIntegrationTests : TestBaseLoggable<GatewayIPAddressExtensionsIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayIPAddressExtensionsIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public GatewayIPAddressExtensionsIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _networkingSystem = new NetworkingSystem(TestLoggerFactory.CreatePureLogger<NetworkingSystem>());
        }

        private readonly INetworkingSystem _networkingSystem;


        [Fact]
        public void GatewayIPAddressExtensions_IPv4OrDefault()
        {
            foreach (var networkInterface in _networkingSystem.GetAllNetworkInterfaces())
            {
                if (networkInterface.GetIPProperties().GatewayAddresses.IPv4OrDefault() != null)
                {
                    foreach (var unicastIpAddress in networkInterface.GetIPProperties().UnicastAddresses)
                    {
                        TestOutputHelper.WriteLine($"Found IPAddress: {unicastIpAddress.Address}");
                    }
                }
            }
        }

        private class GatewayIPAddressInformationTest : GatewayIPAddressInformation
        {
            public GatewayIPAddressInformationTest(IPAddress ipAddress)
            {
                Address = ipAddress;
            }

            /// <inheritdoc />
            public override IPAddress Address { get; }
        }


        private class GatewayIPAddressInformationCollectionTest : GatewayIPAddressInformationCollection
        {
            private readonly List<GatewayIPAddressInformationTest> _gatewayIPAddressInformationCollection = new List<GatewayIPAddressInformationTest>();

            public GatewayIPAddressInformationCollectionTest(IPAddress ipAddress)
            {
                _gatewayIPAddressInformationCollection.Add(new GatewayIPAddressInformationTest(ipAddress));
            }

            public override IEnumerator<GatewayIPAddressInformation> GetEnumerator()
            {
                return _gatewayIPAddressInformationCollection.GetEnumerator();
            }
        }


        [Fact]
        public void GatewayIPAddressExtensions_IPv4OrDefault_AddressFamily()
        {
            var gatewayIPAddressInformationCollectionTest = new GatewayIPAddressInformationCollectionTest(IPAddress.IPv6Loopback);

            gatewayIPAddressInformationCollectionTest.IPv4OrDefault().Should().BeNull();

        }
    }
}