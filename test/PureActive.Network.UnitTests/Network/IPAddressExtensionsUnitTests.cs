// ***********************************************************************
// Assembly         : PureActive.Network.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPAddressExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net;
using FluentAssertions;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.UnitTests.Network
{
    /// <summary>
    /// Class IPAddressExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class IPAddressExtensionsUnitTests : TestBaseLoggable<IPAddressExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public IPAddressExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_Increment.
        /// </summary>
        /// <param name="ipAddressStringTest">The ip address string test.</param>
        /// <param name="ipAddressStringExpected">The ip address string expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("1.2.3.4", "1.2.3.5")]
        [InlineData("255.255.255.255", "255.255.255.255")]
        public void IPAddressExtensions_Increment(string ipAddressStringTest, string ipAddressStringExpected)
        {
            IPAddress ipAddressTest = IPAddress.Parse(ipAddressStringTest);
            IPAddress ipAddressExpected = IPAddress.Parse(ipAddressStringExpected);

            var ipAddressIncrement = ipAddressTest.Increment();

            Assert.Equal(ipAddressExpected, ipAddressIncrement);
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_Decrement.
        /// </summary>
        /// <param name="ipAddressStringTest">The ip address string test.</param>
        /// <param name="ipAddressStringExpected">The ip address string expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("1.2.3.4", "1.2.3.3")]
        [InlineData("0.0.0.0", "0.0.0.0")]
        public void IPAddressExtensions_Decrement(string ipAddressStringTest, string ipAddressStringExpected)
        {
            IPAddress ipAddressTest = IPAddress.Parse(ipAddressStringTest);
            IPAddress ipAddressExpected = IPAddress.Parse(ipAddressStringExpected);

            var ipAddressDecrement = ipAddressTest.Decrement();

            Assert.Equal(ipAddressExpected, ipAddressDecrement);
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_GetDefaultGatewayAddressSubnet.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_GetDefaultGatewayAddressSubnet()
        {
            var addressSubnet = IPAddressExtensions.GetDefaultGatewayAddressSubnet(Logger);
            addressSubnet.Should().NotBeNull();
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_ToLong.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_ToLong()
        {
            IPAddress ipAddress = IPAddress.Parse("1.2.3.4");

            var longTest = ipAddress.ToLong();

            var ipAddressTest = new IPAddress(longTest);

            Assert.Equal(ipAddressTest, ipAddress);
        }
    }
}