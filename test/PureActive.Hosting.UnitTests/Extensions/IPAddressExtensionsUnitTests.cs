// ***********************************************************************
// Assembly         : PureActive.Network.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPAddressExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Net;
using FluentAssertions;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Hosting.UnitTests.Extensions
{
    /// <summary>
    /// Class IPAddressExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class IPAddressExtensionsUnitTests : TestBaseLoggable<IPAddressExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public IPAddressExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {

        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_Increment.
        /// </summary>
        /// <param name="ipAddressStringTest">The ip address string test.</param>
        /// <param name="ipAddressStringExpected">The ip address string expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("1.2.3.4", "1.2.3.5")]
        [InlineData("255.255.255.255", "255.255.255.255")]
        public void IPAddressExtensions_Increment(string ipAddressStringTest, string ipAddressStringExpected)
        {
            IPAddress ipAddressTest = IPAddress.Parse(ipAddressStringTest);
            IPAddress ipAddressExpected = IPAddress.Parse(ipAddressStringExpected);

            var ipAddressIncrement = ipAddressTest.Increment();

            Assert.Equal(ipAddressExpected, ipAddressIncrement);
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_Decrement.
        /// </summary>
        /// <param name="ipAddressStringTest">The ip address string test.</param>
        /// <param name="ipAddressStringExpected">The ip address string expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("1.2.3.4", "1.2.3.3")]
        [InlineData("0.0.0.0", "0.0.0.0")]
        public void IPAddressExtensions_Decrement(string ipAddressStringTest, string ipAddressStringExpected)
        {
            IPAddress ipAddressTest = IPAddress.Parse(ipAddressStringTest);
            IPAddress ipAddressExpected = IPAddress.Parse(ipAddressStringExpected);

            var ipAddressDecrement = ipAddressTest.Decrement();

            Assert.Equal(ipAddressExpected, ipAddressDecrement);
        }


        /// <summary>
        /// Defines the test method IPAddressExtensions_ToLong.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_ToLong()
        {
            IPAddress ipAddress = IPAddress.Parse("1.2.3.4");

            var longTest = ipAddress.ToLong();

            var ipAddressTest = new IPAddress(longTest);

            Assert.Equal(ipAddressTest, ipAddress);
        }


        /// <summary>
        /// Defines the test method IPAddressExtensions_ToLongBackwards.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_ToLongBackwards()
        {
            IPAddress ipAddress = IPAddress.Parse("1.2.3.4");

            var ipAddressTest = new IPAddress(ipAddress.ToLongBackwards());

            Assert.Equal(ipAddressTest, IPAddress.Parse("4.3.2.1"));
        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_IsAddressOnSameSubnet.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_IsAddressOnSameSubnet()
        {
            var ipAddress1 = IPAddress.Parse("10.1.10.1");
            var ipAddress2 = IPAddress.Parse("10.1.10.250");
            var ipAddress3 = IPAddress.Parse("10.0.10.1");

            ipAddress1.IsAddressOnSameSubnet(ipAddress2, IPAddressExtensions.SubnetClassC).Should().BeTrue();
            ipAddress1.IsAddressOnSameSubnet(ipAddress3, IPAddressExtensions.SubnetClassC).Should().BeFalse();
            ipAddress1.IsAddressOnSameSubnet(ipAddress3, IPAddressExtensions.SubnetClassA).Should().BeTrue();

        }

        /// <summary>
        /// Defines the test method IPAddressExtensions_IsAddressOnSameSubnet testing for null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_IsAddressOnSameSubnet_Null()
        {
            var ipAddress1 = IPAddress.Parse("10.1.10.1");

            Func<bool> fx = () =>
                ((IPAddress) null).IsAddressOnSameSubnet(ipAddress1, IPAddressExtensions.SubnetClassC);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("address2");

            fx = () => ipAddress1.IsAddressOnSameSubnet(null, IPAddressExtensions.SubnetClassC);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("address");

            fx = () => ipAddress1.IsAddressOnSameSubnet(ipAddress1, null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("subnetMask");
        }


        /// <summary>
        /// Defines the test method IPAddressExtensions_CompareTo with Different
        /// AddressFamilyes
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_CompareTo_AddressFamily()
        {
            IPAddress ipAddress1 = IPAddress.Parse("1.2.3.4");
            IPAddress ipAddress2 = IPAddress.Parse("2.3.4.5");
            IPAddress ipAddressV6 = IPAddress.IPv6None;

            ipAddress1.CompareTo(ipAddress2).Should().BeLessThan(0);
            ipAddress2.CompareTo(ipAddress1).Should().BeGreaterThan(0);
            ipAddress1.CompareTo(ipAddress1).Should().Be(0);

            ipAddress1.CompareTo(ipAddressV6).Should().BeLessThan(0); 
        }


        /// <summary>
        /// Defines the test method IPAddressExtensions_GetBroadcastAddress
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IPAddressExtensions_GetBroadcastAddress()
        {
            var ipAddress1 = IPAddress.Parse("10.1.10.1");

            ipAddress1.GetBroadcastAddress().Should().Be(IPAddress.Parse("10.1.10.255"));
        }

    }
}