// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IntegerExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using FluentAssertions;
using PureActive.Core.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Extensions
{
    /// <summary>
    /// Class IntegerExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IntegerExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IntegerExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class IntegerExtensionsUnitTests : TestBaseLoggable<IntegerExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegerExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public IntegerExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method IntegerExtensions_ToInt16HexString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IntegerExtensions_ToInt16HexString()
        {
            const short int16 = 256;
            var prefix = "0x";
            var hexString = int16.ToHexString(prefix);

            hexString.Should().Be($"{prefix}{int16:X4}");
        }

        /// <summary>
        /// Defines the test method IntegerExtensions_ToInt16HexStringNullPrefix.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IntegerExtensions_ToInt16HexStringNullPrefix()
        {
            // ReSharper disable ExpressionIsAlwaysNull
            const short int16 = 256;
            string prefix = null;
            var hexString = int16.ToHexString(prefix);

            hexString.Should().Be($"{prefix}{int16:X4}");
            // ReSharper restore ExpressionIsAlwaysNull
        }

        /// <summary>
        /// Defines the test method IntegerExtensions_ToInt32HexString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IntegerExtensions_ToInt32HexString()
        {
            const int int32 = 256;
            var prefix = "0x";
            var hexString = int32.ToHexString(prefix);

            hexString.Should().Be($"{prefix}{int32:X8}");
        }

        /// <summary>
        /// Defines the test method IntegerExtensions_ToUInt16HexString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IntegerExtensions_ToUInt16HexString()
        {
            const ushort uint16 = 256;
            var prefix = "0x";
            var hexString = uint16.ToHexString(prefix);

            hexString.Should().Be($"{prefix}{uint16:X4}");
        }

        /// <summary>
        /// Defines the test method IntegerExtensions_ToUInt32HexString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void IntegerExtensions_ToUInt32HexString()
        {
            const uint uint32 = 256;
            var prefix = "0x";
            var hexString = uint32.ToHexString(prefix);

            hexString.Should().Be($"{prefix}{uint32:X8}");
        }
    }
}