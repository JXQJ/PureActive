// ***********************************************************************
// Assembly         : PureActive.Serilog.Sink.Xunit
// Author           : SteveBu
// Created          : 11-21-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-21-2018
// ***********************************************************************
// <copyright file="ObservableExtensions.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary>IObservable extensions for adding TestConsoleObserver</summary>
// ***********************************************************************
using System;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Serilog.Sink.Xunit.Observers;
using Serilog.Events;
using Xunit.Abstractions;

namespace PureActive.Serilog.Sink.Xunit.Extensions
{
    /// <summary>
    /// Static class for IObservable extensions for adding TestConsoleObserver
    /// </summary>
    /// <autogeneratedoc />
    public static class ObservableExtensions
    {
        /// <summary>
        /// Subscribe an observer that prints each notification to the console output
        /// </summary>
        /// <typeparam name="T">Type being observed</typeparam>
        /// <param name="observable">The observable.</param>
        /// <param name="testOutputHelper">xUnit test output helper.</param>
        /// <param name="name">optional name parameter for observable.</param>
        /// <returns>a disposable subscription object</returns>
        public static IDisposable SubscribeTestConsole<T>(this IObservable<T> observable, ITestOutputHelper testOutputHelper, string name = "")
        {
            return observable.Subscribe(new TestConsoleObserver<T>(testOutputHelper, name));
        }

        /// <summary>
        /// Subscribe an observer that logs each notification to the test console output
        /// </summary>
        /// <typeparam name="T">Type being observed</typeparam>
        /// <param name="observable">The observable.</param>
        /// <param name="logger">IPureLogger based on ITestOutputHelper</param>
        /// <param name="name">optional name parameter for observable.</param>
        /// <returns>a disposable subscription object</returns>
        public static IDisposable SubscribeTestLogger<T>(this IObservable<T> observable, IPureLogger logger, string name = "")
        {
            return observable.Subscribe(new TestLoggerObserver<T>(logger, name));
        }

        /// <summary>
        /// Returns is passed in Serilog log event message is a OnNext Observable event
        /// </summary>
        /// <param name="messageTemplate"></param>
        /// <autogeneratedoc />
        public static bool IsLogEventOnNext(this MessageTemplate messageTemplate)
        {
            return messageTemplate.Text.Contains(TestLoggerObserver<MessageTemplate>.OnNextMsgTemplate);
        }

        /// <summary>
        /// Returns is passed in Serilog log event message is a OnCompleted Observable event
        /// </summary>
        /// <param name="messageTemplate"></param>
        /// <autogeneratedoc />
        public static bool IsLogEventOnCompleted(this MessageTemplate messageTemplate)
        {
            return messageTemplate.Text.Contains(TestLoggerObserver<MessageTemplate>.OnCompletedMsgTemplate);
        }

        /// <summary>
        /// Returns is passed in Serilog log event message is a OnError Observable event
        /// </summary>
        /// <param name="messageTemplate"></param>
        /// <autogeneratedoc />
        public static bool IsLogEventOnError(this MessageTemplate messageTemplate)
        {
            return messageTemplate.Text.Contains(TestLoggerObserver<MessageTemplate>.OnErrorMsgTemplate);
        }
    }
}
