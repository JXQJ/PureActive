// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog
// Author           : SteveBu
// Created          : 10-22-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ISerilogLoggerSettings.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using Serilog.Events;

namespace PureActive.Logger.Provider.Serilog.Interfaces
{
    /// <summary>
    /// Interface ISerilogLoggerSettings
    /// Implements the <see cref="IPureLoggerSettings" />
    /// </summary>
    /// <seealso cref="IPureLoggerSettings" />
    /// <autogeneratedoc />
    public interface ISerilogLoggerSettings : IPureLoggerSettings
    {
        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc />
        IConfiguration Configuration { get; }

        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        IPureLogLevel RegisterLogLevel(string key, LogEventLevel logEventLevel);

        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        IPureLogLevel RegisterLogLevel(LoggingOutputFlags loggingOutputFlag, LogEventLevel logEventLevel);

        /// <summary>
        /// Gets the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel GetSerilogLogLevel(LoggingOutputFlags loggingOutputFlag);

        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel RegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag, LogEventLevel logEventLevel);
        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel RegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel);

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel GetOrRegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel);

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel GetOrRegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag,
            LogEventLevel logEventLevel);

        /// <summary>
        /// Gets the or register serilog log default level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        ISerilogLogLevel GetOrRegisterSerilogLogDefaultLevel(LoggingOutputFlags loggingOutputFlag);
    }
}