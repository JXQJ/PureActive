// ***********************************************************************
// Assembly         : PureActive.Network.Services.PingService.UnitTests
// Author           : SteveBu
// Created          : 11-21-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-21-2018
// ***********************************************************************
// <copyright file="PingServiceUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using FluentAssertions;
using PureActive.Hosting.CommonServices;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.PingService.UnitTests
{
    /// <summary>
    /// Class PingServiceUnitTests.
    /// Implements the <see cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingServiceUnitTests}" />
    /// </summary>
    /// <seealso cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingServiceUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PingServiceUnitTests : TestBaseLoggable<PingServiceUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingServiceUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PingServiceUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonServices = CommonServices.CreateInstance(TestLoggerFactory, "PingServiceUnitTests");
            _pingService = new PingService(commonServices);
        }

        /// <summary>
        /// The ping service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPingService _pingService;

        /// <summary>
        /// Tests the PingService Constructor
        /// </summary>
        [Fact]
        public void PingService_Constructor()
        {
            _pingService.Should().NotBeNull();
        }

        /// <summary>
        /// Tests the PingService Constructor with Null CommonServices
        /// </summary>
        [Fact]
        public void PingService_Constructor_Null_CommonServices()
        {
            Func<IPingService> act = () => new PingService(null);

            act.Should().Throw<ArgumentNullException>();
        }


        /// <summary>
        /// Tests the PingService  EnableLogging true/false
        /// </summary>
        [Fact]
        public void PingService_Constructor_EnableLogging_Defaults_Get_Set()
        {
            _pingService.EnableLogging.Should().BeTrue();
            _pingService.EnableLogging = false;
            _pingService.EnableLogging.Should().BeFalse();
            _pingService.EnableLogging = true;
            _pingService.EnableLogging.Should().BeTrue();

        }

    }
}