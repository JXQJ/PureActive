// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="DhpcMessageProcessed.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
namespace PureActive.Network.Abstractions.DhcpService.Types
{
    /// <summary>
    /// Enum DhcpMessageProcessed
    /// </summary>
    /// <autogeneratedoc />
    public enum DhcpMessageProcessed
    {
        /// <summary>
        /// The unknown
        /// </summary>
        /// <autogeneratedoc />
        Unknown = 0,
        /// <summary>
        /// The success
        /// </summary>
        /// <autogeneratedoc />
        Success,
        /// <summary>
        /// The duplicate
        /// </summary>
        /// <autogeneratedoc />
        Duplicate,
        /// <summary>
        /// The failed
        /// </summary>
        /// <autogeneratedoc />
        Failed,
        /// <summary>
        /// The ignored
        /// </summary>
        /// <autogeneratedoc />
        Ignored
    }

    /// <summary>
    /// Class DhcpMessageProcessedString.
    /// </summary>
    /// <autogeneratedoc />
    public static class DhcpMessageProcessedString
    {
        /// <summary>
        /// Gets the name.
        /// </summary>
        /// <param name="dhcpMessageProcessed">The DHCP message processed.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string GetName(DhcpMessageProcessed dhcpMessageProcessed)
        {
            switch (dhcpMessageProcessed)
            {
                case DhcpMessageProcessed.Success:
                    return "SUCCESS";
                case DhcpMessageProcessed.Duplicate:
                    return "DUPLICATE";
                case DhcpMessageProcessed.Failed:
                    return "FAILED";
                case DhcpMessageProcessed.Ignored:
                    return "IGNORED";
                default:
                    return "UNKNOWN";
            }
        }
    }
}