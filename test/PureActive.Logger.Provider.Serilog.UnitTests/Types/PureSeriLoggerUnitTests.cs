// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog.UnitTests
// Author           : SteveBu
// Created          : 11-25-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-25-2018
// ***********************************************************************
// <copyright file="PureSeriLoggerUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using PureActive.Core.Extensions;
using PureActive.Logger.Provider.Serilog.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Extensions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Sinks.TestCorrelator;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Logger.Provider.Serilog.UnitTests.Types
{
    /// <summary>
    /// Class PureSeriLoggerUnitTests.
    /// Implements the <see cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PureSeriLoggerUnitTests}" />
    /// </summary>
    /// <seealso cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PureSeriLoggerUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PureSeriLoggerUnitTests : TestBaseLoggable<PureSeriLoggerUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureSeriLoggerUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PureSeriLoggerUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _pureSeriLogger = new PureSeriLogger(Logger);
        }

        /// <summary>
        /// The pure seri logger
        /// </summary>
        /// <autogeneratedoc />
        private readonly PureSeriLogger _pureSeriLogger;

        /// <summary>
        /// Defines the test method PureSeriLogger_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_Constructor()
        {
            _pureSeriLogger.Should().NotBeNull();
            _pureSeriLogger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPureLogger>();
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_Constructor_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_Constructor_Null()
        {
            Func<IPureLogger> fx = () => new PureSeriLogger(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_Typed_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_Typed_Constructor()
        {
            var pureSeriLogger = new PureSeriLogger<PureSeriLoggerUnitTests>(Logger);
            pureSeriLogger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPureLogger<PureSeriLoggerUnitTests>>();
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_Typed_Constructor_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_Typed_Constructor_Null()
        {
            Func< IPureLogger <PureSeriLoggerUnitTests>> fx = () => new PureSeriLogger<PureSeriLoggerUnitTests>(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_WrappedLogger.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_WrappedLogger()
        {
            _pureSeriLogger.WrappedLogger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ILogger>();

        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_LogPropertyList_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_LogPropertyList_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushLogProperties(null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logPropertyList");
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_LogPropertyList_LogLevel_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_LogPropertyList_LogLevel_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushLogProperties(null, LogLevel.Debug);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logPropertyList");
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_KeyValue_LogPropertyList_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_KeyValue_LogPropertyList_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushLogProperties((IEnumerable < KeyValuePair<string, object>> )null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("properties");
        }

        /// <summary>
        /// Includes the log property true.
        /// </summary>
        /// <param name="logPropertyLevel">The log property level.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        [ExcludeFromCodeCoverage]
        private bool IncludeLogPropertyTrue(IPureLogPropertyLevel logPropertyLevel) => true;

        /// <summary>
        /// Includes the log property false.
        /// </summary>
        /// <param name="logPropertyLevel">The log property level.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        [ExcludeFromCodeCoverage]
        private bool IncludeLogPropertyFalse(IPureLogPropertyLevel logPropertyLevel) => false;

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_LogPropertyList_Include_True.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_LogPropertyList_Include_True()
        {
            const string testProperty = "Property";
            const string testValue = "Value";
            const string testLogMsg = "Test Message";

            var logPropertyList = new List<IPureLogPropertyLevel>()
            {
                new PureLogPropertyLevel(new KeyValuePair<string, object>(testProperty, testValue), LogLevel.Debug)
            };


            using (TestCorrelator.CreateContext())
            using (_pureSeriLogger.PushLogProperties(logPropertyList, IncludeLogPropertyTrue))
            {
                _pureSeriLogger.LogDebug(testLogMsg);

                var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();

                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(testProperty).Should().BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties[testProperty].ToString().Should().Be(testValue.ToDoubleQuoted());

                currentTestContext.Should().ContainSingle().Which.MessageTemplate.Text.Should().Be(testLogMsg);

            }
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_LogPropertyList_Include_False.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_LogPropertyList_Include_False()
        {
            const string testProperty = "Property";
            const string testValue = "Value";
            const string testLogMsg = "Test Message";

            var logPropertyList = new List<IPureLogPropertyLevel>()
            {
                new PureLogPropertyLevel(new KeyValuePair<string, object>(testProperty, testValue), LogLevel.Debug)
            };


            using (TestCorrelator.CreateContext())
            using (_pureSeriLogger.PushLogProperties(logPropertyList, IncludeLogPropertyFalse))
            {
                _pureSeriLogger.LogDebug(testLogMsg);

                var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();

                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(testProperty).Should().BeFalse();
                
                currentTestContext.Should().ContainSingle().Which.MessageTemplate.Text.Should().Be(testLogMsg);

            }
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_LogPropertyList_Include_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_LogPropertyList_Include_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushLogProperties(null, IncludeLogPropertyTrue);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logPropertyList");
        }

        /// <summary>
        /// Defines the test method PureSeriLogger_PushLogProperties_Include_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushLogProperties_Include_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushLogProperties(new List<IPureLogPropertyLevel>(), null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("includeLogProperty");
        }


        /// <summary>
        /// Defines the test method PureSeriLogger_PushProperty.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushProperty()
        {
            const string testProperty = "Property";
            const string testValue = "Value";
            const string testLogMsg = "Test Message";

            using (TestCorrelator.CreateContext())
            using (_pureSeriLogger.PushProperty(testProperty, testValue))
            {
                _pureSeriLogger.LogDebug(testLogMsg);

                var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();
            
                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(testProperty).Should().BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties[testProperty].ToString().Should().Be(testValue.ToDoubleQuoted());
            
                currentTestContext.Should().ContainSingle().Which.MessageTemplate.Text.Should().Be(testLogMsg);

            }
        }



        /// <summary>
        /// Defines the test method PureSeriLogger_PushProperty_PropertyName_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushProperty_PropertyName_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushProperty(null, string.Empty);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("propertyName");
        }


        /// <summary>
        /// Defines the test method PureSeriLogger_PushProperty_Value_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLogger_PushProperty_Value_Null()
        {
            Func<IDisposable> fx = () => _pureSeriLogger.PushProperty("Property", (string)null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("value");
        }

        [Fact]
        public void PureSeriLogger_LogContext_CreateLogScope()
        {
            var pureSeriLogContext = new PureSeriLogContext();
            const string testProperty = "Property";
            const string testValue = "Value";
            const string testLogMsg = "Test Message";

            var logPropertyList = new List<KeyValuePair<string, string>>()
            {
               new KeyValuePair<string, string>(testProperty, testValue)
            };

            using (TestCorrelator.CreateContext())
            using (pureSeriLogContext.CreateLogScope(logPropertyList))
            {
                _pureSeriLogger.LogDebug(testLogMsg);

                var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();

                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(testProperty).Should().BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties[testProperty].ToString().Should().Be(testValue.ToDoubleQuoted());

                currentTestContext.Should().ContainSingle().Which.MessageTemplate.Text.Should().Be(testLogMsg);
            }
        }


        [Fact]
        public void PureSeriLogger_LogContext_CreateLogScope_Null()
        {
            var pureSeriLogContext = new PureSeriLogContext();
            Func<IDisposable> fx = () => pureSeriLogContext.CreateLogScope(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("properties");
        }
    }
}