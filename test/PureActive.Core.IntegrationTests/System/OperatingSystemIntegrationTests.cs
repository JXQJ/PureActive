// ***********************************************************************
// Assembly         : PureActive.Core.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="OperatingSystemIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Diagnostics.CodeAnalysis;
using FluentAssertions;
using PureActive.Core.Abstractions.System;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;
using OperatingSystem = PureActive.Core.System.OperatingSystem;

namespace PureActive.Core.IntegrationTests.System
{
    /// <summary>
    /// Class OperatingSystemIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{OperatingSystemIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{OperatingSystemIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class OperatingSystemIntegrationTests : TestBaseLoggable<OperatingSystemIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperatingSystemIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public OperatingSystemIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _operatingSystem = new OperatingSystem();
        }

        /// <summary>
        /// The operating system
        /// </summary>
        /// <autogeneratedoc />
        private readonly IOperatingSystem _operatingSystem;

        /// <summary>
        /// Defines the test method OperatingSystem_IsLinux.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        [ExcludeFromCodeCoverage]
        public void OperatingSystem_IsLinux()
        {
            var osVersion = Environment.OSVersion;

            if (_operatingSystem.IsLinux())
                osVersion.Platform.Should().Be(PlatformID.Unix);
        }

        /// <summary>
        /// Defines the test method OperatingSystem_IsOsx.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        [ExcludeFromCodeCoverage]
        public void OperatingSystem_IsOsx()
        {
            var osVersion = Environment.OSVersion;

            if (_operatingSystem.IsOsx())
                osVersion.Platform.Should().Be(PlatformID.MacOSX);
        }


        /// <summary>
        /// Defines the test method OperatingSystem_IsWindows.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        [ExcludeFromCodeCoverage]
        public void OperatingSystem_IsWindows()
        {
            var osVersion = Environment.OSVersion;

            if (_operatingSystem.IsWindows())
            {
                Assert.True(osVersion.Platform == PlatformID.Win32NT || osVersion.Platform == PlatformID.Win32S ||
                            osVersion.Platform == PlatformID.Win32Windows);
            }
        }
    }
}