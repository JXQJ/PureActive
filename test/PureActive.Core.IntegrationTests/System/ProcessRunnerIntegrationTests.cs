// ***********************************************************************
// Assembly         : PureActive.Core.IntegrationTests
// Author           : SteveBu
// Created          : 11-19-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ProcessRunnerIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Abstractions.System;
using PureActive.Core.System;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.IntegrationTests.System
{
    /// <summary>
    /// Class ProcessRunnerIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ProcessRunnerIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ProcessRunnerIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class ProcessRunnerIntegrationTests : TestBaseLoggable<ProcessRunnerIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRunnerIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ProcessRunnerIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _processRunner = new ProcessRunner(TestLoggerFactory.CreatePureLogger<ProcessRunner>());
            _fileSystem = new FileSystem(typeof(ProcessRunnerIntegrationTests));
        }

        /// <summary>
        /// The process runner
        /// </summary>
        /// <autogeneratedoc />
        private readonly IProcessRunner _processRunner;
        /// <summary>
        /// The file system
        /// </summary>
        /// <autogeneratedoc />
        private readonly IFileSystem _fileSystem;

        /// <summary>
        /// Defines the test method ProcessRunner_RunProcessAsync_ArpTest_InstantTimeout.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ProcessRunner_RunProcessAsync_ArpTest_InstantTimeout()
        {
            var arpCommandPath = _fileSystem.ArpCommandPath();
            var args = new[] {"-a"};

            var result = await _processRunner.RunProcessAsync(arpCommandPath, args, new TimeSpan(10));
            result.Should().NotBeNull().And.Subject.Should().BeOfType(typeof(ProcessResult));
            result.Completed.Should().BeFalse();
            result.Output.Trim().Should().BeNullOrEmpty();
        }

        /// <summary>
        /// Defines the test method ProcessRunner_RunProcessAsync_ArpTest_NoTimeout.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task ProcessRunner_RunProcessAsync_ArpTest_NoTimeout()
        {
            var arpCommandPath = _fileSystem.ArpCommandPath();
            var args = new[] {"-a"};

            var result = await _processRunner.RunProcessAsync(arpCommandPath, args, null);
            result.Should().NotBeNull().And.Subject.Should().BeOfType(typeof(ProcessResult));
            result.Completed.Should().BeTrue();
            result.Output.Should().NotBeNullOrEmpty();
        }
    }
}