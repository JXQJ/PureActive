// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ProcessRunnerUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Abstractions.System;
using PureActive.Core.System;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.System
{
    /// <summary>
    /// Class ProcessRunnerUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ProcessRunnerUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ProcessRunnerUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class ProcessRunnerUnitTests : TestBaseLoggable<ProcessRunnerUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRunnerUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ProcessRunnerUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _processRunner = new ProcessRunner(TestLoggerFactory.CreatePureLogger<ProcessRunner>());
            _fileSystem = new FileSystem(typeof(ProcessRunnerUnitTests));
        }

        /// <summary>
        /// The process runner
        /// </summary>
        /// <autogeneratedoc />
        private readonly IProcessRunner _processRunner;
        /// <summary>
        /// The file system
        /// </summary>
        /// <autogeneratedoc />
        private readonly IFileSystem _fileSystem;

        /// <summary>
        /// Defines the test method ProcessRunner_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ProcessRunner_Constructor()
        {
            _processRunner.Should().NotBeNull().And.Subject.Should().BeOfType(typeof(ProcessRunner));
            _fileSystem.Should().NotBeNull().And.Subject.Should().BeOfType(typeof(FileSystem));
        }

        /// <summary>
        /// Defines the test method ProcessRunner_RunProcessAsync_Empty_Path.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ProcessRunner_RunProcessAsync_Empty_Path()
        {
            Func<Task> act = async () => await _processRunner.RunProcessAsync("", new string[1], null);
            act.Should().Throw<InvalidOperationException>();
        }

        /// <summary>
        /// Defines the test method ProcessRunner_RunProcessAsync_Null_Args.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ProcessRunner_RunProcessAsync_Null_Args()
        {
            var arpCommandPath = _fileSystem.ArpCommandPath();

            Func<Task> act = async () => await _processRunner.RunProcessAsync(arpCommandPath, null, null);
            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("args");
        }


        /// <summary>
        /// Defines the test method ProcessRunner_RunProcessAsync_Null_Path.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ProcessRunner_RunProcessAsync_Null_Path()
        {
            Func<Task> act = async () => await _processRunner.RunProcessAsync(null, new string[1], null);
            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("path");
        }
    }
}