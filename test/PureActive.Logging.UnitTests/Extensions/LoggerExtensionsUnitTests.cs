// ***********************************************************************
// Assembly         : PureActive.Logging.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="LoggerExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using PureActive.Core.Extensions;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Logging.Extensions.Extensions;
using PureActive.Logging.Extensions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Sinks.TestCorrelator;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Logging.UnitTests.Extensions
{
    /// <summary>
    /// Class LoggerExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{LoggerExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{LoggerExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class LoggerExtensionsUnitTests : TestBaseLoggable<LoggerExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoggerExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public LoggerExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }
        
        private const string TestLogMsg = "Test Log";
        private const string TestProperty = "StringValue";
        private const string TestPropertyParent = "ParentStringValue";
        private const string TestValue = "TestString";
        private const string ParentTestValue = "ParentTestString";

        [ExcludeFromCodeCoverage]
        private class TestLoggableParent : PureLoggableBase<TestLoggableParent>
        {
            public TestLoggableParent(string parentStringValue, IPureLoggerFactory loggerFactory, IPureLogger logger = null) :
                base(loggerFactory, logger)
            {
                ParentStringValue = parentStringValue;
            }

            public string ParentStringValue { get; set; }

            public override IEnumerable<IPureLogPropertyLevel> GetLogPropertyListLevel(LogLevel logLevel,
                LoggableFormat loggableFormat)
            {
                var logPropertyLevels = loggableFormat.IsWithParents()
                    ? base.GetLogPropertyListLevel(logLevel, loggableFormat)?.ToList()
                    : new List<IPureLogPropertyLevel>();

                if (logLevel <= LogLevel.Debug)
                {
                    logPropertyLevels?.Add(new PureLogPropertyLevel(nameof(ParentStringValue), ParentStringValue, LogLevel.Information));

                }

                return logPropertyLevels?.Where(p => p.MinimumLogLevel.CompareTo(logLevel) >= 0);
            }
        }


        [ExcludeFromCodeCoverage]
        private class TestLoggable : TestLoggableParent
        {
            /// <inheritdoc />
            public TestLoggable(string stringValue, IPureLoggerFactory loggerFactory, IPureLogger logger = null) :
                base(ParentTestValue, loggerFactory, logger)
            {
                StringValue = stringValue;
            }

            public string StringValue { get; set; }

            /// <summary>
            /// Gets the log property list level.
            /// </summary>
            /// <param name="logLevel">The log level.</param>
            /// <param name="loggableFormat">The loggable format.</param>
            /// <returns>IEnumerable&lt;IPureLogPropertyLevel&gt;.</returns>
            /// <autogeneratedoc />
            public override IEnumerable<IPureLogPropertyLevel> GetLogPropertyListLevel(LogLevel logLevel, LoggableFormat loggableFormat)
            {
                var logPropertyLevels = loggableFormat.IsWithParents()
                    ? base.GetLogPropertyListLevel(logLevel, loggableFormat)?.ToList()
                    : new List<IPureLogPropertyLevel>();

                if (logLevel <= LogLevel.Information)
                {
                    logPropertyLevels?.Add(new PureLogPropertyLevel(nameof(StringValue), StringValue,
                        LogLevel.Information));

                }

                return logPropertyLevels?.Where(p => p.MinimumLogLevel.CompareTo(logLevel) >= 0);
            }
        }

        private TestLoggable CreateTestLoggable(string testString)
        {
            return new TestLoggable(testString, TestLoggerFactory, Logger);
        }

        private TestLoggable CreateTestLoggable() => CreateTestLoggable(TestValue);

        private IEnumerable<KeyValuePair<string, object>> CreateTestPropertyList(LogLevel logLevel, LoggableFormat loggableFormat)
        {
            var testPropertyList = new List<KeyValuePair<string, object>>();

            if (logLevel <= LogLevel.Information)
            {
                testPropertyList.Add(new KeyValuePair<string, object>(TestProperty, TestValue));
            }


            if (loggableFormat.IsWithParents() && logLevel <= LogLevel.Debug)
            {
                testPropertyList.Add(new KeyValuePair<string, object>(TestPropertyParent, ParentTestValue));
            }
  
            return testPropertyList;
        }


        private void ValidateTestLog(LogLevel logLevel, LoggableFormat loggableFormat)
        {
            var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();

            if (logLevel <= LogLevel.Information)
            {
                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(TestProperty).Should()
                    .BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties[TestProperty].ToString().Should()
                    .Be(TestValue.ToDoubleQuoted());
            }
            else
            {
                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(TestProperty).Should()
                    .BeFalse();
            }

            if (loggableFormat.IsWithParents() && logLevel <= LogLevel.Debug)
            {
                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(TestPropertyParent).Should().BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties[TestPropertyParent].ToString().Should().Be(ParentTestValue.ToDoubleQuoted());
            }
            else
            {
                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey(TestPropertyParent).Should().BeFalse();
            }

            currentTestContext.Should().ContainSingle().Which.MessageTemplate.Text.Should().Be(TestLogMsg);
        }


        /// <summary>
        /// Defines the test method LoggerExtensions_BeginPropertyScope.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void LoggerExtensions_BeginPropertyScope()
        {
            using (Logger.BeginPropertyScope("PropertyInt", 14))
            {
                Logger.LogDebug("Log Int Property Scope");
            }
        }

        /// <summary>
        /// Defines the test method LoggerExtensions_BeginPropertyScope.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void LoggerExtensions_BeginPropertyScope_Type()
        {
            using (Logger.BeginPropertyScope<Enum>("PropertyInt", LoggableFormat.None))
            {
                Logger.LogDebug("Log LoggableFormat.None Property Scope");
            }
        }

        /// <summary>
        /// Defines the test method LoggerExtensions StringBuilder is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void LoggerExtensions_FormatPropertyList_StringBuilder_Null()
        {
            Action act = () =>
                PureLogPropertyLevel.FormatPropertyList(null, LoggableFormat.None, new IPureLogPropertyLevel[0]);
            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("sb");
        }

        /// <summary>
        /// Defines the test method LoggerExtensions logPropertyEnumerable is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void LoggerExtensions_FormatPropertyList_LogPropertyEnumerable_Null()
        {
            Action act = () => PureLogPropertyLevel.FormatPropertyList(new StringBuilder(), LoggableFormat.None, null);
            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logPropertyEnumerable");
        }

        /// <summary>
        /// Defines the test method LoggerExtensions logPropertyEnumerable is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void LoggerExtensions_PureLogProperty_String_Object()
        {
            var pureLogProperty = new PureLogProperty("property", "value");
            pureLogProperty.Should().NotBeNull();
            pureLogProperty.Key.Should().Be("property");
            pureLogProperty.Value.Should().Be("value");

        }


        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable where Loggable is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_Loggable_Null()
        {
            Func<IDisposable> fx = () => ((IPureLoggable)null).PushLogProperties(LogLevel.Debug, LoggableFormat.ToStringWithParents);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("loggable");
        }

        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable where Loggable is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_PureLogLevel_Null()
        {
            Func<IDisposable> fx = () => ((IPureLoggable)null).PushLogProperties(LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator));
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("loggable");

            var testLoggable = CreateTestLoggable();

            fx = () =>
                testLoggable.PushLogProperties(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("pureLogLevel");
        }

        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable where Loggable is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_Parents_PureLogLevel_Null()
        {
            Func<IDisposable> fx = () => ((IPureLoggable)null).PushLogPropertiesParents(LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator));
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("loggable");

            var testLoggable = CreateTestLoggable();

            fx = () =>
                testLoggable.PushLogPropertiesParents(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("pureLogLevel");
        }


        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable where Logger is null
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_Logger_Null()
        {
            var pureLoggable = new Mock<IPureLoggable>();
           
            Func<IDisposable> fx = () => pureLoggable.Object.PushLogProperties(LogLevel.Debug, LoggableFormat.ToStringWithParents);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("Logger");
        }



        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable
        /// Logging To String WithParents
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_ToString()
        {
            var testLoggable = CreateTestLoggable();

            testLoggable.Should().NotBeNull();
            testLoggable.StringValue.Should().NotBeNullOrEmpty().And.Subject.Should().Be(TestValue);

            using (TestCorrelator.CreateContext())
            using (testLoggable.PushLogProperties(LogLevel.Debug, LoggableFormat.ToString))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToString);
            }
        }

        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable
        /// Logging To String WithParents
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_ToString_WithParents()
        {
            var testLoggable = CreateTestLoggable();
            
            testLoggable.Should().NotBeNull();
            testLoggable.StringValue.Should().NotBeNullOrEmpty().And.Subject.Should().Be(TestValue);

            using(TestCorrelator.CreateContext())
            using (testLoggable.PushLogProperties(LogLevel.Debug, LoggableFormat.ToStringWithParents))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToStringWithParents);
            }
        }

        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable
        /// Logging To String WithParents
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_ToString_WithParents_Information()
        {
            var testLoggable = CreateTestLoggable();

            testLoggable.Should().NotBeNull();
            testLoggable.StringValue.Should().NotBeNullOrEmpty().And.Subject.Should().Be(TestValue);

            using (TestCorrelator.CreateContext())
            using (testLoggable.PushLogProperties(LogLevel.Information, LoggableFormat.ToStringWithParents))
            {
                Logger.LogInformation(TestLogMsg);
                ValidateTestLog(LogLevel.Information, LoggableFormat.ToStringWithParents);
            }
        }


        /// <summary>
        /// Defines the test method LoggerExtensions PureLoggable
        /// Logging To String WithParents
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureLoggable_PushLogProperties_ToString_WithParents_Warning()
        {
            var testLoggable = CreateTestLoggable();

            testLoggable.Should().NotBeNull();
            testLoggable.StringValue.Should().NotBeNullOrEmpty().And.Subject.Should().Be(TestValue);

            using (TestCorrelator.CreateContext())
            using (testLoggable.PushLogProperties(LogLevel.Warning, LoggableFormat.ToStringWithParents))
            {
                Logger.LogWarning(TestLogMsg);
                ValidateTestLog(LogLevel.Warning, LoggableFormat.ToStringWithParents);
            }
        }

        [Fact]
        public void PureLogger_PropertyListLevel_PureLogLevel()
        {
            var testLoggable = CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (Logger.PushLogProperties(testLoggable.GetLogPropertyListLevel(LogLevel.Debug, LoggableFormat.ToLogWithParents), LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator)))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToLogWithParents);
            }
        }

        [Fact]
        public void PureLogger_PropertyListLevel_PureLogLevel_Null()
        {
            var testLoggable = CreateTestLoggable();

            Func<IDisposable> fx = () =>
                ((IPureLogger)null).PushLogProperties(
                    testLoggable.GetLogPropertyListLevel(LogLevel.Debug, LoggableFormat.ToLogWithParents),
                    LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator));

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");

            fx = () =>
                Logger.PushLogProperties(null, LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator));

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logPropertyList");

            fx = () =>
                Logger.PushLogProperties(testLoggable.GetLogPropertyListLevel(LogLevel.Debug, LoggableFormat.ToLogWithParents), (IPureLogLevel)null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("pureLogLevel");
        }


        [Fact]
        public void PureLogger_PushLogProperties()
        {
            var testLoggable = CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (testLoggable.PushLogProperties(LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator), LoggableFormat.ToLogWithParents))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToLogWithParents);
            }
        }

        [Fact]
        public void PureLogger_PushLogProperties_Null()
        {
            var testLoggable = CreateTestLoggable();

            Func<IDisposable> fx = () =>
                ((IPureLoggable)null).PushLogProperties(LoggerSettings.GetLogLevel(LoggingOutputFlags.TestCorrelator), LoggableFormat.ToLogWithParents);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("loggable");

            fx = () =>
                testLoggable.PushLogProperties(null, LoggableFormat.ToLogWithParents);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("pureLogLevel");
        }

        [Fact]
        public void PureLogger_PushLogPropertyDeconstruct_List()
        {
            CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (Logger.PushLogPropertyDeconstruct(CreateTestPropertyList(LogLevel.Debug, LoggableFormat.ToLogWithParents)))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToLogWithParents);
            }
        }

        [Fact]
        public void PureLogger_PushLogPropertyDeconstruct_List_Null()
        {
            Func<IDisposable> fx = () =>
                ((IPureLogger)null).PushLogPropertyDeconstruct(CreateTestPropertyList(LogLevel.Debug, LoggableFormat.ToLogWithParents));

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");

            fx = () =>
                Logger.PushLogPropertyDeconstruct(null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("properties");
        }


        [Fact]
        public void PureLogger_PushLogPropertyDeconstruct_PropertyValue()
        {
            CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (Logger.PushLogPropertyDeconstruct(TestProperty, TestValue))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToLog);
            }
        }

        [Fact]
        public void PureLogger_PushLogProperty_PropertyValue_Null()
        {
            Func<IDisposable> fx = () =>
                ((IPureLogger)null).PushLogPropertyDeconstruct(TestProperty, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");

            fx = () =>
                Logger.PushLogPropertyDeconstruct(null, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("propertyName");

            fx = () =>
                Logger.PushLogPropertyDeconstruct(TestProperty, null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("value");
        }


        [Fact]
        public void PureLogger_PushLogProperty_PropertyValue()
        {
            CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (Logger.PushLogProperty(TestProperty, TestValue))
            {
                Logger.LogDebug(TestLogMsg);
                ValidateTestLog(LogLevel.Debug, LoggableFormat.ToLog);
            }
        }

        [Fact]
        public void PureLogger_PushLogProperty_Null()
        {
            Func<IDisposable> fx = () =>
                ((IPureLogger)null).PushLogProperty(TestProperty, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");

            fx = () =>
                Logger.PushLogProperty(null, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("propertyName");

            fx = () =>
                Logger.PushLogProperty(TestProperty, null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("value");
        }

        [Fact]
        public void PureLogger_BeginPropertyScope_Property_Object()
        {
            CreateTestLoggable();

            using (TestCorrelator.CreateContext())
            using (Logger.BeginPropertyScope(TestProperty, TestValue))
            {
                Logger.LogDebug(TestLogMsg);

                var currentTestContext = TestCorrelator.GetLogEventsFromCurrentContext().ToList();

                currentTestContext.Should().ContainSingle().Which.Properties.ContainsKey("Scope").Should().BeTrue();
                currentTestContext.Should().ContainSingle().Which.Properties["Scope"].ToString().Should().Be($"[[({TestProperty.ToDoubleQuoted()}: {TestValue.ToDoubleQuoted()})]]");
            }
        }


        [Fact]
        public void PureLogger_BeginPropertyScope_Property_Object_Null()
        {
            Func<IDisposable> fx = () =>
                ((IPureLogger)null).BeginPropertyScope(TestProperty, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logger");

            fx = () =>
                Logger.BeginPropertyScope(null, TestValue);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("propertyName");

            fx = () =>
                Logger.BeginPropertyScope(TestProperty, (string)null);

            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("value");
        }



   }
}