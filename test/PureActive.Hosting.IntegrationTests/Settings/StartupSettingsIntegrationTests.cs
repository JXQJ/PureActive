// ***********************************************************************
// Assembly         : PureActive.Core.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-29-2018
// ***********************************************************************
// <copyright file="StartupSettingsIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.ApplicationInsights.Channel;
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using PureActive.Core.Abstractions.System;
using PureActive.Core.Serialization;
using PureActive.Hosting.Abstractions.Settings;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.Configuration;
using PureActive.Hosting.Settings;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Events;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Hosting.IntegrationTests.Settings
{
    /// <summary>
    /// Class StartupSettingsIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{StartupSettingsIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{StartupSettingsIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class StartupSettingsIntegrationTests : TestBaseLoggable<StartupSettingsIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StartupSettingsIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public StartupSettingsIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {

        }

        [ExcludeFromCodeCoverage]
        private class StartupTelemetryInitializer : ITelemetryInitializer
        {
            /// <inheritdoc />
            public void Initialize(ITelemetry telemetry)
            {

            }
        }

        [ExcludeFromCodeCoverage]
        private class StartupTest : StartupSettings
        {
            /// <inheritdoc />
            public StartupTest(IConfiguration configuration, IHostingEnvironment hostingEnvironment,
                IPureLoggerFactory loggerFactory, IFileSystem fileSystem, IOperatingSystem operatingSystem) :
                base(configuration, hostingEnvironment, loggerFactory, ServiceHost.StartupSettingsTest, fileSystem,
                    operatingSystem)
            {

            }

            /// <inheritdoc />
            public override void ApplyDatabaseMigrations(IApplicationBuilder app)
            {

            }

            // This method gets called by the runtime. Use this method to add services to the container.
            public IServiceProvider ConfigureServices(IServiceCollection services)
            {
                if (services == null) throw new ArgumentNullException(nameof(services));

                var builder = RegisterSharedServices(services);

                // Register Shared Services
                builder.RegisterWebAppSettings(GetSection("StartupTestService"));

                builder.RegisterJsonSerialization(new TypeMapCollection());

                services.AddTelemetry(Configuration, typeof(StartupTelemetryInitializer));

                return BuildContainer(builder, services);
            }

            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                if (app == null) throw new ArgumentNullException(nameof(app));
                if (env == null) throw new ArgumentNullException(nameof(env));
            }

        }


        private static readonly string LogFileName = "startup-settings-test.log";

        private static IWebHost BuildWebHost<TStartup>(string[] args) where TStartup : class
        {
            var webHostBuilder = new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .ConfigureAppConfiguration((hostingContext, config) =>
                {
                    var env = hostingContext.HostingEnvironment;

                    config.AddAppSettings(env);
                    config.AddEnvironmentVariables();
                    config.AddCommandLine(args);
                });


            webHostBuilder
                .UseSystemSettings(LogFileName, IncludeLogEvent)
                .UseApplicationInsights()
                .UseStartup<TStartup>();

            
            return webHostBuilder.Build();
        }

        [ExcludeFromCodeCoverage]
        private static bool IncludeLogEvent(LogEvent logEvent)
        {
            return true;
        }


        [Fact]
        public void StartupSettings_Constructor()
        {
            var webHost = BuildWebHost<StartupTest>(new string[0]);
            webHost.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IWebHost>();

        }


        [Fact]
        public void StartupSettings_Properties()
        {
            var webHost = BuildWebHost<StartupTest>(new string[0]);
            webHost.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IWebHost>();

            var startupSettings = webHost.Services.GetService<IStartupSettings>();
            startupSettings.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IStartupSettings>();

            startupSettings.Configuration.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IConfiguration>();
            startupSettings.HostingEnvironment.Should().NotBeNull().And.Subject.Should()
                .BeAssignableTo<IHostingEnvironment>();
            startupSettings.LoggerFactory.Should().NotBeNull().And.Subject.Should()
                .BeAssignableTo<IPureLoggerFactory>();
            startupSettings.FileSystem.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IFileSystem>();
            startupSettings.OperatingSystem.Should().NotBeNull().And.Subject.Should()
                .BeAssignableTo<IOperatingSystem>();

            startupSettings.ServiceDatabaseConfig.Should().Be(ServiceDatabaseConfig.LocalHost);
            startupSettings.ServiceHost.Should().Be(ServiceHost.StartupSettingsTest);
            startupSettings.ServiceHostConfig.Should().Be(ServiceHostConfig.Kestrel);
        }

        [Fact]
        public void StartupSettings_Configuration()
        {
            var webHost = BuildWebHost<StartupTest>(new string[0]);
            webHost.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IWebHost>();
            var startupSettings = webHost.Services.GetService<IStartupSettings>();

            var appInsightsSection = startupSettings.GetSection("ApplicationInsights");
            appInsightsSection.Should().NotBeNull();

            var webAppHost = webHost.Services.GetService<WebAppHost>();
            webAppHost.Should().NotBeNull();
            webAppHost.HostName.Should().Be("https://pureactive.net");

            var webAppEmail = webHost.Services.GetService<WebAppEmail>();
            webAppEmail.Should().NotBeNull();
            webAppEmail.EmailAddress.Should().Be("no-reply@pureactive.net");

            var errorSettings = webHost.Services.GetService<ErrorSettings>();
            errorSettings.Should().NotBeNull();
            errorSettings.ShowExceptions.Should().BeTrue();

        }


        [Fact]
        public async Task StartupSettings_Run()
        {
            var webHost = BuildWebHost<StartupTest>(new string[0]);
            webHost.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IWebHost>();

            var cts = new CancellationTokenSource();

            cts.CancelAfter(500);
            await webHost.RunAsync(cts.Token);
            
        }
    }
}