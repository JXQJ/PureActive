// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog
// Author           : SteveBu
// Created          : 10-22-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="SerilogLogLevel.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.Extensions.Logging;
using PureActive.Logger.Provider.Serilog.Interfaces;
using Serilog.Core;
using Serilog.Events;

namespace PureActive.Logger.Provider.Serilog.Types
{
    /// <summary>
    /// Class SerilogLogLevel.
    /// Implements the <see cref="ISerilogLogLevel" />
    /// </summary>
    /// <seealso cref="ISerilogLogLevel" />
    /// <autogeneratedoc />
    public class SerilogLogLevel : ISerilogLogLevel
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogLevel"/> class.
        /// </summary>
        /// <param name="minimumLevelSerilog">The minimum level serilog.</param>
        /// <autogeneratedoc />
        public SerilogLogLevel(LogEventLevel minimumLevelSerilog)
        {
            InitialLogEventLevel = minimumLevelSerilog;
            LoggingLevelSwitch = new LoggingLevelSwitch(minimumLevelSerilog);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogLevel"/> class.
        /// </summary>
        /// <param name="minimumLevelMsft">The minimum level MSFT.</param>
        /// <autogeneratedoc />
        public SerilogLogLevel(LogLevel minimumLevelMsft) :
            this(MsftToSerilogLogLevel(minimumLevelMsft))
        {
        }

        /// <summary>
        /// Gets the logging level switch.
        /// </summary>
        /// <value>The logging level switch.</value>
        /// <autogeneratedoc />
        public LoggingLevelSwitch LoggingLevelSwitch { get; }

        /// <summary>
        /// Gets or sets the minimum log event level.
        /// </summary>
        /// <value>The minimum log event level.</value>
        /// <autogeneratedoc />
        public LogEventLevel MinimumLogEventLevel
        {
            get => LoggingLevelSwitch.MinimumLevel;
            set => LoggingLevelSwitch.MinimumLevel = value;
        }

        /// <summary>
        /// Gets or sets the initial log event level.
        /// </summary>
        /// <value>The initial log event level.</value>
        /// <autogeneratedoc />
        public LogEventLevel InitialLogEventLevel { get; set; }

        /// <summary>
        /// Gets or sets the minimum log level.
        /// </summary>
        /// <value>The minimum log level.</value>
        /// <autogeneratedoc />
        public LogLevel MinimumLogLevel
        {
            get => SerilogToMsftLogLevel(LoggingLevelSwitch.MinimumLevel);
            set => LoggingLevelSwitch.MinimumLevel = MsftToSerilogLogLevel(value);
        }

        /// <summary>
        /// Gets or sets the initial log level.
        /// </summary>
        /// <value>The initial log level.</value>
        /// <autogeneratedoc />
        public LogLevel InitialLogLevel
        {
            get => SerilogToMsftLogLevel(InitialLogEventLevel);
            set => InitialLogEventLevel = MsftToSerilogLogLevel(value);
        }

        /// <summary>
        /// MSFTs to serilog log level.
        /// </summary>
        /// <param name="logLevelMsft">The log level MSFT.</param>
        /// <returns>LogEventLevel.</returns>
        /// <autogeneratedoc />
        public static LogEventLevel MsftToSerilogLogLevel(LogLevel logLevelMsft)
        {
            switch (logLevelMsft)
            {
                case LogLevel.Critical:
                    return LogEventLevel.Fatal;

                case LogLevel.Error:
                    return LogEventLevel.Error;

                case LogLevel.Warning:
                    return LogEventLevel.Warning;

                case LogLevel.Information:
                    return LogEventLevel.Information;

                case LogLevel.Debug:
                    return LogEventLevel.Debug;

                // ReSharper disable once RedundantCaseLabel
                case LogLevel.Trace:
                default:
                    return LogEventLevel.Verbose;
            }
        }

        /// <summary>
        /// Serilogs to MSFT log level.
        /// </summary>
        /// <param name="logEventLevelSerilog">The log event level serilog.</param>
        /// <returns>LogLevel.</returns>
        /// <autogeneratedoc />
        public static LogLevel SerilogToMsftLogLevel(LogEventLevel logEventLevelSerilog)
        {
            switch (logEventLevelSerilog)
            {
                case LogEventLevel.Debug:
                    return LogLevel.Debug;

                case LogEventLevel.Information:
                    return LogLevel.Information;

                case LogEventLevel.Warning:
                    return LogLevel.Warning;

                case LogEventLevel.Error:
                    return LogLevel.Error;

                case LogEventLevel.Fatal:
                    return LogLevel.Critical;

                // ReSharper disable once RedundantCaseLabel
                case LogEventLevel.Verbose:
                default:
                    return LogLevel.Trace;
            }
        }
    }
}