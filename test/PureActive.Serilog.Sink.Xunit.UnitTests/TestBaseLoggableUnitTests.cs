// ***********************************************************************
// Assembly         : PureActive.Serilog.Sink.Xunit.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="TestBaseLoggableUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections.Generic;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions.Internal;
using Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions;
using PureActive.Core.Abstractions.System;
using PureActive.Core.System;
using PureActive.Serilog.Sink.Xunit.Sink;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Events;
using Serilog.Sinks.TestCorrelator;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Serilog.Sink.Xunit.UnitTests
{
    /// <summary>
    /// Class TestBaseLoggableUnitTests.
    /// Implements the <see cref="TestBase.TestBaseLoggable{TestBaseLoggableUnitTests}" />
    /// </summary>
    /// <seealso cref="TestBase.TestBaseLoggable{TestBaseLoggableUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class TestBaseLoggableUnitTests : TestBaseLoggable<TestBaseLoggableUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestBaseLoggableUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public TestBaseLoggableUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

      /// <summary>
        /// Defines the test method TestBaseLoggable_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TestBaseLoggable_Constructor_Default()
        {
            TestLoggerFactory.Should().NotBeNull("initialized in constructor");
            LoggerSettings.Should().NotBeNull("initialized in constructor");
            Logger.Should().NotBeNull("initialized in constructor");
            TestOutputHelper.Should().NotBeNull("initialized in constructor");
        }

        private class TestBaseLoggableTest : TestBaseLoggable<TestBaseLoggableUnitTests>
        {
            /// <inheritdoc />
            public TestBaseLoggableTest(IFileSystem fileSystem, ITestOutputHelper testOutputHelper, LogLevel initialMinimumLevel = LogLevel.Debug, XUnitSerilogFormatter xUnitSerilogFormatter = XUnitSerilogFormatter.RenderedCompactJsonFormatter) : 
                base(fileSystem, testOutputHelper, initialMinimumLevel, xUnitSerilogFormatter)
            {

            }

            /// <inheritdoc />
            public TestBaseLoggableTest(string appFolderName, IOperatingSystem operatingSystem, ITestOutputHelper testOutputHelper, LogLevel initialMinimumLevel = LogLevel.Debug, XUnitSerilogFormatter xUnitSerilogFormatter = XUnitSerilogFormatter.RenderedCompactJsonFormatter) : 
                base(appFolderName, operatingSystem, testOutputHelper, initialMinimumLevel, xUnitSerilogFormatter)
            {

            }

            /// <inheritdoc />
            public TestBaseLoggableTest(IOperatingSystem operatingSystem, ITestOutputHelper testOutputHelper, LogLevel initialMinimumLevel = LogLevel.Debug, XUnitSerilogFormatter xUnitSerilogFormatter = XUnitSerilogFormatter.RenderedCompactJsonFormatter) : 
                base(operatingSystem, testOutputHelper, initialMinimumLevel, xUnitSerilogFormatter)
            {

            }

            /// <inheritdoc />
            public TestBaseLoggableTest(string appFolderName, ITestOutputHelper testOutputHelper, LogLevel initialMinimumLevel = LogLevel.Debug, XUnitSerilogFormatter xUnitSerilogFormatter = XUnitSerilogFormatter.RenderedCompactJsonFormatter) : 
                base(appFolderName, testOutputHelper, initialMinimumLevel, xUnitSerilogFormatter)
            {

            }

            /// <inheritdoc />
            public TestBaseLoggableTest(ITestOutputHelper testOutputHelper, LogLevel initialMinimumLevel = LogLevel.Debug, XUnitSerilogFormatter xUnitSerilogFormatter = XUnitSerilogFormatter.RenderedCompactJsonFormatter) : 
                base(testOutputHelper, initialMinimumLevel, xUnitSerilogFormatter)
            {

            }
        }

        private const string AppFolderName = "TestBaseLoggableTest";


        /// <summary>
        /// Defines the test method TestBaseLoggable_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TestBaseLoggable_Constructor_NotNull()
        {
            var operatingSystem = new OperatingSystem();

            new TestBaseLoggableTest(FileSystem, TestOutputHelper).Should().NotBeNull();
            new TestBaseLoggableTest(AppFolderName, operatingSystem, TestOutputHelper).Should().NotBeNull();
            new TestBaseLoggableTest(operatingSystem, TestOutputHelper).Should().NotBeNull();
            new TestBaseLoggableTest(AppFolderName, TestOutputHelper).Should().NotBeNull();
            new TestBaseLoggableTest(TestOutputHelper).Should().NotBeNull();
        }

        /// <summary>
        /// Defines the test method TestBaseLoggable_Logger_SourceContext.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TestBaseLoggable_Logger_SourceContext()
        {
            Logger.Should().NotBeNull("initialized in constructor");

            using (TestCorrelator.CreateContext())
            {
                Logger.LogInformation("Test");

                TestCorrelator.GetLogEventsFromCurrentContext()
                    .Should().ContainSingle()
                    .Which.Properties["SourceContext"].ToString().Should()
                    .Be(TypeNameHelper.GetTypeDisplayName(typeof(TestBaseLoggableUnitTests)).AddDoubleQuote());
            }
        }

        /// <summary>
        /// Defines the test method TestBaseLoggable_Logger_TestCorrelator_Param_Int.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TestBaseLoggable_Logger_TestCorrelator_Param_Int()
        {
            Logger.Should().NotBeNull("initialized in constructor");

            using (TestCorrelator.CreateContext())
            {
                int count = 15;

                var dictionary = new Dictionary<string, LogEventPropertyValue>
                {
                    {"Count", new ScalarValue(count)}
                };

                Logger.LogInformation("{Count}", count);

                TestCorrelator.GetLogEventsFromCurrentContext()
                    .Should().ContainSingle()
                    .Which.MessageTemplate.Render(dictionary)
                    .Should().Be(count.ToString());
            }
        }


        /// <summary>
        /// Defines the test method TestBaseLoggable_Logger_TestCorrelator_String.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TestBaseLoggable_Logger_TestCorrelator_String()
        {
            Logger.Should().NotBeNull("initialized in constructor");

            using (TestCorrelator.CreateContext())
            {
                Logger.LogInformation("Test: TestBaseLoggable_Logger");

                TestCorrelator.GetLogEventsFromCurrentContext()
                    .Should().ContainSingle()
                    .Which.MessageTemplate.Text
                    .Should().Be("Test: TestBaseLoggable_Logger");
            }
        }
    }
}