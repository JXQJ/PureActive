// ***********************************************************************
// Assembly         : PureActive.Logging.Extensions
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PureLoggerExtensions.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;

namespace PureActive.Logging.Extensions.Extensions
{
    /// <summary>
    /// Class PureLoggerExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class PureLoggerExtensions
    {
        /// <summary>
        /// Begins the property scope.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="logger">The logger.</param>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable BeginPropertyScope<T>(this IPureLogger logger, string propertyName, T value)
        {
            return logger?.BeginScope(new Dictionary<string, T> {{propertyName, value}});
        }

        /// <summary>
        /// Pushes the log property.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        /// <param name="destructureObjects">if set to <c>true</c> [destructure objects].</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable PushLogProperty(this IPureLogger logger, string propertyName, object value,
            bool destructureObjects = false)
        {
            return logger.PushProperty(propertyName, value, destructureObjects);
        }

        /// <summary>
        /// Pushes the log property deconstruct.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable PushLogPropertyDeconstruct(this IPureLogger logger, string propertyName, object value)
        {
            return logger.PushProperty(propertyName, value, true);
        }


        /// <summary>
        /// Pushes the log property deconstruct.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="properties">The properties.</param>
        /// <returns>IDisposable.</returns>
        /// <exception cref="ArgumentNullException">properties</exception>
        /// <autogeneratedoc />
        public static IDisposable PushLogPropertyDeconstruct(this IPureLogger logger,
            IEnumerable<KeyValuePair<string, object>> properties)
        {
            if (properties == null) throw new ArgumentNullException(nameof(properties));

            return logger.PushLogProperties(properties, true);
        }


        /// <summary>
        /// Pushes the log properties.
        /// </summary>
        /// <param name="loggable">The loggable.</param>
        /// <param name="minimumLogLevel">The minimum log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>IDisposable.</returns>
        /// <exception cref="ArgumentNullException">
        /// loggable
        /// or
        /// Logger
        /// </exception>
        /// <autogeneratedoc />
        public static IDisposable PushLogProperties(this IPureLoggable loggable, LogLevel minimumLogLevel,
            LoggableFormat loggableFormat = LoggableFormat.ToLog)
        {
            if (loggable == null) throw new ArgumentNullException(nameof(loggable));
            if (loggable.Logger == null) throw new ArgumentNullException(nameof(loggable.Logger));

            return loggable.Logger.PushLogProperties(loggable.GetLogPropertyListLevel(minimumLogLevel, loggableFormat),
                minimumLogLevel);
        }

        /// <summary>
        /// Pushes the log properties parents.
        /// </summary>
        /// <param name="loggable">The loggable.</param>
        /// <param name="minimumLogLevel">The minimum log level.</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable PushLogPropertiesParents(this IPureLoggable loggable, LogLevel minimumLogLevel) =>
            PushLogProperties(loggable, minimumLogLevel, LoggableFormat.ToLogWithParents);


        /// <summary>
        /// Pushes the log properties.
        /// </summary>
        /// <param name="loggable">The loggable.</param>
        /// <param name="pureLogLevel">The pure log level.</param>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns>IDisposable.</returns>
        /// <exception cref="ArgumentNullException">loggable</exception>
        /// <autogeneratedoc />
        public static IDisposable PushLogProperties(this IPureLoggable loggable, IPureLogLevel pureLogLevel,
            LoggableFormat loggableFormat = LoggableFormat.ToLog)
        {
            if (loggable == null) throw new ArgumentNullException(nameof(loggable));

            return PushLogProperties(loggable, pureLogLevel.MinimumLogLevel, loggableFormat);
        }

        /// <summary>
        /// Pushes the log properties parents.
        /// </summary>
        /// <param name="loggable">The loggable.</param>
        /// <param name="pureLogLevel">The pure log level.</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable PushLogPropertiesParents(this IPureLoggable loggable, IPureLogLevel pureLogLevel) =>
            PushLogProperties(loggable, pureLogLevel, LoggableFormat.ToLogWithParents);


        /// <summary>
        /// Pushes the log properties.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="logPropertyList">The log property list.</param>
        /// <param name="pureLogLevel">The pure log level.</param>
        /// <returns>IDisposable.</returns>
        /// <exception cref="ArgumentNullException">
        /// logger
        /// or
        /// logPropertyList
        /// or
        /// pureLogLevel
        /// </exception>
        /// <autogeneratedoc />
        public static IDisposable PushLogProperties(this IPureLogger logger,
            IEnumerable<IPureLogPropertyLevel> logPropertyList, IPureLogLevel pureLogLevel)
        {
            if (logger == null) throw new ArgumentNullException(nameof(logger));
            if (logPropertyList == null) throw new ArgumentNullException(nameof(logPropertyList));
            if (pureLogLevel == null) throw new ArgumentNullException(nameof(pureLogLevel));

            return logger.PushLogProperties(logPropertyList, pureLogLevel.MinimumLogLevel);
        }

        /// <summary>
        /// Pushes the log properties.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="logPropertyLevelList">The log property level list.</param>
        /// <param name="minimumLogLevel">The minimum log level.</param>
        /// <returns>IDisposable.</returns>
        /// <autogeneratedoc />
        public static IDisposable PushLogProperties(this IPureLogger logger,
            IPureLogPropertyLevelList logPropertyLevelList, LogLevel minimumLogLevel) =>
            logger.PushLogProperties(logPropertyLevelList.GetLogPropertyLevelList(minimumLogLevel));
    }
}