// ***********************************************************************
// Assembly         : PureActive.Network.Extensions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPAddressRange.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections;
using System.Collections.Generic;
using System.Net;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.Types;

namespace PureActive.Network.Extensions.Network
{
    /// <summary>
    /// Class IPAddressRange.
    /// Implements the <see cref="System.Collections.Generic.IEnumerable{IPAddress}" />
    /// </summary>
    /// <seealso cref="System.Collections.Generic.IEnumerable{IPAddress}" />
    /// <autogeneratedoc />
    public class IPAddressRange : IEnumerable<IPAddress>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressRange"/> class.
        /// </summary>
        /// <param name="ipAddressLowerInclusive">The ip address lower inclusive.</param>
        /// <param name="ipAddressUpperInclusive">The ip address upper inclusive.</param>
        /// <autogeneratedoc />
        public IPAddressRange(IPAddress ipAddressLowerInclusive, IPAddress ipAddressUpperInclusive)
        {
            IpAddressLowerInclusive = ipAddressLowerInclusive;
            IpAddressUpperInclusive = ipAddressUpperInclusive;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressRange"/> class.
        /// </summary>
        /// <param name="ipAddressSubnet">The ip address subnet.</param>
        /// <autogeneratedoc />
        public IPAddressRange(IPAddressSubnet ipAddressSubnet)
        {
            IpAddressLowerInclusive = ipAddressSubnet.NetworkAddress;
            IpAddressUpperInclusive = ipAddressSubnet.BroadcastAddress;
        }

        /// <summary>
        /// Gets or sets the ip address lower inclusive.
        /// </summary>
        /// <value>The ip address lower inclusive.</value>
        /// <autogeneratedoc />
        public IPAddress IpAddressLowerInclusive { get; set; }
        /// <summary>
        /// Gets or sets the ip address upper inclusive.
        /// </summary>
        /// <value>The ip address upper inclusive.</value>
        /// <autogeneratedoc />
        public IPAddress IpAddressUpperInclusive { get; set; }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        /// <autogeneratedoc />
        public IEnumerator<IPAddress> GetEnumerator()
        {
            var ipAddress = IpAddressLowerInclusive;
            var ipAddressStop = IpAddressUpperInclusive.Increment();

            while (!ipAddress.Equals(ipAddressStop))
            {
                yield return ipAddress;
                ipAddress = ipAddress.Increment();
            }
        }

        /// <summary>
        /// Returns an enumerator that iterates through a collection.
        /// </summary>
        /// <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        /// <autogeneratedoc />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <summary>
        /// Determines whether [is in range] [the specified address].
        /// </summary>
        /// <param name="address">The address.</param>
        /// <returns><c>true</c> if [is in range] [the specified address]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsInRange(IPAddress address)
        {
            if (address.AddressFamily != IpAddressLowerInclusive.AddressFamily)
            {
                return false;
            }

            byte[] lowerBytes = IpAddressLowerInclusive.GetAddressBytes();
            byte[] upperBytes = IpAddressUpperInclusive.GetAddressBytes();
            byte[] addressBytes = address.GetAddressBytes();
            bool lowerBoundary = true, upperBoundary = true;

            for (var i = 0; i < lowerBytes.Length && (lowerBoundary || upperBoundary); i++)
            {
                if (lowerBoundary && addressBytes[i] < lowerBytes[i] ||
                    upperBoundary && addressBytes[i] > upperBytes[i])
                {
                    return false;
                }

                lowerBoundary &= addressBytes[i] == lowerBytes[i];
                upperBoundary &= addressBytes[i] == upperBytes[i];
            }

            return true;
        }
    }
}