// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-02-2018
// ***********************************************************************
// <copyright file="IArpService.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;
using PureActive.Hosting.Abstractions.System;

namespace PureActive.Network.Abstractions.ArpService
{
    /// <summary>
    /// Interface IArpService
    /// Implements the <see cref="PureActive.Hosting.Abstractions.System.IHostedServiceInternal" />
    /// Implements the <see cref="System.Collections.Generic.IEnumerable{ArpItem}" />
    /// </summary>
    /// <seealso cref="PureActive.Hosting.Abstractions.System.IHostedServiceInternal" />
    /// <seealso cref="System.Collections.Generic.IEnumerable{ArpItem}" />
    /// <autogeneratedoc />
    public interface IArpService : IHostedServiceInternal, IEnumerable<ArpItem>
    {
        /// <summary>
        /// Gets or sets the timeout.
        /// </summary>
        /// <value>The timeout.</value>
        /// <autogeneratedoc />
        TimeSpan Timeout { get; set; }

        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <value>The count.</value>
        /// <autogeneratedoc />
        int Count { get; }

        /// <summary>
        /// Gets the last arp refresh status.
        /// </summary>
        /// <value>The last arp refresh status.</value>
        /// <autogeneratedoc />
        ArpRefreshStatus LastArpRefreshStatus { get; }
        /// <summary>
        /// Gets the last updated.
        /// </summary>
        /// <value>The last updated.</value>
        /// <autogeneratedoc />
        DateTimeOffset LastUpdated { get; }

        /// <summary>
        /// Clears the arp cache.
        /// </summary>
        /// <autogeneratedoc />
        void ClearArpCache();

        /// <summary>
        /// Refreshes the arp cache asynchronous.
        /// </summary>
        /// <param name="stoppingToken">The stopping token.</param>
        /// <param name="clearCache">if set to <c>true</c> [clear cache].</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        Task RefreshArpCacheAsync(CancellationToken stoppingToken, bool clearCache);
        /// <summary>
        /// Refreshes the arp cache asynchronous.
        /// </summary>
        /// <param name="clearCache">if set to <c>true</c> [clear cache].</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        Task RefreshArpCacheAsync(bool clearCache);

        /// <summary>
        /// Gets the arp item asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Task&lt;ArpItem&gt;.</returns>
        /// <autogeneratedoc />
        Task<ArpItem> GetArpItemAsync(IPAddress ipAddress, CancellationToken cancellationToken);
        /// <summary>
        /// Gets the arp item asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <returns>Task&lt;ArpItem&gt;.</returns>
        /// <autogeneratedoc />
        Task<ArpItem> GetArpItemAsync(IPAddress ipAddress);

        /// <summary>
        /// Gets the physical address asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Task&lt;PhysicalAddress&gt;.</returns>
        /// <autogeneratedoc />
        Task<PhysicalAddress> GetPhysicalAddressAsync(IPAddress ipAddress, CancellationToken cancellationToken);
        /// <summary>
        /// Gets the physical address asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <returns>Task&lt;PhysicalAddress&gt;.</returns>
        /// <autogeneratedoc />
        Task<PhysicalAddress> GetPhysicalAddressAsync(IPAddress ipAddress);

        /// <summary>
        /// Gets the physical address.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <returns>PhysicalAddress.</returns>
        /// <autogeneratedoc />
        PhysicalAddress GetPhysicalAddress(IPAddress ipAddress);

        /// <summary>
        /// Gets the ip address.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <param name="refreshCache">if set to <c>true</c> [refresh cache].</param>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetIPAddress(PhysicalAddress physicalAddress, bool refreshCache = false);
    }
}