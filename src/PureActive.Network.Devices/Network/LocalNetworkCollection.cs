// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="LocalNetworkCollection.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Abstractions.Local;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Abstractions.Types;

namespace PureActive.Network.Devices.Network
{
    /// <summary>
    /// Class LocalNetworkCollection.
    /// Implements the <see cref="ILocalNetworkCollection" />
    /// </summary>
    /// <seealso cref="ILocalNetworkCollection" />
    /// <autogeneratedoc />
    public class LocalNetworkCollection : ILocalNetworkCollection
    {
        /// <summary>
        /// The common network services
        /// </summary>
        /// <autogeneratedoc />
        private readonly ICommonNetworkServices _commonNetworkServices;
        /// <summary>
        /// The logger
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPureLogger _logger;
        /// <summary>
        /// The networks
        /// </summary>
        /// <autogeneratedoc />
        private readonly Dictionary<IPAddressSubnet, INetwork> _networks = new Dictionary<IPAddressSubnet, INetwork>();
        /// <summary>
        /// The primary network
        /// </summary>
        /// <autogeneratedoc />
        private INetwork _primaryNetwork;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalNetworkCollection"/> class.
        /// </summary>
        /// <param name="commonNetworkServices">The common network services.</param>
        /// <exception cref="ArgumentNullException">commonNetworkServices</exception>
        /// <autogeneratedoc />
        public LocalNetworkCollection(ICommonNetworkServices commonNetworkServices)
        {
            _commonNetworkServices =
                commonNetworkServices ?? throw new ArgumentNullException(nameof(commonNetworkServices));

            _logger = commonNetworkServices.LoggerFactory?.CreatePureLogger<LocalNetworkCollection>();
        }

        /// <summary>
        /// Gets the primary network.
        /// </summary>
        /// <value>The primary network.</value>
        /// <autogeneratedoc />
        public INetwork PrimaryNetwork
        {
            get => _primaryNetwork ?? (_primaryNetwork = GetPrimaryNetworkInternal());
            internal set => _primaryNetwork = value;
        }

        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <value>The count.</value>
        /// <autogeneratedoc />
        public int Count => _networks.Count;

        /// <summary>
        /// Adds the adapter to network.
        /// </summary>
        /// <param name="networkAdapter">The network adapter.</param>
        /// <returns>INetwork.</returns>
        /// <autogeneratedoc />
        public INetwork AddAdapterToNetwork(INetworkAdapter networkAdapter)
        {
            // Is the network up and have a Network Gateway
            if (networkAdapter.NetworkInterface.OperationalStatus == OperationalStatus.Up &&
                networkAdapter.NetworkInterface.NetworkInterfaceType != NetworkInterfaceType.Loopback &&
                networkAdapter.PrimaryAddressSubnet != null)
            {
                var networkAddressSubnet = networkAdapter.NetworkAddressSubnet;

                if (!_networks.TryGetValue(networkAddressSubnet, out var localNetwork))
                {
                    localNetwork = new LocalNetwork(_commonNetworkServices, networkAdapter);
                    _networks.Add(networkAddressSubnet, localNetwork);
                }

                localNetwork.AddAdapterToNetwork(networkAdapter);

                return localNetwork;
            }

            _logger?.LogTrace("AddAdapterToNetwork: NetworkAdapter ignored:\n{NetworkAdapter}", networkAdapter);

            return null;
        }

        /// <summary>
        /// Removes the network.
        /// </summary>
        /// <param name="network">The network.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public bool RemoveNetwork(INetwork network)
        {
            return _networks.Remove(network.NetworkIPAddressSubnet);
        }

        /// <summary>
        /// Removes the adapter from network.
        /// </summary>
        /// <param name="networkAdapter">The network adapter.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public bool RemoveAdapterFromNetwork(INetworkAdapter networkAdapter)
        {
            var networkAddressSubnet = networkAdapter.NetworkAddressSubnet;

            if (_networks.TryGetValue(networkAddressSubnet, out var localNetwork))
            {
                if (localNetwork.RemoveAdapterFromNetwork(networkAdapter))
                {
                    return localNetwork.AdapterCount != 0 || RemoveNetwork(localNetwork);
                }
            }

            _logger?.LogDebug("RemoveAdapterFromNetwork: networkAdapter not found");

            return false;
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        /// <autogeneratedoc />
        public IEnumerator<INetwork> GetEnumerator()
        {
            return _networks.Values.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through a collection.
        /// </summary>
        /// <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        /// <autogeneratedoc />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <summary>
        /// Gets the primary network internal.
        /// </summary>
        /// <returns>INetwork.</returns>
        /// <autogeneratedoc />
        private INetwork GetPrimaryNetworkInternal()
        {
            return _networks.FirstOrDefault().Value;
        }
    }
}