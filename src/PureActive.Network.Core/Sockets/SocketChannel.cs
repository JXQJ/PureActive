// ***********************************************************************
// Assembly         : PureActive.Network.Core
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="SocketChannel.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;

namespace PureActive.Network.Core.Sockets
{
    /// <summary>
    /// Represents a socket connection between two end points.
    /// Implements the <see cref="IDisposable" />
    /// </summary>
    /// <seealso cref="IDisposable" />
    public class SocketChannel : IDisposable
    {
        #region Events

        /// <summary>
        /// An internal error occured
        /// </summary>
        public event ErrorHandler ChannelError = delegate { };

        #endregion Events

        #region Private Properties

        /// <summary>
        /// The socket
        /// </summary>
        /// <autogeneratedoc />
        private Socket _socket;
        /// <summary>
        /// The message received
        /// </summary>
        /// <autogeneratedoc />
        private MessageHandler _messageReceived;
        /// <summary>
        /// The message sent
        /// </summary>
        /// <autogeneratedoc />
        private MessageHandler _messageSent;
        /// <summary>
        /// The client disconnected
        /// </summary>
        /// <autogeneratedoc />
        private DisconnectHandler _clientDisconnected;

        /// <summary>
        /// The connected
        /// </summary>
        /// <autogeneratedoc />
        private bool _connected;

        #endregion Private Properties

        #region Public Properties

        /// <summary>
        /// Gets address of the connected end point.
        /// </summary>
        /// <value>The remote endpoint.</value>
        public EndPoint RemoteEndpoint { get; set; }

        /// <summary>
        /// Gets socket for the connected end point.
        /// </summary>
        /// <value>The socket.</value>
        public Socket Socket
        {
            get { return _socket; }
        }

        /// <summary>
        /// Gets the logger.
        /// </summary>
        /// <value>The logger.</value>
        /// <autogeneratedoc />
        public IPureLogger Logger { get; }

        /// <summary>
        /// Identity of this channel
        /// </summary>
        /// <value>The channel identifier.</value>
        /// <remarks>Must be unique within a server.</remarks>
        public string ChannelId { get; private set; }

        /// <summary>
        /// Can be used to store information in the channel so that you can access it at later requests.
        /// </summary>
        /// <value>The data.</value>
        /// <remarks>All data is lost when the channel is closed.</remarks>
        public byte[] Data { get; set; }

        /// <summary>
        /// Gets if channel is connected
        /// </summary>
        /// <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        public bool IsConnected
        {
            get { return _connected; }
        }

        /// <summary>
        /// Channel got disconnected
        /// </summary>
        /// <value>The disconnected.</value>
        public DisconnectHandler Disconnected
        {
            get { return _clientDisconnected; }

            set
            {
                if (value == null)
                    _clientDisconnected = (x, e) => { };
                else
                    _clientDisconnected = value;
            }
        }

        /// <summary>
        /// Channel received a new message
        /// </summary>
        /// <value>The message received.</value>
        /// <exception cref="ArgumentException">You must have a MessageReceived delegate</exception>
        public MessageHandler MessageReceived
        {
            get => _messageReceived;
            set => _messageReceived = value ?? throw new ArgumentException("You must have a MessageReceived delegate");
        }

        /// <summary>
        /// Channel have sent a message
        /// </summary>
        /// <value>The message sent.</value>
        public MessageHandler MessageSent
        {
            get { return _messageSent; }

            set
            {
                if (value == null)
                {
                    _messageSent = (x, y) => { };
                    return;
                }

                _messageSent = value;
            }
        }

        /// <summary>
        /// The channel failed to complete an IO operation
        /// </summary>
        /// <value>The channel failure.</value>
        /// <remarks>The handler MUST close the connection once a reply have been sent.</remarks>
        public ErrorHandler ChannelFailure { get; set; }

        #endregion Public Properties

        #region Constructors / Deconstructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SocketChannel" /> class.
        /// </summary>
        /// <param name="logger">The logger.</param>
        public SocketChannel(IPureLogger logger)
        {
            ChannelId = Guid.NewGuid().ToString();
            RemoteEndpoint = new IPEndPoint(0, 0);

            _messageReceived = (channel, message) => { };
            _messageSent = (channel, message) => { };
            _clientDisconnected = (channel, exception) => { };

            ChannelFailure = (channel, error) => HandleDisconnect(SocketError.ProtocolNotSupported);
            Logger = logger;
        }

        /// <summary>
        /// Handles object cleanup for GC finalization.
        /// </summary>
        ~SocketChannel()
        {
            Dispose(false);
        }

        /// <summary>
        /// Handles object cleanup.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Handles object cleanup
        /// </summary>
        /// <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                _socket.Close();
                _socket = null;
            }
        }

        #endregion  Constructors / Deconstructors

        #region Methods

        /// <summary>
        /// Assign a socket to this channel
        /// </summary>
        /// <param name="socket">Connected socket for channel.</param>
        /// <exception cref="ArgumentNullException">socket</exception>
        /// <remarks>The channel will start receive new messages as soon as you've called assign.
        /// <para>
        /// You must have specified a <see cref="MessageReceived" /> delegate first.
        /// </para></remarks>
        public void Assign(Socket socket)
        {
            _socket = socket ?? throw new ArgumentNullException(nameof(socket));
            _connected = true;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="endPoint">An EndPoint that represents the remote device.</param>
        /// <returns>System.Int32.</returns>
        public int SendTo(byte[] message, EndPoint endPoint)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.SendTo(message, endPoint);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <param name="endPoint">An EndPoint that represents the remote device.</param>
        /// <returns>System.Int32.</returns>
        public int SendTo(byte[] message, SocketFlags socketFlags, EndPoint endPoint)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.SendTo(message, socketFlags, endPoint);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="size">The number of bytes to send.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <param name="endPoint">An EndPoint that represents the remote device.</param>
        /// <returns>System.Int32.</returns>
        public int SendTo(byte[] message, int size, SocketFlags socketFlags, EndPoint endPoint)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.SendTo(message, size, socketFlags, endPoint);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="size">The number of bytes to send.</param>
        /// <param name="offset">The position in the data buffer at which to begin sending data.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <param name="endPoint">An EndPoint that represents the remote device.</param>
        /// <returns>System.Int32.</returns>
        public int SendTo(byte[] message, int size, int offset, SocketFlags socketFlags, EndPoint endPoint)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.SendTo(message, size, offset, socketFlags, endPoint);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">A message type Socket Buffer that contains the data to be sent.</param>
        public void Send(SocketBuffer message)
        {
            Stream sendMessage = new MemoryStream(message.Buffer);
            Send(sendMessage);
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">A message type Stream that contains the data to be sent.</param>
        /// <returns>System.Int32.</returns>
        public int Send(Stream message)
        {
            byte[] sendBuffer = new byte[1460];
            int bytesSent = 0;
            try
            {
                if (message.Length > 0)
                {
                    int sentBytes;
                    message.Position = 0;
                    while ((sentBytes = message.Read(sendBuffer, 0, sendBuffer.Length)) > 0)
                    {
                        bytesSent += _socket.Send(sendBuffer, sentBytes, SocketFlags.None);
                    }

                    _socket.Close();
                    _connected = false;
                    _messageSent(this, new SocketEventArgs(_socket, Logger));
                }
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <returns>System.Int32.</returns>
        public int Send(byte[] message)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.Send(message);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <returns>System.Int32.</returns>
        public int Send(byte[] message, SocketFlags socketFlags)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.Send(message, socketFlags);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="size">The number of bytes to send.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <returns>System.Int32.</returns>
        public int Send(byte[] message, int size, SocketFlags socketFlags)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.Send(message, size, socketFlags);
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Send a new message to a connected socket.
        /// </summary>
        /// <param name="message">An array of type byte that contains the data to be sent.</param>
        /// <param name="offSet">The position in the data buffer at which to begin sending data.</param>
        /// <param name="size">The number of bytes to send.</param>
        /// <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        /// <returns>System.Int32.</returns>
        public int Send(byte[] message, int offSet, int size, SocketFlags socketFlags)
        {
            int bytesSent = 0;
            try
            {
                bytesSent = _socket.Send(message, offSet, size, socketFlags);
                _socket.Close();
                _connected = false;
                _messageSent(this, new SocketEventArgs(_socket, Logger));
            }
            catch (Exception ex)
            {
                ChannelFailure(this, ex);
            }

            return bytesSent;
        }

        /// <summary>
        /// Signal the channel to close.
        /// </summary>
        public void Close()
        {
            _socket.Close();
            _connected = false;
        }

        /// <summary>
        /// Detected a disconnect
        /// </summary>
        /// <param name="socketError">Socket failure reason.</param>
        protected void HandleDisconnect(SocketError socketError) =>
            HandleDisconnect(socketError, new SocketException((int) socketError));

        /// <summary>
        /// Detected a disconnect
        /// </summary>
        /// <param name="socketError">Socket failure reason.</param>
        /// <param name="exception">Why it was disconnected.</param>
        private void HandleDisconnect(SocketError socketError, Exception exception)
        {
            try
            {
                Logger.LogError(exception, "SocketChannel: HandleDisconnect with error: {SocketError}", socketError);
                _socket.Close();
                _connected = false;
                _clientDisconnected(this, exception);
            }
            catch (Exception ex)
            {
                ChannelError(this, ex);
            }
        }

        #endregion Methods
    }
}