// ***********************************************************************
// Assembly         : PureActive.Network.Services.NetworkMap
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkMapService.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.Hosting;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Abstractions.DhcpService.Interfaces;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Abstractions.NetworkMapService;

namespace PureActive.Network.Services.NetworkMap
{
    /// <summary>
    /// Class NetworkMapService.
    /// Implements the <see cref="Hosting.Hosting.HostedServiceInternal{NetworkMapService}" />
    /// Implements the <see cref="INetworkMapService" />
    /// </summary>
    /// <seealso cref="Hosting.Hosting.HostedServiceInternal{NetworkMapService}" />
    /// <seealso cref="INetworkMapService" />
    /// <autogeneratedoc />
    public class NetworkMapService : HostedServiceInternal<NetworkMapService>, INetworkMapService
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkMapService"/> class.
        /// </summary>
        /// <param name="networkMap">The network map.</param>
        /// <param name="dhcpService">The DHCP service.</param>
        /// <param name="applicationLifetime">The application lifetime.</param>
        /// <exception cref="ArgumentNullException">
        /// networkMap
        /// or
        /// dhcpService
        /// </exception>
        /// <autogeneratedoc />
        public NetworkMapService(INetworkMap networkMap, IDhcpService dhcpService, IApplicationLifetime applicationLifetime = null) :
            base(networkMap?.CommonServices, applicationLifetime, ServiceHost.NetworkMap)
        {
            NetworkMap = networkMap ?? throw new ArgumentNullException(nameof(networkMap));
            DhcpService = dhcpService ?? throw new ArgumentNullException(nameof(dhcpService));
        }


        /// <summary>
        /// Gets the DHCP service.
        /// </summary>
        /// <value>The DHCP service.</value>
        /// <autogeneratedoc />
        public IDhcpService DhcpService { get; }

        // Common Services
        /// <summary>
        /// Gets the network map.
        /// </summary>
        /// <value>The network map.</value>
        /// <autogeneratedoc />
        public INetworkMap NetworkMap { get; }

        /// <summary>
        /// Gets the common network services.
        /// </summary>
        /// <value>The common network services.</value>
        /// <autogeneratedoc />
        public ICommonNetworkServices CommonNetworkServices => NetworkMap?.CommonNetworkServices;

        /// <summary>
        /// Triggered when the application host is ready to start the service.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public override Task StartAsync(CancellationToken cancellationToken)
        {
            ServiceHostStatus = ServiceHostStatus.StartPending;
            var tasks = new List<Task>
            {
                CommonNetworkServices.StartAsync(cancellationToken),
                DhcpService.StartAsync(cancellationToken),
                NetworkMap.StartAsync(cancellationToken)
            };

            return tasks.WaitForTasksAction(cancellationToken,
                (t) =>
                {
                    if (t.IsCompleted && t.Status == TaskStatus.RanToCompletion)
                    {
                        ServiceHostStatus = ServiceHostStatus.Running;
                    }
                },
                Logger);
        }

        /// <summary>
        /// Triggered when the application host is performing a graceful shutdown.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public override Task StopAsync(CancellationToken cancellationToken)
        {
            var tasks = new List<Task>
            {
                NetworkMap.StopAsync(cancellationToken),
                CommonNetworkServices.StopAsync(cancellationToken),
                DhcpService.StopAsync(cancellationToken)
            };

            return tasks.WaitForTasksAction(cancellationToken, (t) =>
                {
                    if (t.IsCompleted)
                    {
                        ServiceHostStatus = ServiceHostStatus.Stopped;
                    }
                }
                , Logger);
        }

        /// <summary>
        /// Discovers the network devices.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public Task DiscoverNetworkDevices()
        {
            return Task.CompletedTask;
        }
    }
}