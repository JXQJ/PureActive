// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog.UnitTests
// Author           : SteveBu
// Created          : 11-25-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-25-2018
// ***********************************************************************
// <copyright file="PureSeriLoggerFactoryUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Reflection;
using FluentAssertions;
using Microsoft.ApplicationInsights.Channel;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using PureActive.Core.Extensions;
using PureActive.Core.System;
using PureActive.Logger.Provider.Serilog.Configuration;
using PureActive.Logger.Provider.Serilog.Settings;
using PureActive.Logger.Provider.Serilog.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Events;
using Xunit;
using Xunit.Abstractions;
using ILogger = Microsoft.Extensions.Logging.ILogger;

namespace PureActive.Logger.Provider.Serilog.UnitTests.Types
{

    /// <summary>
    /// Class PureSeriLoggerFactoryUnitTests.
    /// Implements the <see cref="PureSeriLoggerFactoryUnitTests" />
    /// </summary>
    /// <seealso cref="PureSeriLoggerFactoryUnitTests" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PureSeriLoggerFactoryUnitTests : TestBaseLoggable<PureSeriLoggerFactoryUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureSeriLoggerFactoryUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PureSeriLoggerFactoryUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _pureSeriLoggerFactory = new PureSeriLoggerFactory(TestLoggerFactory, LoggerSettings);
        }

        /// <summary>
        /// The pure seri logger factory
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPureLoggerFactory _pureSeriLoggerFactory;

        /// <summary>
        /// Defines the test method PureSeriLoggerFactory_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLoggerFactory_Constructor()
        {
           _pureSeriLoggerFactory.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPureLoggerFactory>();
        }


        /// <summary>
        /// Defines the test method PureSeriLoggerFactory_CreateLogger.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLoggerFactory_CreateLogger()
        {
            var logger = _pureSeriLoggerFactory.CreateLogger(nameof(PureSeriLoggerFactoryUnitTests));
            logger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ILogger>();
        }

        /// <summary>
        /// Defines the test method PureSeriLoggerFactory_CreateLogger_Type.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLoggerFactory_CreateLogger_Type()
        {
            var logger = _pureSeriLoggerFactory.CreateLogger<PureSeriLoggerFactoryUnitTests>();
            logger.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ILogger<PureSeriLoggerFactoryUnitTests>>();
        }


        /// <summary>
        /// Defines the test method PureSeriLoggerFactory_AddProvider_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureSeriLoggerFactory_AddProvider_Null()
        {
           _pureSeriLoggerFactory.AddProvider(null);
        }

        [Fact]
        public void PureSeriLoggerFactory_CreateSerilogFactory_Null()
        {
            Func<ILoggerFactory> fx = () => LoggerConfigurationFactory.CreateSerilogFactory(null);
            fx.Should().Throw<ArgumentException>().And.ParamName.Should().Be("loggerSettings");
        }

        [Fact]
        public void PureSeriLoggerFactory_CreateSerilogFactory_LoggerConfiguration()
        {
            var loggerSettings = new SerilogLoggerSettings(new FileSystem(typeof(PureSeriLoggerFactoryUnitTests)), LogEventLevel.Debug, LoggingOutputFlags.Default);

            var loggerFactory = LoggerConfigurationFactory.CreateSerilogFactory(loggerSettings);
            loggerFactory.Should().NotBeNull();

        }

        /// <summary>
        /// Includes the log property true.
        /// </summary>
        /// <param name="logEvent">logEvent to consider including in logs</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        [ExcludeFromCodeCoverage]
        private bool IncludeLogEventTrue(LogEvent logEvent) => true;

        /// <summary>
        /// Includes the log property true.
        /// </summary>
        /// <param name="logEvent">logEvent to consider including in logs</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        [ExcludeFromCodeCoverage]
        private bool IncludeLogEventFalse(LogEvent logEvent) => false;

        private static readonly string ApplicationInsightsKey = "2ea036ef-3992-4736-a5ec-75b6bfb2e714";

        [Fact]
        public void PureSeriLoggerFactory_CreateLoggerConfiguration()
        {
            var loggerSettings = new SerilogLoggerSettings(new FileSystem(typeof(PureSeriLoggerFactoryUnitTests)), LogEventLevel.Debug, LoggingOutputFlags.AppFull);

            var loggerFactory = LoggerConfigurationFactory.CreateLoggerConfiguration(
                ApplicationInsightsKey, "PureSeriLoggerFactoryUnitTests.log",
                loggerSettings, IncludeLogEventTrue);

            loggerFactory.Should().NotBeNull();
        }

        [Fact]
        public void PureSeriLoggerFactory_CreateLoggerConfiguration_Configuration()
        {
            var loggerSettings = new SerilogLoggerSettings(new FileSystem(typeof(PureSeriLoggerFactoryUnitTests)), LogEventLevel.Debug, LoggingOutputFlags.AppFull);

            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddEnvironmentVariables()
                .AddInMemoryCollection(
                    new Dictionary<string, string>
                    {
                        [$"{LoggerConfigurationFactory.SectionApplicationInsights}:{LoggerConfigurationFactory.InstrumentationKey}"] = ApplicationInsightsKey,
                    }
                )
                .Build();
            
            var loggerFactory = LoggerConfigurationFactory.CreateLoggerConfiguration(
                configuration, "PureSeriLoggerFactoryUnitTests.log",
                loggerSettings, IncludeLogEventTrue);

            loggerFactory.Should().NotBeNull();
        }

        private readonly MethodInfo _methodInfoConvertLogEventsToCustomTraceTelemetry = typeof(LoggerConfigurationFactory).GetMethod("ConvertLogEventsToCustomTraceTelemetry", BindingFlags.NonPublic | BindingFlags.Static);

        private ITelemetry InvokeConvertLogEventsToCustomTraceTelemetry(LogEvent logEvent, IFormatProvider formatProvider, Func<LogEvent, bool> includeLogEvent)
        {
            object[] parameters = { logEvent, formatProvider, includeLogEvent };

            return (ITelemetry)_methodInfoConvertLogEventsToCustomTraceTelemetry.Invoke(null, parameters);
        }

        [Fact]
        public void PureSeriLoggerFactory_ConvertLogEventsToCustomTraceTelemetry_LogEvent_Null()
        {
            Func<ITelemetry> fx = () => InvokeConvertLogEventsToCustomTraceTelemetry(null, null, null);
            fx.Should().Throw<TargetInvocationException>().And.InnerException.Message.Should()
                .Contain("Value cannot be null.");
        }

        private static readonly List<LogEventProperty> LogEventPropertyListOperations = new List<LogEventProperty>()
        {
            {new LogEventProperty(LoggerConfigurationFactory.OperationId, new ScalarValue(Guid.NewGuid().ToStringNoDashes())) },
            {new LogEventProperty(LoggerConfigurationFactory.RequestId, new ScalarValue(Guid.NewGuid().ToStringNoDashes())) }
        };

        [Fact]
        public void PureSeriLoggerFactory_ConvertLogEventsToCustomTraceTelemetry_OperationId()
        {
           var telemetry = InvokeConvertLogEventsToCustomTraceTelemetry(
                new LogEvent(DateTimeOffset.UtcNow, LogEventLevel.Debug, null, MessageTemplate.Empty, LogEventPropertyListOperations), null, IncludeLogEventTrue);

            telemetry.Should().NotBeNull().And.Subject.Should().BeAssignableTo<ITelemetry>();
        }

        [Fact]
        public void PureSeriLoggerFactory_ConvertLogEventsToCustomTraceTelemetry_DoNotInclude()
        {
            var telemetry = InvokeConvertLogEventsToCustomTraceTelemetry(
                new LogEvent(DateTimeOffset.UtcNow, LogEventLevel.Debug, null, MessageTemplate.Empty, LogEventPropertyListOperations), null, IncludeLogEventFalse);

            telemetry.Should().BeNull();
        }
    }
    
}