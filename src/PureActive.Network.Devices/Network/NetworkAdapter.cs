// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkAdapter.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Abstractions.Types;

namespace PureActive.Network.Devices.Network
{
    /// <summary>
    /// Class NetworkAdapter.
    /// Implements the <see cref="NetworkDeviceBase" />
    /// Implements the <see cref="INetworkAdapter" />
    /// </summary>
    /// <seealso cref="NetworkDeviceBase" />
    /// <seealso cref="INetworkAdapter" />
    /// <autogeneratedoc />
    public class NetworkAdapter : NetworkDeviceBase, INetworkAdapter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkAdapter"/> class.
        /// </summary>
        /// <param name="commonNetworkServices">The common network services.</param>
        /// <param name="networkInterface">The network interface.</param>
        /// <param name="logger">The logger.</param>
        /// <autogeneratedoc />
        public NetworkAdapter(ICommonNetworkServices commonNetworkServices, NetworkInterface networkInterface,
            IPureLogger logger = null) :
            base(commonNetworkServices, DeviceType.NetworkAdapter, logger)
        {
            NetworkInterface = networkInterface;
        }

        /// <summary>
        /// Gets the network interface.
        /// </summary>
        /// <value>The network interface.</value>
        /// <autogeneratedoc />
        public NetworkInterface NetworkInterface { get; }

        /// <summary>
        /// Gets the operational status.
        /// </summary>
        /// <value>The operational status.</value>
        /// <autogeneratedoc />
        public OperationalStatus OperationalStatus => NetworkInterface.OperationalStatus;
        /// <summary>
        /// Gets the type of the network interface.
        /// </summary>
        /// <value>The type of the network interface.</value>
        /// <autogeneratedoc />
        public NetworkInterfaceType NetworkInterfaceType => NetworkInterface.NetworkInterfaceType;
        /// <summary>
        /// Gets the ip properties.
        /// </summary>
        /// <value>The ip properties.</value>
        /// <autogeneratedoc />
        public IPInterfaceProperties IPProperties => NetworkInterface.GetIPProperties();

        /// <summary>
        /// Gets the network address subnet.
        /// </summary>
        /// <value>The network address subnet.</value>
        /// <autogeneratedoc />
        public IPAddressSubnet NetworkAddressSubnet => PrimaryAddressSubnet?.NetworkAddressSubnet;

        /// <summary>
        /// Gets the primary address subnet.
        /// </summary>
        /// <value>The primary address subnet.</value>
        /// <autogeneratedoc />
        public IPAddressSubnet PrimaryAddressSubnet
        {
            get
            {
                if (IPProperties.GatewayAddresses.IPv4OrDefault() == null) return null;

                foreach (var ipAddress in IPProperties.UnicastAddresses)
                {
                    if (ipAddress.Address.AddressFamily == AddressFamily.InterNetwork)
                    {
                        return new IPAddressSubnet(ipAddress.Address, ipAddress.IPv4Mask);
                    }
                }

                return null;
            }
        }

        /// <summary>
        /// Returns a <see cref="string" /> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        public override string ToString()
        {
            var sb = new StringBuilder()
                .Append("Network Adapter: ").AppendLine(NetworkInterface.Name)
                .Append("\tId: ").AppendLine(NetworkInterface.Id)
                .Append("\tPrimary Address Subnet: ").AppendLine(PrimaryAddressSubnet?.ToString() ?? "null")
                .Append("\tOperational Status: ").AppendLine(NetworkInterface.OperationalStatus.ToString())
                .Append("\tNetwork Interface Type: ").AppendLine(NetworkInterface.NetworkInterfaceType.ToString())
                .Append("\tDescription: ").AppendLine(NetworkInterface.Description);

            return sb.ToString();
        }
    }
}