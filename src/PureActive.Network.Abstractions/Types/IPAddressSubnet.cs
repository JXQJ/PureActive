// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPAddressSubnet.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using PureActive.Network.Abstractions.Extensions;

namespace PureActive.Network.Abstractions.Types
{
    /// <summary>
    /// Class IPAddressSubnet.
    /// Implements the <see cref="System.IComparable{IPAddressSubnet}" />
    /// Implements the <see cref="IComparable" />
    /// Implements the <see cref="System.IEquatable{IPAddressSubnet}" />
    /// </summary>
    /// <seealso cref="System.IComparable{IPAddressSubnet}" />
    /// <seealso cref="IComparable" />
    /// <seealso cref="System.IEquatable{IPAddressSubnet}" />
    /// <autogeneratedoc />
    public class IPAddressSubnet : IComparable<IPAddressSubnet>, IComparable, IEquatable<IPAddressSubnet>
    {
        /// <summary>
        /// The none
        /// </summary>
        /// <autogeneratedoc />
        public static readonly IPAddressSubnet None = new IPAddressSubnet(IPAddress.None, IPAddress.None);

        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressSubnet"/> class.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="subnetMask">The subnet mask.</param>
        /// <exception cref="ArgumentNullException">
        /// ipAddress
        /// or
        /// subnetMask
        /// </exception>
        /// <exception cref="ArgumentException">Only IPv4 addresses are supported - ipAddress</exception>
        /// <autogeneratedoc />
        public IPAddressSubnet(IPAddress ipAddress, IPAddress subnetMask)
        {
            IPAddress = ipAddress ?? throw new ArgumentNullException(nameof(ipAddress));
            SubnetMask = subnetMask ?? throw new ArgumentNullException(nameof(subnetMask));

            if (IPAddress.AddressFamily != AddressFamily.InterNetwork)
                throw new ArgumentException("Only IPv4 addresses are supported", nameof(ipAddress));

            NetworkAddress = ipAddress.GetNetworkAddress(subnetMask);
            BroadcastAddress = ipAddress.GetBroadcastAddress(subnetMask);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressSubnet"/> class.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <autogeneratedoc />
        public IPAddressSubnet(IPAddress ipAddress) : this(ipAddress, IPAddressExtensions.SubnetClassC)
        {
        }

        /// <summary>
        /// Gets the ip address.
        /// </summary>
        /// <value>The ip address.</value>
        /// <autogeneratedoc />
        public IPAddress IPAddress { get; }
        /// <summary>
        /// Gets the subnet mask.
        /// </summary>
        /// <value>The subnet mask.</value>
        /// <autogeneratedoc />
        public IPAddress SubnetMask { get; }
        /// <summary>
        /// Gets the network address.
        /// </summary>
        /// <value>The network address.</value>
        /// <autogeneratedoc />
        public IPAddress NetworkAddress { get; }
        /// <summary>
        /// Gets the broadcast address.
        /// </summary>
        /// <value>The broadcast address.</value>
        /// <autogeneratedoc />
        public IPAddress BroadcastAddress { get; }
        /// <summary>
        /// Gets the network address subnet.
        /// </summary>
        /// <value>The network address subnet.</value>
        /// <autogeneratedoc />
        public IPAddressSubnet NetworkAddressSubnet => new IPAddressSubnet(NetworkAddress, SubnetMask);

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns>System.Int32.</returns>
        /// <exception cref="ArgumentException">Object must be of type IPAddressSubnet.</exception>
        /// <autogeneratedoc />
        public int CompareTo(object obj)
        {
            if (!(obj is IPAddressSubnet))
                throw new ArgumentException("Object must be of type IPAddressSubnet.");

            return CompareTo((IPAddressSubnet) obj);
        }

        /// <summary>
        /// Compares to.
        /// </summary>
        /// <param name="other">The other.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int CompareTo(IPAddressSubnet other)
        {
            return other == null ? 1 : IPAddress.CompareTo(other.IPAddress);

            // Ignore Subnet Masks, Just compare IPAddress
        }

        /// <summary>
        /// Indicates whether the current object is equal to another object of the same type.
        /// </summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        /// <autogeneratedoc />
        public bool Equals(IPAddressSubnet other)
        {
            return CompareTo(other) == 0;
        }

        /// <summary>
        /// Determines whether [is address on same subnet] [the specified address].
        /// </summary>
        /// <param name="address">The address.</param>
        /// <returns><c>true</c> if [is address on same subnet] [the specified address]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsAddressOnSameSubnet(IPAddress address) => IPAddress.IsAddressOnSameSubnet(address, SubnetMask);

        /// <summary>
        /// Determines whether the specified <see cref="object" /> is equal to this instance.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public override bool Equals(object obj)
        {
            return CompareTo(obj) == 0;
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        /// <autogeneratedoc />
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = IPAddress != null ? IPAddress.GetHashCode() : 0;
                hashCode = (hashCode * 397) ^ (SubnetMask != null ? SubnetMask.GetHashCode() : 0);
                return hashCode;
            }
        }

        /// <summary>
        /// Returns a <see cref="string" /> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="string" /> that represents this instance.</returns>
        /// <autogeneratedoc />
        public override string ToString()
        {
            var sb = new StringBuilder().Append(IPAddress).Append(" (").Append(SubnetMask).Append(")");

            return sb.ToString();
        }
    }
}