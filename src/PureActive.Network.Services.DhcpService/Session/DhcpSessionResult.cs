// ***********************************************************************
// Assembly         : PureActive.Network.Services.DhcpService
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="DhcpSessionResult.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net;
using System.Net.NetworkInformation;
using PureActive.Network.Abstractions.DeviceInfo;
using PureActive.Network.Abstractions.DhcpService.Interfaces;
using PureActive.Network.Abstractions.DhcpService.Types;

namespace PureActive.Network.Services.DhcpService.Session
{
    /// <summary>
    /// Class DhcpSessionResult.
    /// Implements the <see cref="IDhcpSessionResult" />
    /// </summary>
    /// <seealso cref="IDhcpSessionResult" />
    /// <autogeneratedoc />
    public class DhcpSessionResult : IDhcpSessionResult
    {
        /// <summary>
        /// The DHCP discovered device
        /// </summary>
        /// <autogeneratedoc />
        private DhcpDiscoveredDevice _dhcpDiscoveredDevice;

        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpSessionResult"/> class.
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <param name="sessionId">The session identifier.</param>
        /// <autogeneratedoc />
        public DhcpSessionResult(PhysicalAddress physicalAddress, uint sessionId = 0)
        {
            Init(sessionId, DhcpSessionState.Init, physicalAddress);
        }

        /// <summary>
        /// Gets or sets the physical address.
        /// </summary>
        /// <value>The physical address.</value>
        /// <autogeneratedoc />
        public PhysicalAddress PhysicalAddress
        {
            get => DhcpDiscoveredDevice.PhysicalAddress;
            set
            {
                if (_dhcpDiscoveredDevice != null) _dhcpDiscoveredDevice.PhysicalAddress = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the host.
        /// </summary>
        /// <value>The name of the host.</value>
        /// <autogeneratedoc />
        public string HostName
        {
            get => DhcpDiscoveredDevice.HostName;
            set
            {
                if (_dhcpDiscoveredDevice != null) _dhcpDiscoveredDevice.HostName = value;
            }
        }

        /// <summary>
        /// Gets or sets the vendor class identifier.
        /// </summary>
        /// <value>The vendor class identifier.</value>
        /// <autogeneratedoc />
        public string VendorClassId
        {
            get => DhcpDiscoveredDevice.VendorClassId;
            set
            {
                if (_dhcpDiscoveredDevice != null) _dhcpDiscoveredDevice.VendorClassId = value;
            }
        }

        /// <summary>
        /// Gets or sets the ip address.
        /// </summary>
        /// <value>The ip address.</value>
        /// <autogeneratedoc />
        public IPAddress IpAddress
        {
            get => DhcpDiscoveredDevice.IpAddress;
            set
            {
                if (_dhcpDiscoveredDevice != null) _dhcpDiscoveredDevice.IpAddress = value;
            }
        }

        /// <summary>
        /// Gets the DHCP discovered device.
        /// </summary>
        /// <value>The DHCP discovered device.</value>
        /// <autogeneratedoc />
        public IDhcpDiscoveredDevice DhcpDiscoveredDevice
        {
            get => _dhcpDiscoveredDevice ??
                   (_dhcpDiscoveredDevice = new DhcpDiscoveredDevice(SessionId, PhysicalAddress.None));
        }

        /// <summary>
        /// Gets or sets the session identifier.
        /// </summary>
        /// <value>The session identifier.</value>
        /// <autogeneratedoc />
        public uint SessionId { get; set; }

        /// <summary>
        /// Gets or sets the DHCP session state current.
        /// </summary>
        /// <value>The DHCP session state current.</value>
        /// <autogeneratedoc />
        public DhcpSessionState DhcpSessionStateCurrent { get; set; }
        /// <summary>
        /// Gets or sets the DHCP session state start.
        /// </summary>
        /// <value>The DHCP session state start.</value>
        /// <autogeneratedoc />
        public DhcpSessionState DhcpSessionStateStart { get; set; }

        /// <summary>
        /// Gets the device information.
        /// </summary>
        /// <value>The device information.</value>
        /// <autogeneratedoc />
        public IDeviceInfo DeviceInfo => DhcpDiscoveredDevice;

        /// <summary>
        /// Gets the network device information.
        /// </summary>
        /// <value>The network device information.</value>
        /// <autogeneratedoc />
        public INetworkDeviceInfo NetworkDeviceInfo => DhcpDiscoveredDevice;

        /// <summary>
        /// Updates the state of the session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="dhcpSessionState">State of the DHCP session.</param>
        /// <param name="physicalAddress">The physical address.</param>
        /// <autogeneratedoc />
        public void UpdateSessionState(uint sessionId, DhcpSessionState dhcpSessionState,
            PhysicalAddress physicalAddress)
        {
            // Are we in a new Session?
            if (sessionId != SessionId)
            {
                Init(sessionId, dhcpSessionState, physicalAddress);
            }
            else
            {
                // Update Current Session State
                DhcpSessionStateCurrent = dhcpSessionState;

                // Handle Updating Discovered Device Physical Address
                if (!IsSamePhysicalAddress(physicalAddress))
                {
                    _dhcpDiscoveredDevice = new DhcpDiscoveredDevice(sessionId, physicalAddress);
                }
            }
        }


        /// <summary>
        /// Determines whether [is duplicate request] [the specified DHCP message].
        /// </summary>
        /// <param name="dhcpMessage">The DHCP message.</param>
        /// <returns><c>true</c> if [is duplicate request] [the specified DHCP message]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsDuplicateRequest(IDhcpMessage dhcpMessage)
        {
            if (SessionId == dhcpMessage.SessionId &&
                IsSamePhysicalAddress(dhcpMessage.ClientHardwareAddress) &&
                DhcpSessionStateCurrent >= DhcpSessionState.Request)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// Determines whether [is full session].
        /// </summary>
        /// <returns><c>true</c> if [is full session]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsFullSession() => DhcpSessionStateStart == DhcpSessionState.Discover;

        /// <summary>
        /// Determines whether [is current session] [the specified session identifier].
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <returns><c>true</c> if [is current session] [the specified session identifier]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public bool IsCurrentSession(uint sessionId) => sessionId == SessionId;

        /// <summary>
        /// Determines whether [is same physical address] [the specified physical address].
        /// </summary>
        /// <param name="physicalAddress">The physical address.</param>
        /// <returns><c>true</c> if [is same physical address] [the specified physical address]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        private bool IsSamePhysicalAddress(PhysicalAddress physicalAddress)
        {
            return DhcpDiscoveredDevice?.PhysicalAddress != null &&
                   DhcpDiscoveredDevice.PhysicalAddress.Equals(physicalAddress);
        }

        /// <summary>
        /// Initializes the specified session identifier.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="dhcpSessionState">State of the DHCP session.</param>
        /// <param name="physicalAddress">The physical address.</param>
        /// <autogeneratedoc />
        private void Init(uint sessionId, DhcpSessionState dhcpSessionState, PhysicalAddress physicalAddress)
        {
            SessionId = sessionId;
            DhcpSessionStateStart = dhcpSessionState;

            DhcpSessionStateCurrent = dhcpSessionState;

            // Reset discovered Device
            _dhcpDiscoveredDevice = new DhcpDiscoveredDevice(sessionId, physicalAddress);
        }
    }
}