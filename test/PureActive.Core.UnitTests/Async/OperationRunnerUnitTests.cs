// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="OperationRunnerUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Abstractions.Async;
using PureActive.Core.Async;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Async
{
    /// <summary>
    /// Class OperationRunnerUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{OperationRunnerUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{OperationRunnerUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class OperationRunnerUnitTests : TestBaseLoggable<OperationRunnerUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationRunnerUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public OperationRunnerUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _operationRunner = new OperationRunner(TestLoggerFactory.CreatePureLogger<OperationRunner>());
        }

        /// <summary>
        /// The operation runner
        /// </summary>
        /// <autogeneratedoc />
        private readonly IOperationRunner _operationRunner;


        /// <summary>
        /// Defines the test method OperationRunner_Delay.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task OperationRunner_Delay()
        {
            // Test a delay of 2 secs on a 4 sec timeout
            Assert.True(await _operationRunner.RunOperationWithTimeoutAsync(() => Task.Delay(2000),
                new TimeSpan(0, 0, 4), CancellationToken.None));
        }

        /// <summary>
        /// Defines the test method OperationRunner_Timeout.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task OperationRunner_Timeout()
        {
            // Test a delay of 4 secs on a 2 sec timeout
            Assert.False(await _operationRunner.RunOperationWithTimeoutAsync(() => Task.Delay(4000),
                new TimeSpan(0, 0, 2), CancellationToken.None));
        }

        /// <summary>
        /// Defines the test method OperationRunner_ValidateConstructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void OperationRunner_ValidateConstructor()
        {
            _operationRunner.Should().NotBeNull();
        }
    }
}