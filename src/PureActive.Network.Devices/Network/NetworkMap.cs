// ***********************************************************************
// Assembly         : PureActive.Network.Devices
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkMap.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.CommonNetworkServices;
using PureActive.Network.Abstractions.Local;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Abstractions.Types;
using PureActive.Network.Devices.Computer;

namespace PureActive.Network.Devices.Network
{
    /// <summary>
    /// Class NetworkMap.
    /// Implements the <see cref="NetworkDeviceBase" />
    /// Implements the <see cref="INetworkMap" />
    /// </summary>
    /// <seealso cref="NetworkDeviceBase" />
    /// <seealso cref="INetworkMap" />
    /// <autogeneratedoc />
    public class NetworkMap : NetworkDeviceBase, INetworkMap
    {
        /// <summary>
        /// The logger
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPureLogger _logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkMap"/> class.
        /// </summary>
        /// <param name="commonNetworkServices">The common network services.</param>
        /// <exception cref="ArgumentNullException">commonNetworkServices</exception>
        /// <autogeneratedoc />
        public NetworkMap(ICommonNetworkServices commonNetworkServices) : base(commonNetworkServices)
        {
            if (commonNetworkServices == null) throw new ArgumentNullException(nameof(commonNetworkServices));

            _logger = commonNetworkServices.LoggerFactory?.CreatePureLogger<NetworkMap>();

            UpdateTimestamp();
        }

        /// <summary>
        /// Gets the local network device.
        /// </summary>
        /// <value>The local network device.</value>
        /// <autogeneratedoc />
        public ILocalNetworkDevice LocalNetworkDevice { get; private set; }
        /// <summary>
        /// Gets the local networks.
        /// </summary>
        /// <value>The local networks.</value>
        /// <autogeneratedoc />
        public ILocalNetworkCollection LocalNetworks => LocalNetworkDevice?.LocalNetworks;
        /// <summary>
        /// Gets the updated timestamp.
        /// </summary>
        /// <value>The updated timestamp.</value>
        /// <autogeneratedoc />
        public DateTimeOffset UpdatedTimestamp { get; private set; }
        /// <summary>
        /// Gets the service host status.
        /// </summary>
        /// <value>The service host status.</value>
        /// <autogeneratedoc />
        public ServiceHostStatus ServiceHostStatus { get; set; } = ServiceHostStatus.Stopped;

        /// <summary>
        /// Gets the primary network.
        /// </summary>
        /// <value>The primary network.</value>
        /// <autogeneratedoc />
        public INetwork PrimaryNetwork => LocalNetworks?.PrimaryNetwork;

        /// <summary>
        /// Updates the timestamp.
        /// </summary>
        /// <returns>DateTimeOffset.</returns>
        /// <autogeneratedoc />
        public DateTimeOffset UpdateTimestamp()
        {
            return UpdatedTimestamp = DateTimeOffset.Now;
        }

        /// <summary>
        /// Triggered when the application host is ready to start the service.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public Task StartAsync(CancellationToken cancellationToken)
        {
            ServiceHostStatus = ServiceHostStatus.StartPending;
            LocalNetworkDevice = DiscoverLocalNetworkDevice();

            _logger?.LogInformation("NetworkMap Service Started on Primary Network: {PrimaryIPAddressSubnet}",
                LocalNetworkDevice?.LocalNetworks?.PrimaryNetwork?.NetworkIPAddressSubnet);

            ServiceHostStatus = ServiceHostStatus.Running;
            return Task.CompletedTask;
        }

        /// <summary>
        /// Triggered when the application host is performing a graceful shutdown.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public Task StopAsync(CancellationToken cancellationToken)
        {
            ServiceHostStatus = ServiceHostStatus.Stopped;
            return Task.CompletedTask;
        }

        /// <summary>
        /// Discovers the local network device.
        /// </summary>
        /// <returns>ILocalNetworkDevice.</returns>
        /// <autogeneratedoc />
        private ILocalNetworkDevice DiscoverLocalNetworkDevice()
        {
            var localComputer = new LocalComputer(CommonNetworkServices, DeviceType.LocalComputer);

            var networkAdapters = localComputer.NetworkAdapters;

            if (networkAdapters.Count == 0)
                _logger.LogInformation("LocalComputer: No Network Adapters Found");

            return localComputer;
        }
    }
}