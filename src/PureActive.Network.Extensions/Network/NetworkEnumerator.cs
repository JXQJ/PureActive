// ***********************************************************************
// Assembly         : PureActive.Network.Extensions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkEnumerator.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections;
using System.Collections.Generic;
using System.Net;
using PureActive.Network.Abstractions.Network;
using PureActive.Network.Abstractions.Types;
using PureActive.Network.Extensions.Enumeration;

namespace PureActive.Network.Extensions.Network
{
    /// <summary>
    /// Class NetworkEnumerator.
    /// Implements the <see cref="INetworkEnumerable" />
    /// </summary>
    /// <seealso cref="INetworkEnumerable" />
    /// <autogeneratedoc />
    public class NetworkEnumerator : INetworkEnumerable
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkEnumerator"/> class.
        /// </summary>
        /// <param name="networkGateway">The network gateway.</param>
        /// <autogeneratedoc />
        public NetworkEnumerator(INetworkGateway networkGateway)
        {
            IPAddressRange =
                new IPAddressRange(new IPAddressSubnet(networkGateway.IPAddress, networkGateway.SubnetMask));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkEnumerator"/> class.
        /// </summary>
        /// <param name="ipAddressSubnet">The ip address subnet.</param>
        /// <autogeneratedoc />
        public NetworkEnumerator(IPAddressSubnet ipAddressSubnet)
        {
            IPAddressRange = new IPAddressRange(ipAddressSubnet);
        }

        /// <summary>
        /// Gets the ip address range.
        /// </summary>
        /// <value>The ip address range.</value>
        /// <autogeneratedoc />
        public IPAddressRange IPAddressRange { get; internal set; }

        /// <summary>
        /// Gets the enumerator.
        /// </summary>
        /// <returns>IEnumerator&lt;IPAddress&gt;.</returns>
        /// <autogeneratedoc />
        public IEnumerator<IPAddress> GetEnumerator()
        {
            return IPAddressRange.GetEnumerator();
        }

        /// <summary>
        /// Gets the enumerator.
        /// </summary>
        /// <returns>IEnumerator.</returns>
        /// <autogeneratedoc />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}