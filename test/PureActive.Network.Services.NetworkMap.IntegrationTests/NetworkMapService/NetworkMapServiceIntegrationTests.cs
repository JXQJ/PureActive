// ***********************************************************************
// Assembly         : PureActive.Network.Services.NetworkMap.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="NetworkMapServiceIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Network.Abstractions.NetworkMapService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.NetworkMap.IntegrationTests.NetworkMapService
{
    /// <summary>
    /// Class NetworkMapServiceIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkMapServiceIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkMapServiceIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class NetworkMapServiceIntegrationTests : TestBaseLoggable<NetworkMapServiceIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkMapServiceIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public NetworkMapServiceIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonNetworkServices = CommonNetworkServices.CreateInstance(TestLoggerFactory, "NetworkMapServiceIntegrationTests");
            _networkMapService = new NetworkMap.NetworkMapService(new Devices.Network.NetworkMap(commonNetworkServices), new DhcpService.DhcpService(commonNetworkServices));
        }

        private readonly INetworkMapService _networkMapService;

        /// <summary>
        /// Defines the test method NetworkMapService_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void NetworkMapService_Constructor()
        {
            _networkMapService.Should().NotBeNull();
            _networkMapService.Should().NotBeNull().And.Subject.Should().BeAssignableTo<INetworkMapService>();
        }

        /// <summary>
        /// Defines the test method NetworkMapService_StartStop.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task NetworkMapService_StartStop()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            Assert.Equal(ServiceHostStatus.Stopped, _networkMapService.ServiceHostStatus);
            await _networkMapService.StartAsync(cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Running, _networkMapService.ServiceHostStatus);
            await _networkMapService.StopAsync(cancellationTokenSource.Token);
            await Task.Delay(1000, cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Stopped, _networkMapService.ServiceHostStatus);
        }

        /// <summary>
        /// Defines the test method NetworkMapService_StartStop.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task NetworkMapService_StartStopAsync()
        {
            var cancellationTokenSource = new CancellationTokenSource();

            Assert.Equal(ServiceHostStatus.Stopped, _networkMapService.ServiceHostStatus);

            var startTask = _networkMapService.StartAsync(cancellationTokenSource.Token);
            startTask.Should().NotBeNull();

            Assert.Equal(ServiceHostStatus.Running, _networkMapService.ServiceHostStatus);
            await _networkMapService.StopAsync(cancellationTokenSource.Token);
            await Task.Delay(1000, cancellationTokenSource.Token);
            Assert.Equal(ServiceHostStatus.Stopped, _networkMapService.ServiceHostStatus);
        }


        /// <summary>
        /// Defines the test method NetworkMapService_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task NetworkMapService_Services_DiscoverNetworkDevicesAsync()
        {
            await _networkMapService.DiscoverNetworkDevices();
        }
    }
}