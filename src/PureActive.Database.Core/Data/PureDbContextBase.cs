// ***********************************************************************
// Assembly         : PureActive.Database.Core
// Author           : SteveBu
// Created          : 12-16-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 12-16-2018
// ***********************************************************************
// <copyright file="PureDbContextBase.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.EntityFrameworkCore;
using PureActive.Database.Abstractions.Data;

namespace PureActive.Database.Core.Data
{
    /// <summary>
    /// Class PureDbContextBase.
    /// Implements the <see cref="Microsoft.EntityFrameworkCore.DbContext" />
    /// </summary>
    /// <typeparam name="TContext">The type of the t context.</typeparam>
    /// <seealso cref="Microsoft.EntityFrameworkCore.DbContext" />
    /// <autogeneratedoc />
    public abstract class PureDbContextBase<TContext> : DbContext, IPureDbContext
    {
        /// <summary>Gets the default schema.</summary>
        /// <value>The default schema.</value>
        /// <autogeneratedoc />
        public string DefaultSchema { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PureDbContextBase{TContext}"/> class.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <param name="defaultSchema">default schema</param>
        /// <autogeneratedoc />
        protected PureDbContextBase( DbContextOptions<PureDbContextBase<TContext>> options, string defaultSchema = "dbo") :base(options)
        {
            DefaultSchema = defaultSchema;
        }

        /// <summary>
        /// Truncates table with tableName
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="isCascading">True if truncate is cascading</param>
        /// <returns></returns>
        protected int TruncateTable(string tableName, bool isCascading = false)
        {
            var cascadeParam = isCascading ? " CASCADE" : string.Empty;

            return Database.ExecuteSqlCommand($"TRUNCATE TABLE \"{DefaultSchema}\".\"{tableName}\"{cascadeParam}");
        }
    }
}
