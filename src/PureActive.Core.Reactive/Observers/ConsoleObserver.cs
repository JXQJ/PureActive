// ***********************************************************************
// Assembly         : PureActive.Core.Reactive
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ConsoleObserver.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;

namespace PureActive.Core.Reactive.Observers
{
    /// <summary>
    /// Listing 4.2
    /// An observer that output to the console each time the OnNext, OnError and OnComplete occurs
    /// Implements the <see cref="IObserver{T}" />
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <seealso cref="IObserver{T}" />
    public class ConsoleObserver<T> : IObserver<T>
    {
        /// <summary>
        /// The name
        /// </summary>
        /// <autogeneratedoc />
        private readonly string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleObserver{T}"/> class.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <autogeneratedoc />
        public ConsoleObserver(string name = "")
        {
            _name = name;
        }

        /// <summary>
        /// Provides the observer with new data.
        /// </summary>
        /// <param name="value">The current notification information.</param>
        /// <autogeneratedoc />
        public void OnNext(T value)
        {
            Console.WriteLine("{0} - OnNext({1})", _name, value);
        }

        /// <summary>
        /// Notifies the observer that the provider has experienced an error condition.
        /// </summary>
        /// <param name="error">An object that provides additional information about the error.</param>
        /// <autogeneratedoc />
        public void OnError(Exception error)
        {
            Console.WriteLine("{0} - OnError:", _name);
            Console.WriteLine("\t {0}", error);
        }

        /// <summary>
        /// Called when [completed].
        /// </summary>
        /// <autogeneratedoc />
        public void OnCompleted()
        {
            Console.WriteLine("{0} - OnCompleted()", _name);
        }
    }
}