// ***********************************************************************
// Assembly         : PureActive.Network.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net.NetworkInformation;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.UnitTests.Extensions
{
    /// <summary>
    /// Class ExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class ExtensionsUnitTests : TestBaseLoggable<ExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// The physical address zeros
        /// </summary>
        /// <autogeneratedoc />
        private const string PhysicalAddressZeros = "00-00-00-00-00-00";


        /// <summary>
        /// Defines the test method PhysicalAddress_NormalizedParse.
        /// </summary>
        /// <param name="physicalAddressString">The physical address string.</param>
        /// <param name="physicalAddressStringExpectedValue">The physical address string expected value.</param>
        /// <autogeneratedoc />
        [Theory]
        [InlineData("0-0-0-0-0-0", PhysicalAddressZeros)]
        [InlineData("1:1A:8C:46:27:D0", "01-1A-8C-46-27-D0")]
        [InlineData("00:1A:8C:46:27:D0", "00-1A-8C-46-27-D0")]
        [InlineData("", null)]
        [InlineData(null, null)]
        [InlineData("3:4:5", "03-04-05")]
        [InlineData("3:4", "03-04")]
        public void PhysicalAddress_NormalizedParse(string physicalAddressString, string physicalAddressStringExpectedValue)
        {
            var physicalAddressExpectedValue = string.IsNullOrEmpty(physicalAddressStringExpectedValue)
                ? PhysicalAddress.None
                : PhysicalAddress.Parse(physicalAddressStringExpectedValue);
            var physicalAddressNormalized = PhysicalAddressExtensions.NormalizedParse(physicalAddressString);

            Assert.Equal(physicalAddressExpectedValue, physicalAddressNormalized);
        }

        /// <summary>
        /// Defines the test method PhysicalAddress_ToColonString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddress_ToColonString()
        {
            PhysicalAddress physicalAddress = PhysicalAddress.Parse("00-1A-8C-46-27-D0");
            var physicalAddressColon = physicalAddress.ToColonString();
            Assert.Equal(physicalAddressColon, "00:1A:8C:46:27:D0");
        }

        /// <summary>
        /// Defines the test method PhysicalAddress_ToDashString.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PhysicalAddress_ToDashString()
        {
            PhysicalAddress physicalAddress = PhysicalAddress.Parse("00-1A-8C-46-27-D0");
            var physicalAddressDash = physicalAddress.ToDashString();
            Assert.Equal(physicalAddressDash, "00-1A-8C-46-27-D0");
        }
    }
}