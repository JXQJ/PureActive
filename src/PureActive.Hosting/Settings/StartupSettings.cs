// ***********************************************************************
// Assembly         : PureActive.Hosting
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="StartupSettings.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using Autofac;
using Autofac.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using PureActive.Core.Abstractions.System;
using PureActive.Hosting.Abstractions.Settings;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.Configuration;
using PureActive.Logging.Abstractions.Interfaces;

namespace PureActive.Hosting.Settings
{
    /// <summary>
    /// Class StartupSettings.
    /// Implements the <see cref="IStartupSettings" />
    /// </summary>
    /// <seealso cref="IStartupSettings" />
    /// <autogeneratedoc />
    public abstract class StartupSettings : IStartupSettings
    {
        /// <summary>
        ///     The DI container for the application.
        /// </summary>
        /// <summary>
        /// The container
        /// </summary>
        /// <autogeneratedoc />
        protected IContainer Container;

        /// <summary>
        /// Initializes a new instance of the <see cref="StartupSettings"/> class.
        /// </summary>
        /// <param name="configuration">The configuration.</param>
        /// <param name="hostingEnvironment">The hosting environment.</param>
        /// <param name="loggerFactory">The logger factory.</param>
        /// <param name="serviceHost">The service host.</param>
        /// <param name="fileSystem">The file system.</param>
        /// <param name="operatingSystem">The operating system.</param>
        /// <param name="serviceHostConfig">The service host configuration.</param>
        /// <param name="serviceDatabaseConfig">The service database configuration.</param>
        /// <exception cref="ArgumentNullException">
        /// configuration
        /// or
        /// hostingEnvironment
        /// or
        /// loggerFactory
        /// or
        /// fileSystem
        /// or
        /// operatingSystem
        /// </exception>
        /// <autogeneratedoc />
        protected StartupSettings(IConfiguration configuration, IHostingEnvironment hostingEnvironment,
            IPureLoggerFactory loggerFactory, ServiceHost serviceHost, IFileSystem fileSystem,
            IOperatingSystem operatingSystem, ServiceHostConfig serviceHostConfig = ServiceHostConfig.Kestrel,
            ServiceDatabaseConfig serviceDatabaseConfig = ServiceDatabaseConfig.LocalHost)
        {
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            HostingEnvironment = hostingEnvironment ?? throw new ArgumentNullException(nameof(hostingEnvironment));
            LoggerFactory = loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory));
            FileSystem = fileSystem ?? throw new ArgumentNullException(nameof(fileSystem));
            OperatingSystem = operatingSystem ?? throw new ArgumentNullException(nameof(operatingSystem));

            ServiceHost = serviceHost;
            ServiceHostConfig = serviceHostConfig;
            ServiceDatabaseConfig = serviceDatabaseConfig;
        }

        /// <summary>
        /// Gets the file system.
        /// </summary>
        /// <value>The file system.</value>
        /// <autogeneratedoc />
        public IFileSystem FileSystem { get; internal set; }
        /// <summary>
        /// Gets the operating system.
        /// </summary>
        /// <value>The operating system.</value>
        /// <autogeneratedoc />
        public IOperatingSystem OperatingSystem { get; internal set; }

        // Public Interfaces
        /// <summary>
        /// Gets the service host.
        /// </summary>
        /// <value>The service host.</value>
        /// <autogeneratedoc />
        public ServiceHost ServiceHost { get; internal set; }
        /// <summary>
        /// Gets the service host configuration.
        /// </summary>
        /// <value>The service host configuration.</value>
        /// <autogeneratedoc />
        public ServiceHostConfig ServiceHostConfig { get; internal set; }
        /// <summary>
        /// Gets the service database configuration.
        /// </summary>
        /// <value>The service database configuration.</value>
        /// <autogeneratedoc />
        public ServiceDatabaseConfig ServiceDatabaseConfig { get; internal set; }
        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc />
        public IConfiguration Configuration { get; internal set; }
        /// <summary>
        /// Gets the hosting environment.
        /// </summary>
        /// <value>The hosting environment.</value>
        /// <autogeneratedoc />
        public IHostingEnvironment HostingEnvironment { get; internal set; }
        /// <summary>
        /// Gets the logger factory.
        /// </summary>
        /// <value>The logger factory.</value>
        /// <autogeneratedoc />
        public IPureLoggerFactory LoggerFactory { get; internal set; }

        /// <summary>
        /// Registers the shared services.
        /// </summary>
        /// <param name="services">The services.</param>
        /// <returns>ContainerBuilder.</returns>
        /// <autogeneratedoc />
        public ContainerBuilder RegisterSharedServices(IServiceCollection services)
        {
            var builder = new ContainerBuilder();

            builder.RegisterSecurity();
            builder.RegisterOffice365MailProvider(Configuration);
            builder.RegisterSystem();
            builder.RegisterOperationRunner();
            builder.RegisterCommonServices();

            return builder;
        }

        /// <summary>
        /// Builds the container.
        /// </summary>
        /// <param name="builder">The builder.</param>
        /// <param name="services">The services.</param>
        /// <returns>IServiceProvider.</returns>
        /// <autogeneratedoc />
        public IServiceProvider BuildContainer(ContainerBuilder builder, IServiceCollection services)
        {
            builder.Populate(services);
            Container = builder.Build();

            return new AutofacServiceProvider(Container);
        }

        /// <summary>
        /// Returns the given configuration section.
        /// </summary>
        /// <param name="sectionName">Name of the section.</param>
        /// <returns>IConfigurationSection.</returns>
        public IConfigurationSection GetSection(string sectionName)
        {
            return Configuration.GetSection(sectionName);
        }

        /// <summary>
        /// Gets the connection string.
        /// </summary>
        /// <param name="serviceHost">The service host.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public string GetConnectionString(ServiceHost serviceHost)
        {
            return GetConnectionString(Configuration, FileSystem, serviceHost);
        }

        /// <summary>
        /// Applies the database migrations.
        /// </summary>
        /// <param name="app">The application.</param>
        /// <autogeneratedoc />
        public abstract void ApplyDatabaseMigrations(IApplicationBuilder app);

        /// <summary>
        /// Databases the name.
        /// </summary>
        /// <param name="serviceHost">The service host.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        private static string DatabaseName(ServiceHost serviceHost)
        {
            return serviceHost + ".db";
        }

        /// <summary>
        /// Gets the connection string.
        /// </summary>
        /// <param name="configuration">The configuration.</param>
        /// <param name="fileSystem">The file system.</param>
        /// <param name="serviceHost">The service host.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public static string GetConnectionString(IConfiguration configuration, IFileSystem fileSystem,
            ServiceHost serviceHost)
        {
            var databasePath = fileSystem.DataFolderPath() + DatabaseName(serviceHost);

            return $"Data Source={databasePath};";
        }
    }
}