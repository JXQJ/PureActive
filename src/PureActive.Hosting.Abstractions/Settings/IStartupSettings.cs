// ***********************************************************************
// Assembly         : PureActive.Hosting.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-02-2018
// ***********************************************************************
// <copyright file="IStartupSettings.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using Autofac;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Logging.Abstractions.Interfaces;

namespace PureActive.Hosting.Abstractions.Settings
{
    /// <summary>
    /// Interface IStartupSettings
    /// </summary>
    /// <autogeneratedoc />
    public interface IStartupSettings
    {
        /// <summary>
        /// Gets the service host.
        /// </summary>
        /// <value>The service host.</value>
        /// <autogeneratedoc />
        ServiceHost ServiceHost { get; }
        /// <summary>
        /// Gets the service host configuration.
        /// </summary>
        /// <value>The service host configuration.</value>
        /// <autogeneratedoc />
        ServiceHostConfig ServiceHostConfig { get; }
        /// <summary>
        /// Gets the service database configuration.
        /// </summary>
        /// <value>The service database configuration.</value>
        /// <autogeneratedoc />
        ServiceDatabaseConfig ServiceDatabaseConfig { get; }
        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc />
        IConfiguration Configuration { get; }
        /// <summary>
        /// Gets the hosting environment.
        /// </summary>
        /// <value>The hosting environment.</value>
        /// <autogeneratedoc />
        IHostingEnvironment HostingEnvironment { get; }
        /// <summary>
        /// Gets the logger factory.
        /// </summary>
        /// <value>The logger factory.</value>
        /// <autogeneratedoc />
        IPureLoggerFactory LoggerFactory { get; }

        /// <summary>
        /// Registers the shared services.
        /// </summary>
        /// <param name="services">The services.</param>
        /// <returns>ContainerBuilder.</returns>
        /// <autogeneratedoc />
        ContainerBuilder RegisterSharedServices(IServiceCollection services);

        /// <summary>
        /// Builds the container.
        /// </summary>
        /// <param name="builder">The builder.</param>
        /// <param name="services">The services.</param>
        /// <returns>IServiceProvider.</returns>
        /// <autogeneratedoc />
        IServiceProvider BuildContainer(ContainerBuilder builder, IServiceCollection services);

        /// <summary>
        /// Gets the section.
        /// </summary>
        /// <param name="sectionName">Name of the section.</param>
        /// <returns>IConfigurationSection.</returns>
        /// <autogeneratedoc />
        IConfigurationSection GetSection(string sectionName);

        /// <summary>
        /// Applies the database migrations.
        /// </summary>
        /// <param name="app">The application.</param>
        /// <autogeneratedoc />
        void ApplyDatabaseMigrations(IApplicationBuilder app);

        /// <summary>
        /// Gets the connection string.
        /// </summary>
        /// <param name="serviceHost">The service host.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetConnectionString(ServiceHost serviceHost);
    }
}