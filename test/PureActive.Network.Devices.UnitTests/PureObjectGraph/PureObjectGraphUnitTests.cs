// ***********************************************************************
// Assembly         : PureActive.Network.Devices.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PureObjectGraphUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using FluentAssertions;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Network.Abstractions.PureObject;
using PureActive.Network.Devices.PureObject;
using PureActive.Network.Devices.PureObjectGraph;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Devices.UnitTests.PureObjectGraph
{
    /// <summary>
    /// Class PureObjectGraphUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PureObjectGraphUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PureObjectGraphUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PureObjectGraphUnitTests : TestBaseLoggable<PureObjectGraphUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PureObjectGraphUnitTests" /> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PureObjectGraphUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Class PureObjectBaseTest.
        /// Implements the <see cref="PureObjectBase" />
        /// Implements the <see cref="System.IComparable{PureObjectBaseTest}" />
        /// </summary>
        /// <seealso cref="PureObjectBase" />
        /// <seealso cref="System.IComparable{PureObjectBaseTest}" />
        /// <autogeneratedoc />
        private class PureObjectBaseTest : PureObjectBase, IComparable<PureObjectBaseTest>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="PureObjectBaseTest" /> class.
            /// </summary>
            /// <param name="testValue">The test value.</param>
            /// <param name="loggerFactory">The logger factory.</param>
            /// <exception cref="ArgumentNullException">testValue</exception>
            /// <autogeneratedoc />
            public PureObjectBaseTest(string testValue, IPureLoggerFactory loggerFactory) : base(loggerFactory)
            {
                TestValue = testValue ?? throw new ArgumentNullException(nameof(testValue));
            }

            /// <summary>
            /// Gets the test value.
            /// </summary>
            /// <value>The test value.</value>
            /// <autogeneratedoc />
            private string TestValue { get; }

            /// <summary>
            /// Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            /// </summary>
            /// <param name="other">An object to compare with this instance.</param>
            /// <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            /// Value
            /// Meaning
            /// Less than zero
            /// This instance precedes <paramref name="other">other</paramref> in the sort order.
            /// Zero
            /// This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            /// Greater than zero
            /// This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
            /// <autogeneratedoc />
            public int CompareTo(PureObjectBaseTest other)
            {
                return other == null ? 1 : string.Compare(TestValue, other.TestValue, StringComparison.Ordinal);
            }

            /// <summary>
            /// Compares to.
            /// </summary>
            /// <param name="other">The other.</param>
            /// <returns>System.Int32.</returns>
            /// <autogeneratedoc />
            public override int CompareTo(IPureObject other)
            {
                return CompareTo((PureObjectBaseTest) other);
            }
        }

        /// <summary>
        /// Defines the test method PureObjectGraph_Graph.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureObjectGraph_Graph()
        {
            var graph = new PureObjectGraph<PureObjectBaseTest>();
            var gateway = new PureObjectBaseTest("Gateway", TestLoggerFactory);
            var computer1 = new PureObjectBaseTest("Computer1", TestLoggerFactory);
            var computer2 = new PureObjectBaseTest("Computer2", TestLoggerFactory);

            graph.AddVertex(gateway);
            graph.AddVertex(computer1);
            graph.AddVertex(computer2);

            graph.AddEdge(computer1, gateway, true);
            graph.AddEdge(computer2, gateway, true);

            graph.IndexEdges();
            graph.IndexVertices();
        }


        /// <summary>
        /// Defines the test method PureObjectGraph_VertexComparison.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureObjectGraph_VertexComparison()
        {
            var objectBaseTest1 = new PureObjectBaseTest("VertexCreationTest", TestLoggerFactory);
            var objectBaseTest2 = new PureObjectBaseTest("VertexCreationTest", TestLoggerFactory);

            var vertex1 = new PureObjectVertex<PureObjectBaseTest>(objectBaseTest1);
            var vertex2 = new PureObjectVertex<PureObjectBaseTest>(objectBaseTest2);
            vertex1.Should().Be(vertex2);
        }


        /// <summary>
        /// Defines the test method PureObjectGraph_VertexEquality.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void PureObjectGraph_VertexEquality()
        {
            var objectBaseTest1 = new PureObjectBaseTest("VertexCreationTest", TestLoggerFactory);
            var objectBaseTest2 = new PureObjectBaseTest("VertexCreationTest", TestLoggerFactory);

            var vertex1 = new PureObjectVertex<PureObjectBaseTest>(objectBaseTest1);
            var vertex2 = new PureObjectVertex<PureObjectBaseTest>(objectBaseTest2);
            var vertex1Ref = vertex1;

            // ObjectIds are different
            Assert.False(vertex1.Equals(vertex2), "vertex1.Equals(vertex2)");
            Assert.True(vertex1.Equals(vertex1Ref), "vertex1.Equals(vertex1Ref)");
        }
    }
}