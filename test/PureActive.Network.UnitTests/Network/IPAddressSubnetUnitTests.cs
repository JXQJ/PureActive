// ***********************************************************************
// Assembly         : PureActive.Network.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPAddressSubnetUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections;
using System.Collections.Generic;
using System.Net;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.UnitTests.Network
{
    /// <summary>
    /// Class IPAddressSubnetUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressSubnetUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{IPAddressSubnetUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class IPAddressSubnetUnitTests : TestBaseLoggable<IPAddressSubnetUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPAddressSubnetUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public IPAddressSubnetUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method NetworkAddressTest.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="subnetAddress">The subnet address.</param>
        /// <param name="ipAddressExpected">The ip address expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [ClassData(typeof(NetworkAddressTestGenerator))]
        public void NetworkAddressTest(IPAddress ipAddress, IPAddress subnetAddress, IPAddress ipAddressExpected)
        {
            IPAddressSubnet ipAddressSubnet = new IPAddressSubnet(ipAddress, subnetAddress);

            Assert.Equal(ipAddressExpected, ipAddressSubnet.NetworkAddress);
        }

        /// <summary>
        /// Defines the test method BroadcastAddressTest.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="subnetAddress">The subnet address.</param>
        /// <param name="ipAddressExpected">The ip address expected.</param>
        /// <autogeneratedoc />
        [Theory]
        [ClassData(typeof(BroadcastAddressTestGenerator))]
        public void BroadcastAddressTest(IPAddress ipAddress, IPAddress subnetAddress, IPAddress ipAddressExpected)
        {
            IPAddressSubnet ipAddressSubnet = new IPAddressSubnet(ipAddress, subnetAddress);

            Assert.Equal(ipAddressExpected, ipAddressSubnet.BroadcastAddress);
        }

        /// <summary>
        /// Class NetworkAddressTestGenerator.
        /// Implements the <see cref="object" />
        /// </summary>
        /// <seealso cref="object" />
        /// <autogeneratedoc />
        private class NetworkAddressTestGenerator : IEnumerable<object[]>
        {
            /// <summary>
            /// The network address class a
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress NetworkAddressClassA = IPAddress.Parse("10.0.0.0");
            /// <summary>
            /// The network address class b
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress NetworkAddressClassB = IPAddress.Parse("172.16.0.0");
            /// <summary>
            /// The network address class c
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress NetworkAddressClassC = IPAddress.Parse("192.168.1.0");

            /// <summary>
            /// The network address class1 c
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress NetworkAddressClass1C = IPAddress.Parse("10.0.1.0");

            /// <summary>
            /// The test address class a
            /// </summary>
            /// <autogeneratedoc />
            public static readonly IPAddress TestAddressClassA = IPAddress.Parse("10.0.0.5");
            /// <summary>
            /// The test address class b
            /// </summary>
            /// <autogeneratedoc />
            public static readonly IPAddress TestAddressClassB = IPAddress.Parse("172.16.0.5");
            /// <summary>
            /// The test address class c
            /// </summary>
            /// <autogeneratedoc />
            public static readonly IPAddress TestAddressClassC = IPAddress.Parse("192.168.1.5");

            /// <summary>
            /// The test address class1 a
            /// </summary>
            /// <autogeneratedoc />
            public static readonly IPAddress TestAddressClass1A = IPAddress.Parse("10.0.1.5");
            /// <summary>
            /// The test address class1 b
            /// </summary>
            /// <autogeneratedoc />
            public static readonly IPAddress TestAddressClass1B = IPAddress.Parse("172.16.1.5");

            /// <summary>
            /// The data
            /// </summary>
            /// <autogeneratedoc />
            private readonly List<object[]> _data = new List<object[]>
            {
                new object[] {TestAddressClassA, IPAddressExtensions.SubnetClassA, NetworkAddressClassA},
                new object[] {TestAddressClassB, IPAddressExtensions.SubnetClassB, NetworkAddressClassB},
                new object[] {TestAddressClassC, IPAddressExtensions.SubnetClassC, NetworkAddressClassC},

                new object[] {TestAddressClass1A, IPAddressExtensions.SubnetClassA, NetworkAddressClassA},
                new object[] {TestAddressClass1B, IPAddressExtensions.SubnetClassB, NetworkAddressClassB},

                new object[] {TestAddressClass1A, IPAddressExtensions.SubnetClassC, NetworkAddressClass1C}
            };

            /// <summary>
            /// Returns an enumerator that iterates through the collection.
            /// </summary>
            /// <returns>An enumerator that can be used to iterate through the collection.</returns>
            /// <autogeneratedoc />
            public IEnumerator<object[]> GetEnumerator() => _data.GetEnumerator();

            /// <summary>
            /// Returns an enumerator that iterates through a collection.
            /// </summary>
            /// <returns>An <see cref="IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            /// <autogeneratedoc />
            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }

        /// <summary>
        /// Class BroadcastAddressTestGenerator.
        /// Implements the <see cref="object" />
        /// </summary>
        /// <seealso cref="object" />
        /// <autogeneratedoc />
        private class BroadcastAddressTestGenerator : IEnumerable<object[]>
        {
            /// <summary>
            /// The broadcast address class a
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress BroadcastAddressClassA = IPAddress.Parse("10.255.255.255");
            /// <summary>
            /// The broadcast address class b
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress BroadcastAddressClassB = IPAddress.Parse("172.16.255.255");
            /// <summary>
            /// The broadcast address class c
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress BroadcastAddressClassC = IPAddress.Parse("192.168.1.255");

            /// <summary>
            /// The broadcast address class1 c
            /// </summary>
            /// <autogeneratedoc />
            private static readonly IPAddress BroadcastAddressClass1C = IPAddress.Parse("10.0.1.255");

            /// <summary>
            /// The data
            /// </summary>
            /// <autogeneratedoc />
            private readonly List<object[]> _data = new List<object[]>

            {
                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClassA, IPAddressExtensions.SubnetClassA,
                    BroadcastAddressClassA
                },
                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClassB, IPAddressExtensions.SubnetClassB,
                    BroadcastAddressClassB
                },
                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClassC, IPAddressExtensions.SubnetClassC,
                    BroadcastAddressClassC
                },

                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClass1A, IPAddressExtensions.SubnetClassA,
                    BroadcastAddressClassA
                },
                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClass1B, IPAddressExtensions.SubnetClassB,
                    BroadcastAddressClassB
                },

                new object[]
                {
                    NetworkAddressTestGenerator.TestAddressClass1A, IPAddressExtensions.SubnetClassC,
                    BroadcastAddressClass1C
                }
            };

            /// <summary>
            /// Returns an enumerator that iterates through the collection.
            /// </summary>
            /// <returns>An enumerator that can be used to iterate through the collection.</returns>
            /// <autogeneratedoc />
            public IEnumerator<object[]> GetEnumerator() => _data.GetEnumerator();

            /// <summary>
            /// Gets the enumerator.
            /// </summary>
            /// <returns>IEnumerator.</returns>
            /// <autogeneratedoc />
            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }
    }
}