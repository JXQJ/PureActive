// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-29-2018
// ***********************************************************************
// <copyright file="NetworkingSystemUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************


using System;
using System.Net;
using System.Net.NetworkInformation;
using FluentAssertions;
using Moq;
using PureActive.Hosting.Abstractions.Extensions;
using PureActive.Hosting.Abstractions.Networking;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Hosting.Networking;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Hosting.UnitTests.Networking
{
    /// <summary>
    /// Class NetworkingSystemUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkingSystemUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{NetworkingSystemUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class NetworkingSystemUnitTests : TestBaseLoggable<NetworkingSystemUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkingSystemUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public NetworkingSystemUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _networkingSystem = new NetworkingSystem(TestLoggerFactory.CreatePureLogger<NetworkingSystem>());
        }

        private readonly INetworkingSystem _networkingSystem;

        [Fact]
        public void NetworkingSystem_Constructor()
        {
            _networkingSystem.Should().NotBeNull().And.Subject.Should().BeAssignableTo<INetworkingSystem>();
        }
        

        [Fact]
        public void NetworkingSystem_GetNetworkAddress_InvalidSubnet()
        {
            IPAddress ipAddressV6 = IPAddress.IPv6None;

            Func<IPAddress> fx = () => ipAddressV6.GetNetworkAddress(IPAddress.Broadcast);
            fx.Should().Throw<ArgumentException>();
        }

        [Fact]
        public void NetworkingSystem_GetBroadcastAddress_InvalidSubnet()
        {
            IPAddress ipAddressV6 = IPAddress.IPv6None;

            Func<IPAddress> fx = () => ipAddressV6.GetBroadcastAddress(IPAddress.Broadcast);
            fx.Should().Throw<ArgumentException>();
        }

        [Fact]
        public void NetworkingSystem_IPv4AddressSubnetFromNetworkInterface_Null()
        {
            Func<IPAddressSubnet> fx = () =>_networkingSystem.IPv4AddressSubnetFromNetworkInterface(null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("networkInterface");
        }
        [Fact]
        public void NetworkingSystem_IPv4AddressSubnetFromNetworkInterface()
        {
            Mock<NetworkInterface> networkInterfaceMock = new Mock<NetworkInterface>();
            networkInterfaceMock.Setup(ni => ni.OperationalStatus).Returns(OperationalStatus.Down);

            _networkingSystem.IPv4AddressSubnetFromNetworkInterface(networkInterfaceMock.Object).Should()
                .Be(IPAddressSubnet.None);

        }

        
    }
}