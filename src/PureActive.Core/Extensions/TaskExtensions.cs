// ***********************************************************************
// Assembly         : PureActive.Core
// Author           : SteveBu
// Created          : 10-20-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="TaskExtensions.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using PureActive.Logging.Abstractions.Interfaces;

namespace PureActive.Core.Extensions
{
    /// <summary>
    /// Class TaskExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class TaskExtensions
    {
        /// <summary>
        /// Waits for tasks.
        /// </summary>
        /// <param name="tasks">The tasks.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <param name="onTaskComplete">The on task complete.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="memberName">Name of the member.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public static Task WaitForTasks(this List<Task> tasks, CancellationToken cancellationToken, Action<Task> onTaskComplete = null,
            IPureLogger logger = null, [CallerMemberName] string memberName = "")
        {
            Task t = Task.WhenAll(tasks);

            try
            {
                cancellationToken.ThrowIfCancellationRequested();
                t.Wait(cancellationToken);
            }
            catch (OperationCanceledException ex)
            {
                t = Task.FromCanceled(cancellationToken);
                logger?.LogError(ex, "Task {Method} timed out with {TaskStatus}", memberName, t.Status);
            }
            catch (Exception ex)
            {
                t = Task.FromException(ex);

                logger?.LogError(ex, "Task {Method} threw an exception with {TaskStatus}", memberName, t.Status);
            }
            finally
            {
                onTaskComplete?.Invoke(t);
            }

            return t;
        }

        /// <summary>
        /// Waits for tasks.
        /// </summary>
        /// <param name="tasks">The tasks.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="memberName">Name of the member.</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        public static Task WaitForTasks(this List<Task> tasks, CancellationToken cancellationToken,
            IPureLogger logger = null, [CallerMemberName] string memberName = "") =>
            WaitForTasks(tasks, cancellationToken, null, logger, memberName);
    }
}