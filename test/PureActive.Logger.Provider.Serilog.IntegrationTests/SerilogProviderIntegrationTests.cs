// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="SerilogProviderIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.IO;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using PureActive.Core.Abstractions.System;
using PureActive.Core.Extensions;
using PureActive.Core.System;
using PureActive.Logger.Provider.Serilog.Configuration;
using PureActive.Logger.Provider.Serilog.Settings;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Events;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Logger.Provider.Serilog.IntegrationTests
{
    /// <summary>
    /// Class SerilogProviderIntegrationTests.
    /// Implements the <see cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{SerilogProviderIntegrationTests}" />
    /// </summary>
    /// <seealso cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{SerilogProviderIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class SerilogProviderIntegrationTests : TestBaseLoggable<SerilogProviderIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogProviderIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public SerilogProviderIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            _fileSystem = new FileSystem(typeof(SerilogProviderIntegrationTests));
        }

        /// <summary>
        /// The file system
        /// </summary>
        /// <autogeneratedoc />
        private readonly IFileSystem _fileSystem;

        /// <summary>
        /// Creates the pure logger factory.
        /// </summary>
        /// <param name="logEventLevel">The log event level.</param>
        /// <param name="loggingOutputFlags">The logging output flags.</param>
        /// <param name="logFileName">Name of the log file.</param>
        /// <returns>IPureLoggerFactory.</returns>
        /// <autogeneratedoc />
        private IPureLoggerFactory CreatePureLoggerFactory(LogEventLevel logEventLevel,
            LoggingOutputFlags loggingOutputFlags, string logFileName)
        {
            var loggerSettings = new SerilogLoggerSettings(_fileSystem, logEventLevel, loggingOutputFlags);
            var loggerConfiguration =
                LoggerConfigurationFactory.CreateLoggerConfiguration((string) null, logFileName, loggerSettings,
                    b => true);

            return LoggerConfigurationFactory.CreatePureSeriLoggerFactory(loggerSettings, loggerConfiguration);
        }

        /// <summary>
        /// Asserts the log file entry.
        /// </summary>
        /// <param name="loggerSettings">The logger settings.</param>
        /// <param name="logLevel">The log level.</param>
        /// <param name="logFileName">Name of the log file.</param>
        /// <param name="testAction">The test action.</param>
        /// <autogeneratedoc />
        private void AssertLogFileEntry(IPureLoggerSettings loggerSettings, LogLevel logLevel, string logFileName,
            Action<string, LogLevel> testAction)
        {
            string partialName = _fileSystem.GetFileNameWithoutExtension(logFileName);
            DirectoryInfo hdDirectoryInWhichToSearch = new DirectoryInfo(loggerSettings.TestLogFolderPath);
            FileInfo[] filesInDir = hdDirectoryInWhichToSearch.GetFiles("*" + partialName + "*.*");

            foreach (FileInfo foundFile in filesInDir)
            {
                if (foundFile.Name.StartsWith(partialName))
                {
                    if (!_fileSystem.FileExists(foundFile.FullName)) continue;

                    using (var sr = new StreamReader(foundFile.FullName))
                    {
                        var logContents = sr.ReadToEnd();

                        testAction(logContents, logLevel);
                    }
                }
            }
        }


        /// <summary>
        /// Defines the test method SerilogProvider_CreateLogger_AppConsoleFile_BadLogLevel.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void SerilogProvider_CreateLogger_AppConsoleFile_BadLogLevel()
        {
            var logFileName = FileExtensions.GetRandomFileName("", ".log");
            var loggerFactory = CreatePureLoggerFactory(LogEventLevel.Debug, LoggingOutputFlags.TestingAppConsoleFile,
                logFileName);
            var logger = loggerFactory.CreatePureLogger<SerilogProviderIntegrationTests>();

            const string msg = "Test";
            logger.LogDebug(msg);

            // Dispose Logger Factory so we can access log file
            loggerFactory.Dispose();

            AssertLogFileEntry(loggerFactory.PureLoggerSettings, LogLevel.Critical, logFileName,
                (logContents, logLevel) =>
                {
                    logContents.Should().EndWith($"{msg}{Environment.NewLine}");
                    logContents.Should().NotContain($"[{logLevel}]");
                }
            );
        }

        /// <summary>
        /// Defines the test method SerilogProvider_CreateLogger_AppConsoleFile_LogLevel.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void SerilogProvider_CreateLogger_AppConsoleFile_LogLevel()
        {
            var logFileName = FileExtensions.GetRandomFileName("", ".log");
            var loggerFactory = CreatePureLoggerFactory(LogEventLevel.Debug, LoggingOutputFlags.TestingAppConsoleFile,
                logFileName);
            var logger = loggerFactory.CreatePureLogger<SerilogProviderIntegrationTests>();

            const string msg = "Test";
            logger.LogDebug(msg);

            // Dispose Logger Factory so we can access log file
            loggerFactory.Dispose();

            AssertLogFileEntry(loggerFactory.PureLoggerSettings, LogLevel.Debug, logFileName,
                (logContents, logLevel) =>
                {
                    logContents.Should().EndWith($"{msg}{Environment.NewLine}");
                    logContents.Should().Contain($"[{logLevel}]");
                }
            );
        }


        /// <summary>
        /// Defines the test method SerilogProvider_CreateLoggers_AppConsoleFile.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void SerilogProvider_CreateLoggers_AppConsoleFile()
        {
            var logFileName = FileExtensions.GetRandomFileName("", ".log");
            var loggerFactory = CreatePureLoggerFactory(LogEventLevel.Debug, LoggingOutputFlags.TestingAppConsoleFile,
                logFileName);

            // Validate IPureLoggerFactory Interface
            loggerFactory.Should().NotBeNull();
            loggerFactory.PureLoggerSettings.Should().NotBeNull();
            loggerFactory.WrappedLoggerFactory.Should().NotBeNull();

            // Validate creation of loggers
            var pureLogger = loggerFactory.CreatePureLogger<SerilogProviderIntegrationTests>();
            pureLogger.Should().NotBeNull();

            var logger = loggerFactory.CreatePureLogger<SerilogProviderIntegrationTests>();
            logger.Should().NotBeNull();
        }
    }
}