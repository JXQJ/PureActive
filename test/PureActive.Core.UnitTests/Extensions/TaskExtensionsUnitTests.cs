// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="TaskExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using PureActive.Core.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Extensions
{
    /// <summary>
    /// Class TaskExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{TaskExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{TaskExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class TaskExtensionsUnitTests : TestBaseLoggable<TaskExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public TaskExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Defines the test method TaskExtensions_Cancel.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TaskExtensions_Cancel()
        {
            List<Task> tasks = new List<Task>
            {
                Task.Delay(300)
            };

            var cts = new CancellationTokenSource();

            cts.CancelAfter(100);

            var result = tasks.WaitForTasks(cts.Token, Logger);

            result.Status.Should().Be(TaskStatus.Faulted);
        }


        /// <summary>
        /// Defines the test method TaskExtensions_Empty.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task TaskExtensions_Empty()
        {
            List<Task> tasks = new List<Task>();

            await tasks.WaitForTasks(CancellationToken.None, Logger);
        }

        /// <summary>
        /// Defines the test method TaskExtensions_Exception.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void TaskExtensions_Exception()
        {
            List<Task> tasks = new List<Task>
            {
                Task.Run(() => throw new InvalidOperationException())
            };

            var result = tasks.WaitForTasks(CancellationToken.None, Logger);

            result.Status.Should().Be(TaskStatus.Faulted);
        }

        /// <summary>
        /// Defines the test method TaskExtensions_Wait.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task TaskExtensions_Wait()
        {
            List<Task> tasks = new List<Task>
            {
                Task.Delay(300),
                Task.Delay(100)
            };

            var stopWatch = Stopwatch.StartNew();

            await tasks.WaitForTasks(CancellationToken.None, Logger);

            stopWatch.Stop();

            stopWatch.ElapsedMilliseconds.Should().BeGreaterOrEqualTo(299);
            TestOutputHelper.WriteLine(stopWatch.ElapsedMilliseconds.ToString());
        }
    }
}