// ***********************************************************************
// Assembly         : PureActive.Core.Abstractions
// Author           : SteveBu
// Created          : 11-29-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-29-2018
// ***********************************************************************
// <copyright file="INetworkingSystem.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary>
//      Interface for accessing the Networking System on local device
// </summary>
// ***********************************************************************

using System.Net;
using System.Net.NetworkInformation;
using PureActive.Hosting.Abstractions.Types;

namespace PureActive.Hosting.Abstractions.Networking
{
    /// <summary>
    /// Interface INetworkSystem
    /// </summary>
    /// <autogeneratedoc />
    public interface INetworkingSystem
    {
        /// <summary>
        /// Gets all network interfaces.
        /// </summary>
        /// <returns>NetworkInterface[].</returns>
        /// <autogeneratedoc />
        NetworkInterface[] GetAllNetworkInterfaces();

        /// <summary>
        /// Returns an IPV4 IPAddressSubnet given the passed in networkInterface, returns IPAddressSubnet.None
        /// if 
        /// </summary>
        /// <param name="networkInterface"></param>
        /// <returns></returns>
        // ReSharper disable once InconsistentNaming
        IPAddressSubnet IPv4AddressSubnetFromNetworkInterface(NetworkInterface networkInterface);

        /// <summary>
        /// Gets the default local address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        IPAddressSubnet GetDefaultLocalAddressSubnet();

        /// <summary>
        /// Gets the default local address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultLocalAddress();

        /// <summary>
        /// Gets the default local subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultLocalSubnet();


        /// <summary>
        /// Gets the default local network address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        IPAddressSubnet GetDefaultLocalNetworkAddressSubnet();

        /// <summary>
        /// Gets the default local network address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultLocalNetworkAddress();

        /// <summary>
        /// Gets the default local network subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultLocalNetworkSubnet();

        /// <summary>
        /// Gets the default gateway address subnet.
        /// </summary>
        /// <returns>IPAddressSubnet.</returns>
        /// <autogeneratedoc />
        IPAddressSubnet GetDefaultGatewayAddressSubnet();

        /// <summary>
        /// Gets the default gateway address.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultGatewayAddress();

        /// <summary>
        /// Gets the default gateway subnet.
        /// </summary>
        /// <returns>IPAddress.</returns>
        /// <autogeneratedoc />
        IPAddress GetDefaultGatewaySubnet();
    }
}