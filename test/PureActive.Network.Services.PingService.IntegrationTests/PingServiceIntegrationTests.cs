// ***********************************************************************
// Assembly         : PureActive.Network.Services.PingService.IntegrationTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PingServiceIntegrationTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Threading;
using System.Threading.Tasks;
using PureActive.Hosting.CommonServices;
using PureActive.Network.Abstractions.Extensions;
using PureActive.Network.Abstractions.PingService;
using PureActive.Network.Abstractions.PingService.Events;
using PureActive.Network.Abstractions.Types;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.PingService.IntegrationTests
{
    /// <summary>
    /// Class PingServiceIntegrationTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingServiceIntegrationTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingServiceIntegrationTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Integration")]
    public class PingServiceIntegrationTests : TestBaseLoggable<PingServiceIntegrationTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingServiceIntegrationTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PingServiceIntegrationTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonServices = CommonServices.CreateInstance(TestLoggerFactory, "PingServiceIntegrationTests");
            _cancellationTokenSource = new CancellationTokenSource();
            _pingService = new PingService(commonServices);
        }

        /// <summary>
        /// The cancellation token source
        /// </summary>
        /// <autogeneratedoc />
        private readonly CancellationTokenSource _cancellationTokenSource;
        /// <summary>
        /// The ping service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPingService _pingService;
        /// <summary>
        /// The default network timeout
        /// </summary>
        /// <autogeneratedoc />
        private const int DefaultNetworkTimeout = 250;
        /// <summary>
        /// The default ping calls
        /// </summary>
        /// <autogeneratedoc />
        private const int DefaultPingCalls = 5;

        /// <summary>
        /// Pings the reply event handler.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="args">The <see cref="PingReplyEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        private void PingReplyEventHandler(object sender, PingReplyEventArgs args)
        {
            if (args != null)
            {
                TestOutputHelper.WriteLine(
                    $"Job: {args.PingJob.JobGuid}, TaskId: {args.PingJob.TaskId}, IPAddressSubnet: {args.PingJob.IPAddressSubnet}, Status: {args.PingReply.Status}");
            }
        }


        /// <summary>
        /// Defines the test method PingService_PingNetworkEventWithLogging.
        /// </summary>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        [Fact]
        public async Task PingService_PingNetworkEventWithLogging()
        {
            var ipAddressSubnet = new IPAddressSubnet(IPAddressExtensions.GetDefaultLocalNetworkAddress(Logger),
                IPAddressExtensions.SubnetClassC);

            _pingService.OnPingReply += PingReplyEventHandler;
            await _pingService.PingNetworkAsync(ipAddressSubnet, _cancellationTokenSource.Token, DefaultNetworkTimeout,
                DefaultPingCalls, false);
        }
    }
}