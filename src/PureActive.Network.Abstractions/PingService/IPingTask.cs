// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IPingTask.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Net;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;
using PureActive.Hosting.Abstractions.Types;
using PureActive.Network.Abstractions.PingService.Events;

namespace PureActive.Network.Abstractions.PingService
{
    /// <summary>
    /// Interface IPingTask
    /// </summary>
    /// <autogeneratedoc />
    public interface IPingTask
    {
        /// <summary>
        /// Gets or sets the timeout.
        /// </summary>
        /// <value>The timeout.</value>
        /// <autogeneratedoc />
        int Timeout { get; set; }
        /// <summary>
        /// Gets the default timeout.
        /// </summary>
        /// <value>The default timeout.</value>
        /// <autogeneratedoc />
        int DefaultTimeout { get; }

        /// <summary>
        /// Gets or sets the TTL.
        /// </summary>
        /// <value>The TTL.</value>
        /// <autogeneratedoc />
        int Ttl { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether [do not fragment].
        /// </summary>
        /// <value><c>true</c> if [do not fragment]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        bool DoNotFragment { get; set; }

        /// <summary>
        /// Pings the ip address asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="timeout">The timeout.</param>
        /// <param name="buffer">The buffer.</param>
        /// <param name="pingOptions">The ping options.</param>
        /// <returns>Task&lt;PingReply&gt;.</returns>
        /// <autogeneratedoc />
        Task<PingReply> PingIpAddressAsync(IPAddress ipAddress, int timeout, byte[] buffer, PingOptions pingOptions);
        /// <summary>
        /// Pings the ip address asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <param name="timeout">The timeout.</param>
        /// <returns>Task&lt;PingReply&gt;.</returns>
        /// <autogeneratedoc />
        Task<PingReply> PingIpAddressAsync(IPAddress ipAddress, int timeout);
        /// <summary>
        /// Pings the ip address asynchronous.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <returns>Task&lt;PingReply&gt;.</returns>
        /// <autogeneratedoc />
        Task<PingReply> PingIpAddressAsync(IPAddress ipAddress);

        /// <summary>
        /// Pings the network asynchronous.
        /// </summary>
        /// <param name="ipAddressSubnet">The ip address subnet.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <param name="timeout">The timeout.</param>
        /// <param name="pingOptions">The ping options.</param>
        /// <param name="pingCallLimit">The ping call limit.</param>
        /// <param name="waitBetweenPings">delay in milliseconds between pings</param>
        /// <param name="shuffle">if set to <c>true</c> [shuffle].</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        Task PingNetworkAsync(IPAddressSubnet ipAddressSubnet, CancellationToken cancellationToken, int timeout,
            PingOptions pingOptions, int pingCallLimit, int waitBetweenPings, bool shuffle);

        /// <summary>
        /// Pings the network asynchronous.
        /// </summary>
        /// <param name="ipAddressSubnet">The ip address subnet.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <param name="timeout">The timeout.</param>
        /// <param name="pingCallLimit">The ping call limit.</param>
        /// <param name="waitBetweenPings">delay in milliseconds between pings</param>
        /// <param name="shuffle">if set to <c>true</c> [shuffle].</param>
        /// <returns>Task.</returns>
        /// <autogeneratedoc />
        Task PingNetworkAsync(IPAddressSubnet ipAddressSubnet, CancellationToken cancellationToken, int timeout,
            int pingCallLimit, int waitBetweenPings, bool shuffle);

        /// <summary>
        /// Occurs when [on ping reply].
        /// </summary>
        /// <autogeneratedoc />
        event PingReplyEventHandler OnPingReplyTask;
    }
}