// ***********************************************************************
// Assembly         : PureActive.Network.Abstractions
// Author           : SteveBu
// Created          : 11-02-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PingJob.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Net;
using System.Text;
using PureActive.Hosting.Abstractions.Types;

namespace PureActive.Network.Abstractions.PingService
{
    /// <summary>
    /// Struct PingJob
    /// </summary>
    /// <autogeneratedoc />
    public struct PingJob
    {
        /// <summary>
        /// The job unique identifier
        /// </summary>
        /// <autogeneratedoc />
        public Guid JobGuid;
        /// <summary>
        /// The task identifier
        /// </summary>
        /// <autogeneratedoc />
        public int TaskId;
        /// <summary>
        /// The timestamp
        /// </summary>
        /// <autogeneratedoc />
        public DateTimeOffset Timestamp;
        /// <summary>
        /// The ip address subnet
        /// </summary>
        /// <autogeneratedoc />
        public IPAddressSubnet IPAddressSubnet;

        /// <summary>
        /// Initializes a new instance of the <see cref="PingJob"/> struct.
        /// </summary>
        /// <param name="jobGuid">The job unique identifier.</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="iPAddressSubnet">The i p address subnet.</param>
        /// <param name="timestamp">The timestamp.</param>
        /// <autogeneratedoc />
        public PingJob(Guid jobGuid, int taskId, IPAddressSubnet iPAddressSubnet, DateTimeOffset timestamp)
        {
            JobGuid = jobGuid;
            TaskId = taskId;
            IPAddressSubnet = iPAddressSubnet;
            Timestamp = timestamp;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PingJob"/> struct.
        /// </summary>
        /// <param name="jobGuid">The job unique identifier.</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="iPAddress">The IPAddress subnet.</param>
        /// <param name="timestamp">The timestamp.</param>
        /// <autogeneratedoc />
        public PingJob(Guid jobGuid, int taskId, IPAddress iPAddress, DateTimeOffset timestamp)
            :this(jobGuid, taskId, new IPAddressSubnet(iPAddress, IPAddress.None), timestamp)
        {
  
        }

        /// <summary>
        /// Nexts the task.
        /// </summary>
        /// <param name="ipAddress">The ip address.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        public int NextTask(IPAddress ipAddress)
        {
            IPAddressSubnet = new IPAddressSubnet(ipAddress, IPAddressSubnet.SubnetMask);
            return ++TaskId;
        }

        /// <summary>
        /// Converts to buffer.
        /// </summary>
        /// <returns>System.Byte[].</returns>
        /// <autogeneratedoc />
        public byte[] ToBuffer()
        {
            byte[] buffer = Encoding.ASCII.GetBytes("abcdefghijklmnopqrstuvwxyz012345");

            return buffer;
        }
    }
}