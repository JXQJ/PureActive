// ***********************************************************************
// Assembly         : PureActive.Network.Services.DhcpService
// Author           : SteveBu
// Created          : 11-05-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="DhcpMessageEventArgs.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using Microsoft.Extensions.Logging;
using PureActive.Core.Extensions;
using PureActive.Network.Abstractions.DhcpService.Interfaces;
using PureActive.Network.Abstractions.DhcpService.Types;
using PureActive.Network.Core.Sockets;
using PureActive.Network.Services.DhcpService.Message;

namespace PureActive.Network.Services.DhcpService.Events
{
    /// <summary>
    /// Class DhcpMessageEventArgs.
    /// Implements the <see cref="EventArgs" />
    /// </summary>
    /// <seealso cref="EventArgs" />
    /// <autogeneratedoc />
    public class DhcpMessageEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpMessageEventArgs" /> class.
        /// </summary>
        /// <param name="dhcpService">Controlling DhcpService interface</param>
        /// <param name="channel">Socket channel request is received on.</param>
        /// <param name="data">Raw data received from socket.</param>
        /// <exception cref="ArgumentNullException">
        /// channel
        /// or
        /// data
        /// or
        /// DhcpService
        /// </exception>
        public DhcpMessageEventArgs(IDhcpService dhcpService, SocketChannel channel, SocketBuffer data)
        {
            Channel = channel ?? throw new ArgumentNullException(nameof(channel));
            ChannelBuffer = data ?? throw new ArgumentNullException(nameof(data));
            DhcpService = dhcpService ?? throw new ArgumentNullException(nameof(DhcpService));

            var logger = dhcpService.Logger;

            try
            {
                // Parse the dhcp message
                RequestMessage = new DhcpMessage(data.Buffer, dhcpService.LoggerFactory, logger);


                logger?.LogTrace(
                    "DHCP PACKET with message id {SessionId} successfully parsed from client endpoint {RemoteEndPoint}",
                    RequestMessage.SessionId.ToHexString("0x"), Channel.RemoteEndpoint);
            }
            catch (Exception ex)
            {
                logger?.LogError(ex, "Error parsing DHCP message");
            }
        }

        /// <summary>
        /// Gets the DHCP service.
        /// </summary>
        /// <value>The DHCP service.</value>
        /// <autogeneratedoc />
        public IDhcpService DhcpService { get; private set; }

        /// <summary>
        /// Channel for the connected client.
        /// </summary>
        /// <value>The channel.</value>
        public SocketChannel Channel { get; private set; }

        /// <summary>
        /// Buffer for the connected client.
        /// </summary>
        /// <value>The channel buffer.</value>
        public SocketBuffer ChannelBuffer { get; private set; }

        /// <summary>
        /// Requested message for the connected client.
        /// </summary>
        /// <value>The request message.</value>
        public IDhcpMessage RequestMessage { get; private set; }

        /// <summary>
        /// Gets the type of the message.
        /// </summary>
        /// <value>The type of the message.</value>
        /// <autogeneratedoc />
        public MessageType MessageType
        {
            get
            {
                // get message type option
                var messageTypeData = RequestMessage.GetOptionData(DhcpOption.MessageType);

                return messageTypeData != null && messageTypeData.Length > 0
                    ? (MessageType) messageTypeData[0]
                    : MessageType.Unknown;
            }
        }
    }
}