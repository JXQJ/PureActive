// ***********************************************************************
// Assembly         : PureActive.Core.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="ListExtensionsUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using FluentAssertions;
using PureActive.Core.Extensions;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Core.UnitTests.Extensions
{
    /// <summary>
    /// Class ListExtensionsUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ListExtensionsUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{ListExtensionsUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class ListExtensionsUnitTests : TestBaseLoggable<ListExtensionsUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListExtensionsUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public ListExtensionsUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
        }

        /// <summary>
        /// Class ObjectField.
        /// </summary>
        /// <autogeneratedoc />
        public class ObjectField
        {
            /// <summary>
            /// Gets or sets the unique identifier.
            /// </summary>
            /// <value>The unique identifier.</value>
            /// <autogeneratedoc />
            public Guid Guid { get; set; } = Guid.NewGuid();
        }

        /// <summary>
        /// Class ObjectTest.
        /// Implements the <see cref="ICloneable" />
        /// </summary>
        /// <seealso cref="ICloneable" />
        /// <autogeneratedoc />
        public class ObjectTest : ICloneable
        {
            /// <summary>
            /// Gets or sets the unique identifier.
            /// </summary>
            /// <value>The unique identifier.</value>
            /// <autogeneratedoc />
            public Guid Guid { get; set; } = Guid.NewGuid();
            /// <summary>
            /// Gets or sets the object field.
            /// </summary>
            /// <value>The object field.</value>
            /// <autogeneratedoc />
            public ObjectField ObjectField { get; set; } = new ObjectField();

            /// <summary>
            /// Creates a new object that is a copy of the current instance.
            /// </summary>
            /// <returns>A new object that is a copy of this instance.</returns>
            /// <autogeneratedoc />
            public object Clone()
            {
                return new ObjectTest
                {
                    Guid = Guid,
                    ObjectField = new ObjectField
                    {
                        Guid = ObjectField.Guid
                    }
                };
            }
        }

        /// <summary>
        /// Defines the test method ListExtensions_AddItemCollection.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ListExtensions_AddItemCollection()
        {
            var listOfIntegers = new List<int>
            {
                1, 2, 4, 5, 6, 8, 9, 10
            };

            var oldCount = listOfIntegers.Count();
            var listOfIntegersReturned = ((ICollection<int>) listOfIntegers).AddItem(11);

            listOfIntegersReturned.Should().BeSameAs(listOfIntegers);
            listOfIntegersReturned.Count.Should().Be(oldCount + 1);
            listOfIntegersReturned.Last().Should().Be(11);
        }

        /// <summary>
        /// Defines the test method ListExtensions_AddItemList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ListExtensions_AddItemList()
        {
            var listOfIntegers = new List<int>
            {
                1, 2, 4, 5, 6, 8, 9, 10
            };

            var oldCount = listOfIntegers.Count;
            var listOfIntegersReturned = listOfIntegers.AddItem(11);

            listOfIntegersReturned.Should().BeSameAs(listOfIntegers);
            listOfIntegersReturned.Count.Should().Be(oldCount + 1);
            listOfIntegersReturned.Last().Should().Be(11);
        }

        /// <summary>
        /// Defines the test method ListExtensions_CloneList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ListExtensions_CloneList()
        {
            var objectTestList = new List<ObjectTest>
            {
                new ObjectTest(),
                new ObjectTest(),
                new ObjectTest(),
                new ObjectTest(),
                new ObjectTest()
            };

            var objectTestListClone = objectTestList.CloneList();
            objectTestListClone.Should().BeEquivalentTo(objectTestList);
            objectTestList.First().ObjectField.Should().NotBeSameAs(objectTestListClone.First().ObjectField);
        }

        /// <summary>
        /// Defines the test method ListExtensions_ShuffleList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ListExtensions_ShuffleList()
        {
            var listOfIntegers = new List<int>
            {
                1, 2, 4, 5, 6, 8, 9, 10
            };

            var listRandom = listOfIntegers.ToList();
            listRandom.Shuffle();

            listRandom.Should().NotBeAscendingInOrder();
            listRandom.Should().NotBeDescendingInOrder();
        }

        /// <summary>
        /// Defines the test method ListExtensions_ShuffleList_Null.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void ListExtensions_ShuffleList_Null()
        {
            ((List<int>) null).Shuffle();
        }
    }
}