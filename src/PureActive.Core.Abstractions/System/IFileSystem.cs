// ***********************************************************************
// Assembly         : PureActive.Core.Abstractions
// Author           : SteveBu
// Created          : 10-22-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="IFileSystem.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.IO;
using System.Threading.Tasks;

namespace PureActive.Core.Abstractions.System
{
    /// <summary>
    /// Provides access to the file system. All file system calls
    /// should be made from the IFileSystem interface.
    /// </summary>
    public interface IFileSystem
    {
        /// <summary>
        /// Gets the operating system.
        /// </summary>
        /// <value>The operating system.</value>
        /// <autogeneratedoc />
        IOperatingSystem OperatingSystem { get; }

        /// <summary>
        /// Gets or sets the name of the application folder.
        /// </summary>
        /// <value>The name of the application folder.</value>
        /// <autogeneratedoc />
        string AppFolderName { get; set; }

        /// <summary>
        /// Gets the assembly folder.
        /// </summary>
        /// <value>The assembly folder.</value>
        /// <autogeneratedoc />
        string AssemblyFolder { get; }

        /// <summary>
        /// Gets the settings folder.
        /// </summary>
        /// <value>The settings folder.</value>
        /// <autogeneratedoc />
        string SettingsFolder { get; }

        /// <summary>
        /// Creates a new temporary file, and returns the corresponding
        /// stream. The file is deleted when the stream is closed.
        /// </summary>
        /// <returns>Stream.</returns>
        Stream CreateNewTempFile();

        /// <summary>
        /// Gets the temporary folder path.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetTempFolderPath();

        /// <summary>
        /// Gets the name of the temporary file.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetTempFileName();

        /// <summary>
        /// Gets the current directory.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetCurrentDirectory();

        /// <summary>
        /// Reads the contents of a file.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns>Task&lt;System.String&gt;.</returns>
        Task<string> ReadFileContentsAsync(string path);

        /// <summary>
        /// Writes contents to a file.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <param name="contents">The contents.</param>
        /// <returns>Task.</returns>
        Task WriteFileContentsAsync(string path, string contents);

        /// <summary>
        /// Creates the given folder.
        /// </summary>
        /// <param name="path">The path.</param>
        void CreateFolder(string path);

        /// <summary>
        /// Deletes the given folder.
        /// </summary>
        /// <param name="path">The path.</param>
        void DeleteFolder(string path);

        /// <summary>
        /// Deletes the file.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <autogeneratedoc />
        void DeleteFile(string path);

        /// <summary>
        /// Folders the exists.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        bool FolderExists(string path);

        /// <summary>
        /// Files the exists.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        bool FileExists(string path);

        /// <summary>
        /// Gets the file name without extension.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetFileNameWithoutExtension(string path);

        /// <summary>
        /// Gets the name of the folder.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string GetFolderName(string path);

        /// <summary>
        /// Returns a Special folder path given a special folder type
        /// </summary>
        /// <param name="folder">The folder.</param>
        /// <returns>System.String.</returns>
        string GetSpecialFolderPath(Environment.SpecialFolder folder);

        /// <summary>
        /// Returns a Special folder path given a special folder type and option
        /// </summary>
        /// <param name="folder">The folder.</param>
        /// <param name="option">The option.</param>
        /// <returns>System.String.</returns>
        string GetSpecialFolderPath(Environment.SpecialFolder folder, Environment.SpecialFolderOption option);

        /// <summary>
        /// Returns the path for storing application data common to all users
        /// </summary>
        /// <returns>System.String.</returns>
        string GetCommonApplicationDataFolderPath();

        /// <summary>
        /// Returns the path for storing application data common to all users, allows option to verify or create
        /// </summary>
        /// <param name="option">The option.</param>
        /// <returns>System.String.</returns>
        string GetCommonApplicationDataFolderPath(Environment.SpecialFolderOption option);

        /// <summary>
        /// Returns the path for storing application locally for the current user
        /// </summary>
        /// <returns>System.String.</returns>
        string GetLocalApplicationDataFolderPath();

        /// <summary>
        /// Returns the path for storing application locally for the current user, allows option to verify or create
        /// </summary>
        /// <param name="option">The option.</param>
        /// <returns>System.String.</returns>
        string GetLocalApplicationDataFolderPath(Environment.SpecialFolderOption option);

        /// <summary>
        /// Logs the folder path.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string LogFolderPath();

        /// <summary>
        /// Tests the log folder path.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string TestLogFolderPath();

        /// <summary>
        /// Datas the folder path.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string DataFolderPath();

        /// <summary>
        /// Arps the command path.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        string ArpCommandPath();
    }
}