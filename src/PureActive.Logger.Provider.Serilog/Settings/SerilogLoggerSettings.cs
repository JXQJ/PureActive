// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog
// Author           : SteveBu
// Created          : 10-22-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="SerilogLoggerSettings.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using PureActive.Core.Abstractions.System;
using PureActive.Core.System;
using PureActive.Logger.Provider.Serilog.Configuration;
using PureActive.Logger.Provider.Serilog.Interfaces;
using PureActive.Logger.Provider.Serilog.Types;
using PureActive.Logging.Abstractions.Interfaces;
using PureActive.Logging.Abstractions.Types;
using Serilog.Events;

namespace PureActive.Logger.Provider.Serilog.Settings
{
    /// <summary>
    /// Class SerilogLoggerSettings.
    /// Implements the <see cref="ISerilogLoggerSettings" />
    /// </summary>
    /// <seealso cref="ISerilogLoggerSettings" />
    /// <autogeneratedoc />
    public class SerilogLoggerSettings : ISerilogLoggerSettings
    {
        /// <summary>
        /// The file system
        /// </summary>
        /// <autogeneratedoc />
        private readonly IFileSystem _fileSystem;
        /// <summary>
        /// The object lock
        /// </summary>
        /// <autogeneratedoc />
        private readonly object _objectLock = new object();

        /// <summary>
        /// The serilog log levels
        /// </summary>
        /// <autogeneratedoc />
        private readonly Dictionary<string, ISerilogLogLevel> _serilogLogLevels =
            new Dictionary<string, ISerilogLogLevel>();

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLoggerSettings"/> class.
        /// </summary>
        /// <param name="fileSystem">The file system.</param>
        /// <param name="defaultLogEventLevel">The default log event level.</param>
        /// <param name="loggingOutputFlags">The logging output flags.</param>
        /// <exception cref="ArgumentNullException">fileSystem</exception>
        /// <autogeneratedoc />
        public SerilogLoggerSettings(IFileSystem fileSystem, LogEventLevel defaultLogEventLevel,
            LoggingOutputFlags loggingOutputFlags)
        {
            _fileSystem = fileSystem ?? throw new ArgumentNullException(nameof(fileSystem));
            LoggingOutputFlags = loggingOutputFlags;
            Configuration = DefaultLoggerSettingsConfiguration(defaultLogEventLevel);

            RegisterLogLevel(LoggingOutputFlags.Default, defaultLogEventLevel);


            if (loggingOutputFlags.HasFlag(LoggingOutputFlags.Console))
            {
                RegisterLogLevel(LoggingOutputFlags.Console, defaultLogEventLevel);
            }

            if (loggingOutputFlags.HasFlag(LoggingOutputFlags.AppInsights))
            {
                RegisterLogLevel(LoggingOutputFlags.AppInsights, LogEventLevel.Information);
            }

            if (loggingOutputFlags.HasFlag(LoggingOutputFlags.RollingFile))
            {
                RegisterLogLevel(LoggingOutputFlags.RollingFile, defaultLogEventLevel);
            }

            if (loggingOutputFlags.HasFlag(LoggingOutputFlags.TestCorrelator))
            {
                RegisterLogLevel(LoggingOutputFlags.TestCorrelator, defaultLogEventLevel);
            }

            if (loggingOutputFlags.HasFlag(LoggingOutputFlags.XUnitConsole))
            {
                RegisterLogLevel(LoggingOutputFlags.XUnitConsole, defaultLogEventLevel);
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLoggerSettings"/> class.
        /// </summary>
        /// <param name="fileSystem">The file system.</param>
        /// <param name="defaultLogLevel">The default log level.</param>
        /// <param name="loggingOutputFlags">The logging output flags.</param>
        /// <autogeneratedoc />
        public SerilogLoggerSettings(IFileSystem fileSystem, LogLevel defaultLogLevel,
            LoggingOutputFlags loggingOutputFlags) :
            this(fileSystem, SerilogLogLevel.MsftToSerilogLogLevel(defaultLogLevel), loggingOutputFlags)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLoggerSettings"/> class.
        /// </summary>
        /// <param name="fileSystem">The file system.</param>
        /// <param name="configuration">The configuration.</param>
        /// <param name="loggingOutputFlags">The logging output flags.</param>
        /// <exception cref="ArgumentException">configuration</exception>
        /// <autogeneratedoc />
        public SerilogLoggerSettings(IFileSystem fileSystem, IConfiguration configuration, LoggingOutputFlags loggingOutputFlags)
            : this(fileSystem, ParseConfigurationLogLevel(configuration), loggingOutputFlags)
        {
            Configuration = configuration ?? throw new ArgumentException(nameof(configuration));
        }

        /// <summary>
        /// Gets or sets the logging output flags.
        /// </summary>
        /// <value>The logging output flags.</value>
        /// <autogeneratedoc />
        public LoggingOutputFlags LoggingOutputFlags { get; set; }

        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc />
        public IConfiguration Configuration { get; }


        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel RegisterLogLevel(string key, LogLevel logLevel) => RegisterSerilogLogLevel(key, logLevel);

        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel RegisterLogLevel(string key, LogEventLevel logEventLevel) =>
            RegisterSerilogLogLevel(key, logEventLevel);

        /// <summary>
        /// Gets the log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetLogLevel(string key) => GetSerilogLogLevel(key);

        /// <summary>
        /// Gets the or register log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetOrRegisterLogLevel(string key, LogLevel logLevel) =>
            GetOrRegisterSerilogLogLevel(key, logLevel);

        /// <summary>
        /// Gets the or register default log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetOrRegisterDefaultLogLevel(string key) =>
            GetOrRegisterSerilogLogLevel(key, GetLogLevel(LoggingOutputFlags.Default).MinimumLogLevel);

        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel RegisterLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel) =>
            RegisterLogLevel(loggingOutputFlag.ToString(), logLevel);

        /// <summary>
        /// Gets the log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetLogLevel(LoggingOutputFlags loggingOutputFlag) =>
            GetLogLevel(loggingOutputFlag.ToString());

        /// <summary>
        /// Gets the or register log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetOrRegisterLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel) =>
            GetOrRegisterLogLevel(loggingOutputFlag.ToString(), logLevel);

        /// <summary>
        /// Gets the or register default log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel GetOrRegisterDefaultLogLevel(LoggingOutputFlags loggingOutputFlag) =>
            GetOrRegisterDefaultLogLevel(loggingOutputFlag.ToString());

        /// <summary>
        /// Gets the log folder path.
        /// </summary>
        /// <value>The log folder path.</value>
        /// <autogeneratedoc />
        public string LogFolderPath => _fileSystem?.LogFolderPath();

        /// <summary>
        /// Gets the test log folder path.
        /// </summary>
        /// <value>The test log folder path.</value>
        /// <autogeneratedoc />
        public string TestLogFolderPath => _fileSystem?.TestLogFolderPath();

        /// <summary>
        /// Registers the log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>IPureLogLevel.</returns>
        /// <autogeneratedoc />
        public IPureLogLevel RegisterLogLevel(LoggingOutputFlags loggingOutputFlag, LogEventLevel logEventLevel) =>
            RegisterLogLevel(loggingOutputFlag.ToString(), logEventLevel);

        /// <summary>
        /// Gets the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetSerilogLogLevel(LoggingOutputFlags loggingOutputFlag) =>
            GetSerilogLogLevel(loggingOutputFlag.ToString());

        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel RegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag,
            LogEventLevel logEventLevel) => RegisterSerilogLogLevel(loggingOutputFlag.ToString(), logEventLevel);

        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel RegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel) =>
            RegisterSerilogLogLevel(loggingOutputFlag.ToString(), logLevel);

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag, LogLevel logLevel) =>
            GetOrRegisterSerilogLogLevel(loggingOutputFlag.ToString(), logLevel);

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogLevel(LoggingOutputFlags loggingOutputFlag,
            LogEventLevel logEventLevel) => GetOrRegisterSerilogLogLevel(loggingOutputFlag.ToString(), logEventLevel);

        /// <summary>
        /// Gets the or register serilog log default level.
        /// </summary>
        /// <param name="loggingOutputFlag">The logging output flag.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogDefaultLevel(LoggingOutputFlags loggingOutputFlag) =>
            GetOrRegisterSerilogLogDefaultLevel(loggingOutputFlag.ToString());

        /// <summary>
        /// Parses the configuration log level.
        /// </summary>
        /// <param name="configuration">The configuration.</param>
        /// <returns>LogEventLevel.</returns>
        /// <autogeneratedoc />
        private static LogEventLevel ParseConfigurationLogLevel(IConfiguration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            var minimumLevelString = configuration.GetSection("Serilog:MinimumLevel")?["Default"];

            var minimumLogEventLevel = LogEventLevel.Information;

            if (minimumLevelString != null)
            {
                Enum.TryParse(minimumLevelString, true, out minimumLogEventLevel);
            }

            return minimumLogEventLevel;
        }


        /// <summary>
        /// Defaults the logger settings configuration.
        /// </summary>
        /// <param name="initialMinimumLevel">The initial minimum level.</param>
        /// <returns>IConfiguration.</returns>
        /// <autogeneratedoc />
        public static IConfiguration DefaultLoggerSettingsConfiguration(LogEventLevel initialMinimumLevel)
        {
            var fileSystem = new FileSystem();

            return new ConfigurationBuilder()
                .SetBasePath(fileSystem.GetCurrentDirectory())
                .AddLoggerSettings(initialMinimumLevel)
                .AddEnvironmentVariables()
                .Build();
        }

        /// <summary>
        /// Defaults the logger settings configuration.
        /// </summary>
        /// <param name="initialMinimumLevel">The initial minimum level.</param>
        /// <returns>IConfiguration.</returns>
        /// <autogeneratedoc />
        public static IConfiguration DefaultLoggerSettingsConfiguration(LogLevel initialMinimumLevel)
        {
            return DefaultLoggerSettingsConfiguration(SerilogLogLevel.MsftToSerilogLogLevel(initialMinimumLevel));
        }

        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel RegisterSerilogLogLevel(string key, LogEventLevel logEventLevel)
        {
            lock (_objectLock)
            {
                if (_serilogLogLevels.TryGetValue(key, out var serilogLogLevel))
                {
                    serilogLogLevel.MinimumLogEventLevel = logEventLevel;
                }
                else
                {
                    serilogLogLevel = new SerilogLogLevel(logEventLevel);
                    _serilogLogLevels.Add(key, serilogLogLevel);
                }

                return serilogLogLevel;
            }
        }

        /// <summary>
        /// Registers the serilog log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel RegisterSerilogLogLevel(string key, LogLevel logLevel) =>
            RegisterSerilogLogLevel(key, SerilogLogLevel.MsftToSerilogLogLevel(logLevel));

        /// <summary>
        /// Gets the serilog log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetSerilogLogLevel(string key)
        {
            lock (_objectLock)
            {
                return _serilogLogLevels[key];
            }
        }

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logEventLevel">The log event level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogLevel(string key, LogEventLevel logEventLevel)
        {
            lock (_objectLock)
            {
                if (!_serilogLogLevels.TryGetValue(key, out var serilogLogLevel))
                {
                    serilogLogLevel = new SerilogLogLevel(logEventLevel);
                    _serilogLogLevels.Add(key, serilogLogLevel);
                }

                return serilogLogLevel;
            }
        }

        /// <summary>
        /// Gets the or register serilog log level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="logLevel">The log level.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogLevel(string key, LogLevel logLevel) =>
            GetOrRegisterSerilogLogLevel(key, SerilogLogLevel.MsftToSerilogLogLevel(logLevel));

        /// <summary>
        /// Gets the or register serilog log default level.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>ISerilogLogLevel.</returns>
        /// <autogeneratedoc />
        public ISerilogLogLevel GetOrRegisterSerilogLogDefaultLevel(string key) =>
            GetOrRegisterSerilogLogLevel(key, GetLogLevel(LoggingOutputFlags.Default).MinimumLogLevel);
    }
}