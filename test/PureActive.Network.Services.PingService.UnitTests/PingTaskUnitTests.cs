// ***********************************************************************
// Assembly         : PureActive.Network.Services.PingService.UnitTests
// Author           : SteveBu
// Created          : 11-17-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="PingTaskUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using FluentAssertions;
using PureActive.Hosting.CommonServices;
using PureActive.Network.Abstractions.PingService;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Network.Services.PingService.UnitTests
{
    /// <summary>
    /// Class PingTaskUnitTests.
    /// Implements the <see cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingTaskUnitTests}" />
    /// </summary>
    /// <seealso cref="Serilog.Sink.Xunit.TestBase.TestBaseLoggable{PingTaskUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class PingTaskUnitTests : TestBaseLoggable<PingTaskUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingTaskUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public PingTaskUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            var commonServices = CommonServices.CreateInstance(TestLoggerFactory, "PingTaskUnitTests");

            _pingService = new PingService(commonServices);
            _pingTask = new PingService.PingTaskImpl(commonServices);
        }

        /// <summary>
        /// private ping service
        /// </summary>
        /// <autogeneratedoc />
        private readonly IPingService _pingService;

        /// <summary>internal IPingTask service</summary>
        /// <autogeneratedoc />
        private readonly IPingTask _pingTask;

        /// <summary>Defines the test method PingTask_PingTaskImpl_Constructor.</summary>
        /// <autogeneratedoc />
        [Fact]
        public void PingTask_PingTaskImpl_Constructor()
        {
            _pingService.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPingService>();
            _pingTask.Should().NotBeNull().And.Subject.Should().BeAssignableTo<IPingTask>();
        }


        /// <summary>Defines the test method PingTask_PingTaskImpl_Constructor_Null.</summary>
        /// <autogeneratedoc />
        [Fact]
        public void PingTask_PingTaskImpl_Constructor_Null()
        {
            Func<IPingTask> fx = () => new PingService.PingTaskImpl(null);
            fx.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("commonServices");
        }

        /// <summary>Defines the test method PingTask_PingTaskImpl_Defaults.</summary>
        /// <autogeneratedoc />
        [Fact]
        public void PingTask_PingTaskImpl_Defaults()
        {
            _pingTask.Ttl.Should().Be(64);
            _pingTask.Timeout.Should().Be(5000);
            _pingTask.DoNotFragment.Should().BeTrue();
        }


        [Fact]
        public void PingTask_PingTaskImpl_PropertySet()
        {
            _pingTask.Ttl = 64;
            _pingTask.Timeout = 5000;
            _pingTask.DoNotFragment = true;
 
            PingTask_PingTaskImpl_Defaults();
        }
    }
}