// ***********************************************************************
// Assembly         : PureActive.Logger.Provider.Serilog.UnitTests
// Author           : SteveBu
// Created          : 11-25-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-25-2018
// ***********************************************************************
// <copyright file="AsyncFriendlyStackTraceEnricherUnitTests.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using FluentAssertions;
using PureActive.Logger.Provider.Serilog.Enrichers;
using PureActive.Serilog.Sink.Xunit.TestBase;
using Serilog.Core;
using Serilog.Events;
using Xunit;
using Xunit.Abstractions;

namespace PureActive.Logger.Provider.Serilog.UnitTests.Enrichers
{
    /// <summary>
    /// Class AsyncFriendlyStackTraceEnricherUnitTests.
    /// Implements the <see cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{AsyncFriendlyStackTraceEnricherUnitTests}" />
    /// </summary>
    /// <seealso cref="PureActive.Serilog.Sink.Xunit.TestBase.TestBaseLoggable{AsyncFriendlyStackTraceEnricherUnitTests}" />
    /// <autogeneratedoc />
    [Trait("Category", "Unit")]
    public class AsyncFriendlyStackTraceEnricherUnitTests : TestBaseLoggable<AsyncFriendlyStackTraceEnricherUnitTests>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsyncFriendlyStackTraceEnricherUnitTests"/> class.
        /// </summary>
        /// <param name="testOutputHelper">The test output helper.</param>
        /// <autogeneratedoc />
        public AsyncFriendlyStackTraceEnricherUnitTests(ITestOutputHelper testOutputHelper) : base(testOutputHelper)
        {
            
        }

        /// <summary>
        /// Defines the test method AsyncFriendlyStackTraceEnricher_Constructor.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void AsyncFriendlyStackTraceEnricher_Constructor()
        {
            var asyncFriendlyStackTraceEnricher = new AsyncFriendlyStackTraceEnricher();
            asyncFriendlyStackTraceEnricher.Should().NotBeNull().And.Subject.Should()
                .BeAssignableTo<ILogEventEnricher>();
        }

        /// <summary>
        /// Defines the test method AsyncFriendlyStackTraceEnricher where Enrich
        /// has null parameters
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public void AsyncFriendlyStackTraceEnricher_Enrich_Null()
        {
            var asyncFriendlyStackTraceEnricher = new AsyncFriendlyStackTraceEnricher();

            Action act = () => asyncFriendlyStackTraceEnricher.Enrich(null, null);

            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("logEvent");

            act = () => asyncFriendlyStackTraceEnricher.Enrich(new LogEvent(DateTimeOffset.UtcNow, LogEventLevel.Debug, null, MessageTemplate.Empty, new List<LogEventProperty>()), null);

            act.Should().Throw<ArgumentNullException>().And.ParamName.Should().Be("propertyFactory");
        }
    }
}