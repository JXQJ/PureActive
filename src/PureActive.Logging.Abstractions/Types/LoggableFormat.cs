// ***********************************************************************
// Assembly         : PureActive.Logging.Abstractions
// Author           : SteveBu
// Created          : 10-20-2018
// License          : Licensed under MIT License, see https://github.com/PureActive/PureActive/blob/master/LICENSE
//
// Last Modified By : SteveBu
// Last Modified On : 11-20-2018
// ***********************************************************************
// <copyright file="LoggableFormat.cs" company="BushChang Corporation">
//     © 2018 BushChang Corporation. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;

namespace PureActive.Logging.Abstractions.Types
{
    /// <summary>
    /// Enum LoggableFormat
    /// </summary>
    /// <autogeneratedoc />
    [Flags]
    public enum LoggableFormat : byte
    {
        /// <summary>
        /// The none
        /// </summary>
        /// <autogeneratedoc />
        None = 0,
        /// <summary>
        /// Converts to string.
        /// </summary>
        /// <autogeneratedoc />
        ToString = 1 << 0,
        /// <summary>
        /// Converts to log.
        /// </summary>
        /// <autogeneratedoc />
        ToLog = 1 << 1,
        /// <summary>
        /// The with parents
        /// </summary>
        /// <autogeneratedoc />
        WithParents = 1 << 2,
        /// <summary>
        /// Converts to logwithparents.
        /// </summary>
        /// <autogeneratedoc />
        ToLogWithParents = ToLog | WithParents,
        /// <summary>
        /// Converts to stringwithparents.
        /// </summary>
        /// <autogeneratedoc />
        ToStringWithParents = ToString | WithParents
    }

    /// <summary>
    /// Class LoggableFormatUtils.
    /// </summary>
    /// <autogeneratedoc />
    public static class LoggableFormatUtils
    {
        /// <summary>
        /// Determines whether [is with parents] [the specified loggable format].
        /// </summary>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns><c>true</c> if [is with parents] [the specified loggable format]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public static bool IsWithParents(this LoggableFormat loggableFormat) =>
            (loggableFormat & LoggableFormat.WithParents) > 0;

        /// <summary>
        /// Determines whether [is to string] [the specified loggable format].
        /// </summary>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns><c>true</c> if [is to string] [the specified loggable format]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public static bool IsToString(this LoggableFormat loggableFormat) =>
            (loggableFormat & LoggableFormat.ToString) > 0;

        /// <summary>
        /// Determines whether [is to log] [the specified loggable format].
        /// </summary>
        /// <param name="loggableFormat">The loggable format.</param>
        /// <returns><c>true</c> if [is to log] [the specified loggable format]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        public static bool IsToLog(this LoggableFormat loggableFormat) =>
            (loggableFormat & LoggableFormat.ToLog) > 0;
    }
}